bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  v  =  n.getFirstChild();  Node  v  =  parent.getLastChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getFirstChild();  Node  v  =  parent.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  n.getFirstChild();  Node  v  =  parent.getLastChild();	          Node    v    =    n.getFirstChild();    Node    v    =    n.getLastChild();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	88	None	replace
2	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	175	13	add
3	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	175	13	add
4	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	175	13	add
5	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	175	13	add
6	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	175	13	add
7	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	175	13	add
8	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  >=  Token.NAME  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	175	13	add
9	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  >=  Token.NAME  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	175	13	add
10	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  >=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	175	13	add
11	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  >=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	175	13	add
12	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	175	13	add
13	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	175	13	add
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  true);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  true);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  true);	  NodeTraversal.traverse(compiler,    n,    parent,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)	214	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean,<null>)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean,<null>)	214	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  false);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  false);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  arguments,  false);	  NodeTraversal.traverse(compiler,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	214	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  arguments);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false,  arguments);	  NodeTraversal.traverse(compiler,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	214	None	replace
18	[BUG]  [BUGGY]  extractForInitializer(t,  parent,  n);  [CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(t,  parent,  n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  parent,  n);	  extractForInitializer(parent,    n);    	non-compiled	[CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;	212	None	replace
19	[BUG]  [BUGGY]  extractForInitializer(t,  n);  [CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(t,  n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  n);	  extractForInitializer(parent,    n);    	non-compiled	[CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;	212	None	replace
20	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  Traversal  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Traversal.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Traversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    nodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  Traversal	305	None	replace
21	[BUG]  [BUGGY]  Traverse.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  Traverse  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Traverse.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Traverse.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    nodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  Traverse	305	None	replace
22	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  nodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	nodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    nodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	305	None	replace
23	[BUG]  [BUGGY]  TraverseTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  TraverseTraversal  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  TraverseTraversal.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	TraverseTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    nodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	305	None	replace
24	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	extractForInitializer(n,        parent,        null);        t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	303	1	add
25	[BUG]  [BUGGY]  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,        parent,        null);        t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	303	1	add
26	[BUG]  [BUGGY]  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();  n.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();  n.getCompiler().reportCodeChange();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,        parent,        null);        t.getCompiler().reportCodeChange();    n.getCompiler().reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol	303	None	add
27	[BUG]  [BUGGY]  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();  Node  parent  =  n.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();  Node  parent  =  n.getFirstChild();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,        parent,        null);        t.getCompiler().reportCodeChange();    Node  parent  =  n.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	303	None	add
28	[BUG]  [BUGGY]  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();  Context.reportCodeChange();  [CE]  cannot  find  symbol  Context  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();  Context.reportCodeChange();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,        parent,        null);        t.getCompiler().reportCodeChange();    Context.reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol  Context	303	None	add
29	[BUG]  [BUGGY]  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  Context  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,        parent,        null);        t.getCompiler().reportCodeChange();    Context.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  Context	303	None	add
30	[BUG]  [BUGGY]  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Context  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,        parent,        null);        t.getCompiler().reportCodeChange();    Context.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  Context	303	None	add
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this,  arguments);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this,  arguments);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	227	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this,  argument);  [CE]  cannot  find  symbol  argument  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this,  argument);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this,  argument);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  cannot  find  symbol  argument	227	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this,  argumentCount);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this,  argumentCount);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	227	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this,  constantMap);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this,  constantMap);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  cannot  find  symbol  constantMap	227	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this,  isConst);  [CE]  cannot  find  symbol  isConst  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this,  isConst);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this,  isConst);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  cannot  find  symbol  isConst	227	None	replace
36	[BUG]  [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n,  parent  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n,  parent  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function  f()  {  arguments=Array.prototype.slice.call(n,  parent	  function    f()    {    arguments=Array.prototype.slice.call(n    ==    	non-compiled	[CE]  ';'  expected	52	None	replace
37	[BUG]  [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n,  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n,  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function  f()  {  arguments=Array.prototype.slice.call(n,	  function    f()    {    arguments=Array.prototype.slice.call(n    ==    	non-compiled	[CE]  ';'  expected	52	None	replace
38	[BUG]  [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n,  parent);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n,  parent);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function  f()  {  arguments=Array.prototype.slice.call(n,  parent);	  function    f()    {    arguments=Array.prototype.slice.call(n    ==    	non-compiled	[CE]  ';'  expected	52	None	replace
39	[BUG]  [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(parent,  n  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(parent,  n  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function  f()  {  arguments=Array.prototype.slice.call(parent,  n	  function    f()    {    arguments=Array.prototype.slice.call(n    ==    	non-compiled	[CE]  ';'  expected	52	None	replace
40	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	165	13	add
41	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	165	13	add
42	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	165	13	add
43	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	165	13	add
44	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	165	13	add
45	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	165	13	add
46	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  >=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  >=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	165	13	add
47	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  >=  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  >=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  >=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	165	13	add
48	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	165	13	add
49	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	165	13	add
50	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	71	13	add
51	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	71	13	add
52	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	71	13	add
53	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	71	13	add
54	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	71	13	add
55	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	71	13	add
56	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	71	13	add
57	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	71	13	add
58	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	71	13	add
59	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	71	13	add
60	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(n,  parent  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(n,  parent  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function()  {  arguments=Array.prototype.slice.call(n,  parent	  function()    {    arguments=Array.prototype.slice.call(n    ==    	non-compiled	[CE]  ';'  expected	53	None	replace
61	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(n,  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(n,  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function()  {  arguments=Array.prototype.slice.call(n,	  function()    {    arguments=Array.prototype.slice.call(n    ==    	non-compiled	[CE]  ';'  expected	53	None	replace
62	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(parent,  n  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(parent,  n  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function()  {  arguments=Array.prototype.slice.call(parent,  n	  function()    {    arguments=Array.prototype.slice.call(n    ==    	non-compiled	[CE]  ';'  expected	53	None	replace
63	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(n,  true  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(n,  true  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function()  {  arguments=Array.prototype.slice.call(n,  true	  function()    {    arguments=Array.prototype.slice.call(n    ==    	non-compiled	[CE]  ';'  expected	53	None	replace
64	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(n,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeUtil.removeChild(n,    parent);    NodeUtil.removeChild(n,  parent);	  	compilable	  [FE]  RuntimeException  	11	13	add
65	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(n,  parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(n,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(n,    parent);    NodeUtil.removeChild(n,  parent);	  	compilable	  [FE]  RuntimeException  	11	13	add
66	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(parent,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeUtil.removeChild(n,    parent);    NodeUtil.removeChild(parent,  parent);	  	compilable	  [FE]  RuntimeException  	11	13	add
67	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(parent,  parent);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(parent,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(n,    parent);    NodeUtil.removeChild(parent,  parent);	  	compilable	  [FE]  RuntimeException  	11	13	add
68	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeUtil.removeChild(n,    parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	11	13	add
69	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(n,    parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	11	13	add
70	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeUtil.removeChild(n,    parent);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	11	13	add
71	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(n,    parent);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	11	13	add
72	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeTraversal.traverse(compiler,        n,        this);        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	78	13	add
73	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	78	13	add
74	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(t,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  no  suitable  method  found  for  traverse(NodeTraversal,Node,Normalize)  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(t,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(t,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(NodeTraversal,Node,Normalize)	78	None	add
75	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(n,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  no  suitable  method  found  for  traverse(Node,Node,Normalize)  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(n,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(n,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(Node,Node,Normalize)	78	None	add
76	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeTraversal.traverse(compiler,        n,        this);        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  null);  NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	78	13	add
77	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  null);  NodeTraversal.traverse(compiler,  n,  this);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  null);  NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	78	13	add
78	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(parent,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  no  suitable  method  found  for  traverse(Node,Node,Normalize)  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(parent,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(parent,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(Node,Node,Normalize)	78	None	add
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  parent.replaceChild(n,  new  NodeTraversal(compiler));  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  parent.replaceChild(n,  new  NodeTraversal(compiler));  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  parent.replaceChild(n,  new  NodeTraversal(compiler));	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    parent.replaceChild(n,    new    NodeTraversal(compiler));    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler)	245	None	replace
80	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  parent.replaceChild(n,  new  NodeTraversal(compiler));  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  parent.replaceChild(n,  new  NodeTraversal(compiler));  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  parent.replaceChild(n,  new  NodeTraversal(compiler));	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    parent.replaceChild(n,    new    NodeTraversal(compiler));    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback)	245	None	replace
81	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  parent);  parent.replaceChild(n,  new  NodeTraversal(compiler));  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.ScopeTicklingCallback,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  parent);  parent.replaceChild(n,  new  NodeTraversal(compiler));  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  parent);  parent.replaceChild(n,  new  NodeTraversal(compiler));	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    parent.replaceChild(n,    new    NodeTraversal(compiler));    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.ScopeTicklingCallback,Node)	245	None	replace
82	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [CE]  cannot  find  symbol  Traversal  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Traversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Traversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    parent.replaceChild(n,    new    NodeTraversal(compiler));    	non-compiled	[CE]  cannot  find  symbol  Traversal	245	None	replace
83	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  true,  new  ScopeTicklingCallback());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean,Normalize.ScopeTicklingCallback)  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  true,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  true,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    parent,    false,    new    ScopeTicklingCallback());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean,Normalize.ScopeTicklingCallback)	119	None	replace
84	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  null,  new  ScopeTicklingCallback());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean,<null>,Normalize.ScopeTicklingCallback)  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  null,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false,  null,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    parent,    false,    new    ScopeTicklingCallback());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean,<null>,Normalize.ScopeTicklingCallback)	119	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  new  ScopeTicklingCallback(),  t);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean,Normalize.ScopeTicklingCallback,NodeTraversal)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  new  ScopeTicklingCallback(),  t);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false,  new  ScopeTicklingCallback(),  t);	  NodeTraversal.traverse(compiler,    n,    parent,    false,    new    ScopeTicklingCallback());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean,Normalize.ScopeTicklingCallback,NodeTraversal)	119	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  new  ScopeTicklingCallback(),  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  new  ScopeTicklingCallback(),  arguments);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false,  new  ScopeTicklingCallback(),  arguments);	  NodeTraversal.traverse(compiler,    n,    parent,    false,    new    ScopeTicklingCallback());    	non-compiled	[CE]  cannot  find  symbol  arguments	119	None	replace
87	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Context  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.checkState(n.getType()  ==  Token.NAME);	  extractForInitializer(parent,    null,    null);    Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Context	285	None	replace
88	[BUG]  [BUGGY]  Context.checkState(parent.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Context  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.checkState(parent.getType()  ==  Token.NAME);	  extractForInitializer(parent,    null,    null);    Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Context	285	None	replace
89	[BUG]  [BUGGY]  NodeUtil.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.checkState(n.getType()  ==  Token.NAME);	  extractForInitializer(parent,    null,    null);    Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	285	None	replace
90	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME);  [CE]  cannot  find  symbol  Context  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.checkState(n.getType()!=  Token.NAME);	  extractForInitializer(parent,    null,    null);    Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Context	285	None	replace
91	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	174	13	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	174	13	replace
93	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	174	13	replace
94	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	174	13	replace
95	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	174	13	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  n);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	174	13	replace
97	[BUG]  [BUGGY]  NodeUtil.removeChild(parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent);	  NodeUtil.removeChild(n,    parent);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	12	None	replace
98	[BUG]  [BUGGY]  NodeUtil.addChildToFront(parent,  n);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.addChildToFront(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.addChildToFront(parent,  n);	  NodeUtil.removeChild(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
99	[BUG]  [BUGGY]  NodeUtil.prependChild(parent,  n);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.prependChild(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.prependChild(parent,  n);	  NodeUtil.removeChild(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
100	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	185	13	add
101	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	185	13	add
102	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	185	13	add
103	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	185	13	add
104	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	185	13	add
105	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	185	13	add
106	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	185	13	add
107	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	185	13	add
108	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	185	13	add
109	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	185	13	add
110	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	185	13	add
111	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	185	13	add
112	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	69	13	add
113	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	69	13	add
114	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	69	13	add
115	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	69	13	add
116	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	69	13	add
117	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	69	13	add
118	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	69	13	add
119	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	69	13	add
120	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	69	13	add
121	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	69	13	add
122	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	173	13	add
123	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	173	13	add
124	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	173	None	add
125	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	173	13	add
126	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	173	13	add
127	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	173	13	add
128	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	173	13	add
129	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.NAME)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.NAME)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	173	13	add
130	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.NAME)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.NAME)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.NAME)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	173	13	add
131	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	173	None	add
132	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	178	13	replace
133	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	178	13	replace
134	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	178	13	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	178	13	replace
136	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	178	13	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	178	13	replace
138	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	178	1	replace
139	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	178	1	replace
140	[BUG]  [BUGGY]  extractForNormalizer(t,  n,  null,  null);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForNormalizer(t,  n,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForNormalizer(t,  n,  null,  null);	  extractForNormalizer(n,    null,    null);    	non-compiled	[CE]  cannot  find  symbol	256	None	replace
141	[BUG]  [BUGGY]  extractForNormalizer(n,  parent,  null);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForNormalizer(n,  parent,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForNormalizer(n,  parent,  null);	  extractForNormalizer(n,    null,    null);    	non-compiled	[CE]  cannot  find  symbol	256	None	replace
142	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  n);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  parent,  this,  n);	  NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)	20	None	replace
143	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  node,  this);	  NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  node	20	None	replace
144	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  parent,  null,  null);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  parent,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  parent,  null,  null);	  MutableNodeTraversal.traverse(compiler,    n,    null,    null);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	249	None	replace
145	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  parent,  null);  [CE]  cannot  find  symbol  Context  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.traverse(compiler,  n,  parent,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.traverse(compiler,  n,  parent,  null);	  MutableNodeTraversal.traverse(compiler,    n,    null,    null);    	non-compiled	[CE]  cannot  find  symbol  Context	249	None	replace
146	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	268	None	add
147	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	268	None	add
148	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	268	13	add
149	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	268	13	add
150	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.LABEL);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.LABEL);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.LABEL);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	268	None	add
151	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);	  	non-compiled	[CE]  ';'  expected	268	None	add
152	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	268	None	add
153	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  n));  [CE]  constructor  ScopeTicklingCallback  in  class  Normalize.ScopeTicklingCallback  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  n));  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  n));	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(t));    	non-compiled	[CE]  constructor  ScopeTicklingCallback  in  class  Normalize.ScopeTicklingCallback  cannot  be  applied  to  given  types;	117	None	replace
154	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  arguments));  [CE]  cannot  find  symbol  arguments  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  arguments));  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  arguments));	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(t));    	non-compiled	[CE]  cannot  find  symbol  arguments	117	None	replace
155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  args));  [CE]  cannot  find  symbol  args  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  args));  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  args));	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(t));    	non-compiled	[CE]  cannot  find  symbol  args	117	None	replace
156	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  isConst));  [CE]  cannot  find  symbol  isConst  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  isConst));  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  isConst));	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(t));    	non-compiled	[CE]  cannot  find  symbol  isConst	117	None	replace
157	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  state.getArgumentCount()));  [CE]  cannot  find  symbol  state  [FE]                                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  state.getArgumentCount()));  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  state.getArgumentCount()));	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(t));    	non-compiled	[CE]  cannot  find  symbol  state	117	None	replace
158	[BUG]  [BUGGY]  Node  parent  =  n.getLastChild().getNext();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  parent  =  n.getLastChild().getNext();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  parent  =  n.getLastChild().getNext();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	36	None	replace
159	[BUG]  [BUGGY]  Node  parent  =  t.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  parent  =  t.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  parent  =  t.getLastChild();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	36	None	replace
160	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);	  	compilable	  [FE]  RuntimeException  	246	13	add
161	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);	  	compilable	  [FE]  RuntimeException  	246	13	add
162	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Preconditions.checkState(n.getType()!=  Token.NAME,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    Preconditions.checkState(n.getType()!=  Token.NAME,  parent);	  	compilable	  [FE]  RuntimeException  	246	13	add
163	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Preconditions.checkState(n.getType()!=  Token.NAME,  parent);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Preconditions.checkState(n.getType()!=  Token.NAME,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    Preconditions.checkState(n.getType()!=  Token.NAME,  parent);	  	compilable	  [FE]  RuntimeException  	246	13	add
164	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Node  parent  =  n.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME,  parent);  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Node  parent  =  n.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    Node  parent  =  n.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME,  parent);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	246	None	add
165	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME,  parent);  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME,  parent);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	246	None	add
166	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Preconditions.checkState(parent.getType()  ==  Token.NAME,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    Preconditions.checkState(parent.getType()  ==  Token.NAME,  parent);	  	compilable	  [FE]  RuntimeException  	246	13	add
167	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Preconditions.checkState(parent.getType()  ==  Token.NAME,  parent);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Preconditions.checkState(parent.getType()  ==  Token.NAME,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    Preconditions.checkState(parent.getType()  ==  Token.NAME,  parent);	  	compilable	  [FE]  RuntimeException  	246	13	add
168	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Node  parent  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Node  parent  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    Node  parent  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	246	None	add
169	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	270	None	replace
170	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	270	13	replace
171	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	270	13	replace
172	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	270	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]                    RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	270	None	replace
174	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	270	13	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]                      RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	270	13	replace
176	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	86	None	replace
177	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(n.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	86	13	replace
178	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(n.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	86	13	replace
179	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)	86	None	replace
180	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent);  doStatementNormalizations(t,  n,  parent);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	doStatementNormalizations(t,    n,    parent);    doStatementNormalizations(t,  n,  parent);	  	compilable	  [FE]  RuntimeException  	143	13	add
181	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent);  doStatementNormalizations(t,  n,  parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent);  doStatementNormalizations(t,  n,  parent);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,    n,    parent);    doStatementNormalizations(t,  n,  parent);	  	compilable	  [FE]  RuntimeException  	143	13	add
182	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent);  DoStatementNormalizations(t,  n,  parent);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent);  DoStatementNormalizations(t,  n,  parent);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,    n,    parent);    DoStatementNormalizations(t,  n,  parent);	  	non-compiled	[CE]  cannot  find  symbol	143	None	add
183	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent);  doesStatementNormalizations(t,  n,  parent);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent);  doesStatementNormalizations(t,  n,  parent);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,    n,    parent);    doesStatementNormalizations(t,  n,  parent);	  	non-compiled	[CE]  cannot  find  symbol	143	None	add
184	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent);  t.getCompiler().reportCodeChange();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	doStatementNormalizations(t,    n,    parent);    t.getCompiler().reportCodeChange();	  	compilable	  [FE]  RuntimeException  	143	13	add
185	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent);  t.getCompiler().reportCodeChange();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent);  t.getCompiler().reportCodeChange();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,    n,    parent);    t.getCompiler().reportCodeChange();	  	compilable	  [FE]  RuntimeException  	143	13	add
186	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent);  getVarDeclarations(t,  n,  parent);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent);  getVarDeclarations(t,  n,  parent);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,    n,    parent);    getVarDeclarations(t,  n,  parent);	  	non-compiled	[CE]  cannot  find  symbol	143	None	add
187	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent);  doStatementNormalizations(t,  n,  parent;  [CE]  ')'  expected  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent);  doStatementNormalizations(t,  n,  parent;  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,    n,    parent);    doStatementNormalizations(t,  n,  parent;	  	non-compiled	[CE]  ')'  expected	143	None	add
188	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	39	13	add
189	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	39	13	add
190	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	39	13	add
191	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	39	13	add
192	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	39	None	add
193	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	39	13	add
194	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	39	13	add
195	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	39	13	add
196	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	39	13	add
197	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	129	None	add
198	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  breakVarDeclarations(n);  }  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  breakVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  breakVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	129	None	add
199	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);	  	non-compiled	[CE]  ';'  expected	129	None	add
200	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	129	None	add
201	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	129	None	add
202	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  divideVarDeclarations(n);  }  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  divideVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  divideVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	129	None	add
203	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argument);  [CE]  cannot  find  symbol  argument  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argument);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argument);	  NodeTraversal.traverse(compiler,    n,    parent,    expectedConst);    	non-compiled	[CE]  cannot  find  symbol  argument	111	None	replace
204	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  isConst);  [CE]  cannot  find  symbol  isConst  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  isConst);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  isConst);	  NodeTraversal.traverse(compiler,    n,    parent,    expectedConst);    	non-compiled	[CE]  cannot  find  symbol  isConst	111	None	replace
205	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  forbidChanges);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  forbidChanges);	  NodeTraversal.traverse(compiler,    n,    parent,    expectedConst);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	111	None	replace
206	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  arguments);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalization(t,  n,  parent,  arguments);	  doStatementNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  arguments	141	None	replace
207	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  argument);  [CE]  cannot  find  symbol  argument  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  argument);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalization(t,  n,  parent,  argument);	  doStatementNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argument	141	None	replace
208	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  isConst);  [CE]  cannot  find  symbol  isConst  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  isConst);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalization(t,  n,  parent,  isConst);	  doStatementNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  isConst	141	None	replace
209	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Preconditions.checkState(n.getType()  ==  Token.NAME);	  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	289	13	replace
210	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Preconditions.checkState(n.getType()  ==  Token.NAME);	  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	289	13	replace
211	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	222	13	add
212	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	222	13	add
213	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	222	13	add
214	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	222	13	add
215	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	222	13	add
216	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	222	13	add
217	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	222	13	add
218	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	222	13	add
219	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	222	13	add
220	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	222	13	add
221	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	222	13	add
222	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	222	13	add
223	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	299	13	replace
224	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	299	13	replace
225	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	299	13	replace
226	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	299	13	replace
227	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	299	13	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	299	13	replace
229	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	299	13	replace
230	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.BLOCK);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	299	13	replace
231	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  null);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  arguments,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	4	None	replace
232	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null,  arguments);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  null,  arguments);	  NodeTraversal.traverse(compiler,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	4	None	replace
233	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap,  null);  [CE]  cannot  find  symbol  argumentMap  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argumentMap,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	4	None	replace
234	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	172	13	replace
235	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	172	13	replace
236	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	172	13	replace
237	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	172	13	replace
238	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	172	13	replace
239	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	172	13	replace
240	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  n  =  n.getFirstChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Node        v        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	92	None	add
241	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getLastChild();  n  =  n.getFirstChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Node        v        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  v  =  n.getLastChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	92	None	add
242	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  n  =  n.getLastChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Node        v        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  n  =  n.getLastChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	92	None	add
243	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  n  =  n.getNext();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  n  =  n.getNext();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Node        v        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  n  =  n.getNext();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	92	None	add
244	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getNext();  n  =  n.getNext();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getNext();  n  =  n.getNext();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Node        v        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  v  =  n.getNext();  n  =  n.getNext();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	92	None	add
245	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeUtil.checkState(parent.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeUtil.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeUtil.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeUtil.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	291	None	replace
246	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeUtil.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	291	None	replace
247	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.checkState(parent.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeUtil.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	291	None	replace
248	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	135	13	replace
249	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	135	13	replace
250	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	135	13	replace
251	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	135	13	replace
252	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getModule());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getModule());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getModule());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  cannot  find  symbol	259	None	replace
253	[BUG]  [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.NAME,  n.getModule());  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.NAME,  n.getModule());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(t.getType()  ==  Token.NAME,  n.getModule());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  cannot  find  symbol	259	None	replace
254	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  normalizeVarDeclarations);  [CE]  cannot  find  symbol  normalizeVarDeclarations  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  normalizeVarDeclarations);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  normalizeVarDeclarations);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  normalizeVarDeclarations	16	None	replace
255	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  constantMap);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  constantMap);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  constantMap	16	None	replace
256	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  normalizeLabels);  [CE]  cannot  find  symbol  normalizeLabels  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  normalizeLabels);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  normalizeLabels);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  normalizeLabels	16	None	replace
257	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean,boolean)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));	  Context.report(JSError.make(t,    n,    CONVERT_WHILE_TO_FOR));    	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean,boolean)	8	None	replace
258	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  parent,  CONVERT_WHILE_TO_FOR));  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,Node,boolean)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  parent,  CONVERT_WHILE_TO_FOR));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  parent,  CONVERT_WHILE_TO_FOR));	  Context.report(JSError.make(t,    n,    CONVERT_WHILE_TO_FOR));    	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,Node,boolean)	8	None	replace
259	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR,  arguments));  [CE]  cannot  find  symbol  arguments  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR,  arguments));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR,  arguments));	  Context.report(JSError.make(t,    n,    CONVERT_WHILE_TO_FOR));    	non-compiled	[CE]  cannot  find  symbol  arguments	8	None	replace
260	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));  [CE]  cannot  find  symbol  NON_GLOBAL_NAMES_UNIQUE  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));	  Context.report(JSError.make(t,    n,    CONVERT_WHILE_TO_FOR));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_NAMES_UNIQUE	8	None	replace
261	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean,boolean)  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE));	  Context.report(JSError.make(t,    n,    CONVERT_WHILE_TO_FOR));    	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean,boolean)	8	None	replace
262	[BUG]  [BUGGY]  ExtractForNormalization(t,  n,  parent,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForNormalization(t,  n,  parent,  argumentCount);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForNormalization(t,  n,  parent,  argumentCount);	  ExtractForNormalization(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	235	None	replace
263	[BUG]  [BUGGY]  ExtractForNormalization(t,  n,  parent,  argumentNames);  [CE]  cannot  find  symbol  argumentNames  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForNormalization(t,  n,  parent,  argumentNames);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForNormalization(t,  n,  parent,  argumentNames);	  ExtractForNormalization(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentNames	235	None	replace
264	[BUG]  [BUGGY]  ExtractForNormalization(t,  n,  parent,  getVarDeclarations());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForNormalization(t,  n,  parent,  getVarDeclarations());  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForNormalization(t,  n,  parent,  getVarDeclarations());	  ExtractForNormalization(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol	235	None	replace
265	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    moveNamedFunctions(n.getLastChil    	compilable	  [FE]  RuntimeException  	302	13	replace
266	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    moveNamedFunctions(n.getLastChil    	compilable	  [FE]  RuntimeException  	302	13	replace
267	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  n  =  parent.getFirstChild();	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    moveNamedFunctions(n.getLastChil    	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	302	None	replace
268	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    moveNamedFunctions(n.getLastChil    	non-compiled	[CE]  cannot  find  symbol  preconditions	302	None	replace
269	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  argumentSet);  [CE]  cannot  find  symbol  argumentSet  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  argumentSet);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  argumentSet);	  NodeTraversal.traverse(compiler,    n,    parent,    this,    constantMap);    	non-compiled	[CE]  cannot  find  symbol  argumentSet	296	None	replace
270	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	156	13	add
271	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	156	13	add
272	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	156	13	add
273	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	156	13	add
274	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	156	13	add
275	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	156	13	add
276	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	156	13	add
277	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	156	13	add
278	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	156	13	add
279	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	156	13	add
280	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  constantMap,  new  ScopeTicklingCallback());  [CE]  cannot  find  symbol  constantMap  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  constantMap,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  constantMap,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    parent,    this,    new    ScopeTicklingCallback());    	non-compiled	[CE]  cannot  find  symbol  constantMap	228	None	replace
281	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  null,  new  ScopeTicklingCallback());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize,<null>,Normalize.ScopeTicklingCallback)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  null,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  null,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    parent,    this,    new    ScopeTicklingCallback());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize,<null>,Normalize.ScopeTicklingCallback)	228	None	replace
282	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  new  ScopeTicklingCallback(),  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  new  ScopeTicklingCallback(),  arguments);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  new  ScopeTicklingCallback(),  arguments);	  NodeTraversal.traverse(compiler,    n,    parent,    this,    new    ScopeTicklingCallback());    	non-compiled	[CE]  cannot  find  symbol  arguments	228	None	replace
283	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  normalizeVarDeclarations,  new  ScopeTicklingCallback());  [CE]  cannot  find  symbol  normalizeVarDeclarations  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  normalizeVarDeclarations,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  normalizeVarDeclarations,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    parent,    this,    new    ScopeTicklingCallback());    	non-compiled	[CE]  cannot  find  symbol  normalizeVarDeclarations	228	None	replace
284	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  normalizeLabels(n),  new  ScopeTicklingCallback());  [CE]  'void'  type  not  allowed  here  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  normalizeLabels(n),  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  normalizeLabels(n),  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    parent,    this,    new    ScopeTicklingCallback());    	non-compiled	[CE]  'void'  type  not  allowed  here	228	None	replace
285	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	176	13	replace
286	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	176	13	replace
287	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	176	13	replace
288	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	176	13	replace
289	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	176	13	replace
290	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	176	13	replace
291	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	176	1	replace
292	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	176	1	replace
293	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,Node,boolean)  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE));	  extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,Node,boolean)	58	None	replace
294	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE),  n);  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean)  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE),  n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE),  n);	  extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean)	58	None	replace
295	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE),  parent);  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean)  [FE]                    RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE),  parent);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE),  parent);	  extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean)	58	None	replace
296	[BUG]  [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [CE]  cannot  find  symbol  FunctionNodeTraversal  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	FunctionNodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    FunctionNodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  cannot  find  symbol  FunctionNodeTraversal	122	None	replace
297	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  new  ScopeTicklingCallback());  [CE]  cannot  find  symbol  Context  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.traverse(compiler,  n,  new  ScopeTicklingCallback());	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    FunctionNodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  cannot  find  symbol  Context	122	None	replace
298	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  Context  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  Context	82	None	replace
299	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(n.getType()  ==  Token.FUNCTION);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	82	None	replace
300	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  parent);  Context.checkState(n.getType()  ==  Token.FUNCTION);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)	82	None	replace
301	[BUG]  [BUGGY]  Context.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  Context  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.checkState(parent.getType()  ==  Token.FUNCTION);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  Context	82	None	replace
302	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  VAR_LOCAL_NAMES_UNIQUE,  arguments));  [CE]  cannot  find  symbol  VAR_LOCAL_NAMES_UNIQUE  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  VAR_LOCAL_NAMES_UNIQUE,  arguments));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  VAR_LOCAL_NAMES_UNIQUE,  arguments));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  cannot  find  symbol  VAR_LOCAL_NAMES_UNIQUE	7	None	replace
303	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  STRICT_MODULE_NAMES_UNIQUE,  arguments));  [CE]  cannot  find  symbol  STRICT_MODULE_NAMES_UNIQUE  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  STRICT_MODULE_NAMES_UNIQUE,  arguments));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  STRICT_MODULE_NAMES_UNIQUE,  arguments));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  cannot  find  symbol  STRICT_MODULE_NAMES_UNIQUE	7	None	replace
304	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments),  n);  [CE]  cannot  find  symbol  NON_GLOBAL_NAMES_UNIQUE  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments),  n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments),  n);	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_NAMES_UNIQUE	7	None	replace
305	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	159	13	replace
306	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	159	13	replace
307	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  cannot  find  symbol  preconditions	159	None	replace
308	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  n  =  n.getFirstChild();	          n    =    n.getFirstChild();    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	32	None	replace
309	[BUG]  [BUGGY]  node  =  n.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  node  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	node  =  n.getFirstChild();	          n    =    n.getFirstChild();    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	32	None	replace
310	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	161	13	add
311	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	161	13	add
312	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	161	13	add
313	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	161	13	add
314	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	161	13	add
315	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	161	13	add
316	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	161	13	add
317	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	161	13	add
318	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	161	13	add
319	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	161	13	add
320	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >>  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	161	None	add
321	[BUG]  [BUGGY]  Node  v  =  n.getLastChild();  Node  v  =  n.getLastChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getLastChild();  Node  v  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.getLastChild();    Node  v  =  n.getLastChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	21	None	add
322	[BUG]  [BUGGY]  Node  v  =  n.getLastChild();  Node  v  =  n.getFirstChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getLastChild();  Node  v  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.getLastChild();    Node  v  =  n.getFirstChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	21	None	add
323	[BUG]  [BUGGY]  Node  v  =  n.getLastChild();  FunctionNode  v  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getLastChild();  FunctionNode  v  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.getLastChild();    FunctionNode  v  =  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
324	[BUG]  [BUGGY]  Node  v  =  n.getLastChild();  Node  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getLastChild();  Node  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.getLastChild();    Node  n  =  n.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	21	None	add
325	[BUG]  [BUGGY]  Node  v  =  n.getLastChild();  Function  v  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getLastChild();  Function  v  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.getLastChild();    Function  v  =  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
326	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Node    v    =    n.getLastChild();    n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	21	9	add
327	[BUG]  [BUGGY]  Node  v  =  n.getLastChild();  n  =  n.getLastChild();  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.getLastChild();    n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	21	9	add
328	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    parent.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	184	None	replace
329	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  n  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    parent.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	184	None	replace
330	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	105	13	add
331	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	105	13	add
332	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(n,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(n,  n);  NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	105	13	add
333	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(n,  n);  NodeUtil.removeChild(parent,  n);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(n,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(n,  n);  NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	105	13	add
334	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	105	13	add
335	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	105	13	add
336	[BUG]  [BUGGY]  ExtractForNormalization(t,  n,  parent,  argument);  [CE]  cannot  find  symbol  argument  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForNormalization(t,  n,  parent,  argument);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForNormalization(t,  n,  parent,  argument);	  extractForNormalization(t,    n,    parent,    argument);    	non-compiled	[CE]  cannot  find  symbol  argument	260	None	replace
337	[BUG]  [BUGGY]  extractForNormalization(t,  n,  parent,  getVarDeclarations());  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForNormalization(t,  n,  parent,  getVarDeclarations());  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForNormalization(t,  n,  parent,  getVarDeclarations());	  extractForNormalization(t,    n,    parent,    argument);    	non-compiled	[CE]  cannot  find  symbol	260	None	replace
338	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);	          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    null);    	compilable	  [FE]  RuntimeException  	110	13	replace
339	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);	          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    null);    	compilable	  [FE]  RuntimeException  	110	13	replace
340	[BUG]  [BUGGY]  NodeUtil.replaceChild(parent,  n);  parent.replaceChild(n,  null);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.replaceChild(parent,  n);  parent.replaceChild(n,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.replaceChild(parent,  n);  parent.replaceChild(n,  null);	          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    null);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
341	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  this);	          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    null);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	110	None	replace
342	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  parent.removeFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Node  v  =  parent.removeFirstChild();	  Node    v    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	279	13	replace
343	[BUG]  [BUGGY]  Node  v  =  parent.removeFirstChild();  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  parent.removeFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  parent.removeFirstChild();	  Node    v    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	279	13	replace
344	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	220	13	add
345	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	220	13	add
346	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	220	13	add
347	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	220	13	add
348	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	220	13	add
349	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	220	13	add
350	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	220	13	add
351	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	220	13	add
352	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	220	13	add
353	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	220	13	add
354	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	220	13	add
355	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	220	13	add
356	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	171	13	add
357	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	171	13	add
358	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	171	13	add
359	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	171	13	add
360	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	171	13	add
361	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	171	13	add
362	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	171	13	add
363	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	171	13	add
364	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	171	13	add
365	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	171	13	add
366	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  t.getCompiler().reportCodeChange();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	t.getCompiler().reportCodeChange();	  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	304	1	replace
367	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  t.getCompiler().reportCodeChange();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	t.getCompiler().reportCodeChange();	  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	304	1	replace
368	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  new  MutableNodeTraversal(compiler,  this));  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  new  MutableNodeTraversal(compiler,  this));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  new  MutableNodeTraversal(compiler,  this));	  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	304	None	replace
369	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  ScopeTicklingCallback());  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  node,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  cannot  find  symbol  node	103	None	replace
370	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback(),  n);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.ScopeTicklingCallback,Node)  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback(),  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback(),  n);	  NodeTraversal.traverse(compiler,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.ScopeTicklingCallback,Node)	103	None	replace
371	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback(),  arguments);  [CE]  cannot  find  symbol  arguments  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback(),  arguments);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback(),  arguments);	  NodeTraversal.traverse(compiler,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  cannot  find  symbol  arguments	103	None	replace
372	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);	  	compilable	  [FE]  RuntimeException  	107	13	add
373	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);	  	compilable	  [FE]  RuntimeException  	107	13	add
374	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	107	13	add
375	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	107	13	add
376	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  NodeUtil.replaceChild(parent,  n);  parent.replaceChild(n,  n);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  NodeUtil.replaceChild(parent,  n);  parent.replaceChild(n,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.replaceChild(parent,  n);  parent.replaceChild(n,  n);	  	non-compiled	[CE]  cannot  find  symbol	107	None	add
377	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  NodeUtil.removeChild(n,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    n);    NodeUtil.removeChild(n,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);	  	compilable	  [FE]  RuntimeException  	107	13	add
378	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  NodeUtil.removeChild(n,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  NodeUtil.removeChild(n,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    n);    NodeUtil.removeChild(n,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);	  	compilable	  [FE]  RuntimeException  	107	13	add
379	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeTraversal.traverse(compiler,        n,        new        ScopeTicklingCallback());        NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	120	1	add
380	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        new        ScopeTicklingCallback());        NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	120	1	add
381	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeTraversal.traverse(compiler,        n,        new        ScopeTicklingCallback());        NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	120	1	add
382	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        new        ScopeTicklingCallback());        NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	120	1	add
383	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  nodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [CE]  cannot  find  symbol  nodeTraversal  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  nodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        new        ScopeTicklingCallback());        NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  nodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	120	None	add
384	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  TodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [CE]  cannot  find  symbol  TodeTraversal  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  TodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        new        ScopeTicklingCallback());        NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  TodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	  	non-compiled	[CE]  cannot  find  symbol  TodeTraversal	120	None	add
385	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);	          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    n);    	compilable	  [FE]  RuntimeException  	108	13	replace
386	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);	          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    n);    	compilable	  [FE]  RuntimeException  	108	13	replace
387	[BUG]  [BUGGY]  NodeUtil.replaceChild(parent,  n);  parent.replaceChild(n,  n);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.replaceChild(parent,  n);  parent.replaceChild(n,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.replaceChild(parent,  n);  parent.replaceChild(n,  n);	          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    n);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
388	[BUG]  [BUGGY]  NodeUtil.reportCodeChange(n,  parent);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.reportCodeChange(n,  parent);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.reportCodeChange(n,  parent);	  extractForInitializer(parent,    null,    null);    Context.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
389	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	131	13	add
390	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	131	13	add
391	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	131	13	add
392	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	131	13	add
393	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >>  Token.VAR);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >>  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >>  Token.VAR);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	131	None	add
394	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	131	13	add
395	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	131	13	add
396	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	131	13	add
397	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	131	13	add
398	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	131	13	add
399	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	131	13	add
400	[BUG]  [BUGGY]  ExtractForInitializer(t,  n,  parent,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForInitializer(t,  n,  parent,  arguments);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForInitializer(t,  n,  parent,  arguments);	  ExtractForInitializer(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  arguments	153	None	replace
401	[BUG]  [BUGGY]  ExtractForInitializer(t,  n,  parent,  argument);  [CE]  cannot  find  symbol  argument  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForInitializer(t,  n,  parent,  argument);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForInitializer(t,  n,  parent,  argument);	  ExtractForInitializer(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argument	153	None	replace
402	[BUG]  [BUGGY]  ExtractForInitializer(t,  n,  parent,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForInitializer(t,  n,  parent,  argumentCount);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForInitializer(t,  n,  parent,  argumentCount);	  ExtractForInitializer(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	153	None	replace
403	[BUG]  [BUGGY]  ExtractForInitializer(t,  n,  parent,  isConst);  [CE]  cannot  find  symbol  isConst  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForInitializer(t,  n,  parent,  isConst);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForInitializer(t,  n,  parent,  isConst);	  ExtractForInitializer(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  isConst	153	None	replace
404	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  n  =  n.getLastChild();	          n    =    n.getLastChild();    Node    n    =    n.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	147	None	replace
405	[BUG]  [BUGGY]  Node  n  =  parent.getLastChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  n  =  parent.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  n  =  parent.getLastChild();	          n    =    n.getLastChild();    Node    n    =    n.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	147	None	replace
406	[BUG]  [BUGGY]  Traverse.traverse(compiler,  n,  new  ScopeTicklingCallback());  [CE]  cannot  find  symbol  Traverse  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Traverse.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Traverse.traverse(compiler,  n,  new  ScopeTicklingCallback());	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  cannot  find  symbol  Traverse	121	None	replace
407	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()!=  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	188	1	replace
408	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	188	1	replace
409	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  >=  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	188	1	replace
410	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.NAME);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  >=  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	188	1	replace
411	[BUG]  [BUGGY]  Presconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Presconditions  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Presconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Presconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Presconditions	188	None	replace
412	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	224	13	add
413	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	224	13	add
414	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol	224	None	add
415	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	224	13	add
416	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	224	13	add
417	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);  preconditions.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	224	None	add
418	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	224	13	add
419	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	224	13	add
420	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  Context  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.checkState(n.getType()  ==  Token.VAR);	  extractForInitializer(n,    parent,    null);    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  Context	65	None	replace
421	[BUG]  [BUGGY]  Context.checkState(parent.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  Context  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.checkState(parent.getType()  ==  Token.VAR);	  extractForInitializer(n,    parent,    null);    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  Context	65	None	replace
422	[BUG]  [BUGGY]  NodeUtil.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.checkState(n.getType()  ==  Token.VAR);	  extractForInitializer(n,    parent,    null);    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
423	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  Context  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.VAR);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.checkState(n.getType()!=  Token.VAR);	  extractForInitializer(n,    parent,    null);    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  Context	65	None	replace
424	[BUG]  [BUGGY]  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,        null,        null);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  parent  =  n.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	288	None	add
425	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	extractForInitializer(parent,        null,        null);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	288	13	add
426	[BUG]  [BUGGY]  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,        null,        null);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	288	13	add
427	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	extractForInitializer(parent,        null,        null);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	288	13	add
428	[BUG]  [BUGGY]  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,        null,        null);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	288	13	add
429	[BUG]  [BUGGY]  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getFirstChild();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,        null,        null);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  parent  =  n.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	288	None	add
430	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	extractForInitializer(parent,        null,        null);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	288	13	add
431	[BUG]  [BUGGY]  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,        null,        null);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	288	13	add
432	[BUG]  [BUGGY]  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Context.reportCodeChange();  [CE]  cannot  find  symbol  Context  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Context.reportCodeChange();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,        null,        null);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Context.reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol  Context	288	None	add
433	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	180	13	replace
434	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	180	13	replace
435	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	180	13	replace
436	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	180	13	replace
437	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	180	13	replace
438	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	180	13	replace
439	[BUG]  [BUGGY]  translateNormalization(t,  n,  parent,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateNormalization(t,  n,  parent,  arguments);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateNormalization(t,  n,  parent,  arguments);	  translateNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  arguments	262	None	replace
440	[BUG]  [BUGGY]  translateNormalization(t,  n,  parent,  argument);  [CE]  cannot  find  symbol  argument  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateNormalization(t,  n,  parent,  argument);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateNormalization(t,  n,  parent,  argument);	  translateNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argument	262	None	replace
441	[BUG]  [BUGGY]  translateNormalization(t,  n,  parent,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateNormalization(t,  n,  parent,  argumentCount);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateNormalization(t,  n,  parent,  argumentCount);	  translateNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	262	None	replace
442	[BUG]  [BUGGY]  translateNormalization(t,  n,  parent,  isConst);  [CE]  cannot  find  symbol  isConst  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateNormalization(t,  n,  parent,  isConst);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateNormalization(t,  n,  parent,  isConst);	  translateNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  isConst	262	None	replace
443	[BUG]  [BUGGY]  extractForInitializer(t,  n,  parent,  arguments,  null);  [CE]  cannot  find  symbol  arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(t,  n,  parent,  arguments,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  n,  parent,  arguments,  null);	  extractForInitializer(t,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	257	None	replace
444	[BUG]  [BUGGY]  extractForInitializer(t,  n,  parent,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(t,  n,  parent,  arguments);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  n,  parent,  arguments);	  extractForInitializer(t,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	257	None	replace
445	[BUG]  [BUGGY]  ExtractForInitializer(t,  n,  parent,  arguments,  null);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForInitializer(t,  n,  parent,  arguments,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForInitializer(t,  n,  parent,  arguments,  null);	  extractForInitializer(t,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	257	None	replace
446	[BUG]  [BUGGY]  extractForInitializer(t,  n,  parent,  null,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(t,  n,  parent,  null,  arguments);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  n,  parent,  null,  arguments);	  extractForInitializer(t,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	257	None	replace
447	[BUG]  [BUGGY]  extractForInitializer(t,  n,  parent,  false);  [CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(t,  n,  parent,  false);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  n,  parent,  false);	  extractForInitializer(n,    parent,    false);    	non-compiled	[CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;	213	None	replace
448	[BUG]  [BUGGY]  ExtractForInitializer(t,  n,  parent,  false);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForInitializer(t,  n,  parent,  false);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForInitializer(t,  n,  parent,  false);	  extractForInitializer(n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol	213	None	replace
449	[BUG]  [BUGGY]  extractForInitializer(n,  parent,  true);  [CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(n,  parent,  true);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,  parent,  true);	  extractForInitializer(n,    parent,    false);    	non-compiled	[CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;	213	None	replace
450	[BUG]  [BUGGY]  translateForInitializer(t,  n,  parent,  false);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateForInitializer(t,  n,  parent,  false);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateForInitializer(t,  n,  parent,  false);	  extractForInitializer(n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol	213	None	replace
451	[BUG]  [BUGGY]  extractForInitializer(n,  parent,  false,  t);  [CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(n,  parent,  false,  t);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,  parent,  false,  t);	  extractForInitializer(n,    parent,    false);    	non-compiled	[CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;	213	None	replace
452	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	191	13	replace
453	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	191	13	replace
454	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  node  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Node  node  =  n.getFirstChild();	  Node    v    =    node.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	27	1	replace
455	[BUG]  [BUGGY]  Node  node  =  n.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  node  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  node  =  n.getFirstChild();	  Node    v    =    node.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	27	1	replace
456	[BUG]  [BUGGY]  Node  v  =  t.getFirstChild();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  t.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  t.getFirstChild();	  Node    v    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
457	[BUG]  [BUGGY]  MutableNode  parent  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNode  parent  =  n.getLastChild();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNode  parent  =  n.getLastChild();	  extractForInitializer(parent,    null,    null);    Node    parent    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
458	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	132	13	replace
459	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	132	13	replace
460	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()!=  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	132	13	replace
461	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()!=  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	132	13	replace
462	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	132	13	replace
463	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	132	13	replace
464	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  argument);  [CE]  cannot  find  symbol  argument  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  argument);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  argument);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    predicate);    	non-compiled	[CE]  cannot  find  symbol  argument	295	None	replace
465	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback,<null>)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  null);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    predicate);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback,<null>)	295	None	replace
466	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  isConst);  [CE]  cannot  find  symbol  isConst  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  isConst);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  isConst);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    predicate);    	non-compiled	[CE]  cannot  find  symbol  isConst	295	None	replace
467	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());	  	compilable	  [FE]  RuntimeException  	258	13	add
468	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());	  	compilable	  [FE]  RuntimeException  	258	13	add
469	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()!=  Token.NAME,  t.getModule());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()!=  Token.NAME,  t.getModule());	  	compilable	  [FE]  RuntimeException  	258	13	add
470	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()!=  Token.NAME,  t.getModule());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()!=  Token.NAME,  t.getModule());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()!=  Token.NAME,  t.getModule());	  	compilable	  [FE]  RuntimeException  	258	13	add
471	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  >=  Token.NAME,  t.getModule());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  >=  Token.NAME,  t.getModule());	  	compilable	  [FE]  RuntimeException  	258	13	add
472	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  >=  Token.NAME,  t.getModule());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  >=  Token.NAME,  t.getModule());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  >=  Token.NAME,  t.getModule());	  	compilable	  [FE]  RuntimeException  	258	13	add
473	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(t.getType()  ==  Token.NAME,  t.getModule());  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(t.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(t.getType()  ==  Token.NAME,  t.getModule());	  	non-compiled	[CE]  cannot  find  symbol	258	None	add
474	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  >>  Token.NAME,  t.getModule());  [CE]  no  suitable  method  found  for  checkState(int,JSModule)  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  >>  Token.NAME,  t.getModule());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  >>  Token.NAME,  t.getModule());	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int,JSModule)	258	None	add
475	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  TOken.NAME,  t.getModule());  [CE]  cannot  find  symbol  TOken  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  TOken.NAME,  t.getModule());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  ==  TOken.NAME,  t.getModule());	  	non-compiled	[CE]  cannot  find  symbol  TOken	258	None	add
476	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	134	None	add
477	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	134	None	add
478	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	134	None	add
479	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);	  	non-compiled	[CE]  ';'  expected	134	None	add
480	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	134	None	add
481	[BUG]  [BUGGY]  Node  parent  =  n.getLastChild();  extractForInitializer(parent,  null,  null);  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  parent  =  n.getLastChild();  extractForInitializer(parent,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  parent  =  n.getLastChild();  extractForInitializer(parent,  null,  null);	  extractForInitializer(parent,    null,    null);    Node    parent    =    n.getLastChild();    extractForInitializer(parent,    null,    null);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	200	None	replace
482	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild();  extractForInitializer(parent,  null,  null);  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  parent  =  n.getFirstChild();  extractForInitializer(parent,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  parent  =  n.getFirstChild();  extractForInitializer(parent,  null,  null);	  extractForInitializer(parent,    null,    null);    Node    parent    =    n.getLastChild();    extractForInitializer(parent,    null,    null);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	200	None	replace
483	[BUG]  [BUGGY]  translateForNormalization(t,  n,  parent,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateForNormalization(t,  n,  parent,  arguments);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateForNormalization(t,  n,  parent,  arguments);	  extractForNormalization(t,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	237	None	replace
484	[BUG]  [BUGGY]  performStatementForNormalization(t,  n,  parent,  null);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  performStatementForNormalization(t,  n,  parent,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	performStatementForNormalization(t,  n,  parent,  null);	  extractForNormalization(t,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol	237	None	replace
485	[BUG]  [BUGGY]  extractForNormalization(t,  n,  parent,  arguments,  null);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForNormalization(t,  n,  parent,  arguments,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForNormalization(t,  n,  parent,  arguments,  null);	  extractForNormalization(t,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	237	None	replace
486	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	43	13	replace
487	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	43	13	replace
488	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	43	13	replace
489	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	43	13	replace
490	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	43	13	replace
491	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	43	13	replace
492	[BUG]  [BUGGY]  extractForNormalization(t,  n,  parent,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForNormalization(t,  n,  parent,  argumentCount);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForNormalization(t,  n,  parent,  argumentCount);	  extractForNormalization(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	234	None	replace
493	[BUG]  [BUGGY]  extractForNormalization(t,  n,  parent,  argumentNames);  [CE]  cannot  find  symbol  argumentNames  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForNormalization(t,  n,  parent,  argumentNames);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForNormalization(t,  n,  parent,  argumentNames);	  extractForNormalization(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentNames	234	None	replace
494	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  preconditions	189	None	replace
495	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  preconditions	189	None	replace
496	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE,  arguments));  [CE]  cannot  find  symbol  INVALID_NAMES_UNIQUE  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE,  arguments));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE,  arguments));	  extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  cannot  find  symbol  INVALID_NAMES_UNIQUE	57	None	replace
497	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  NON_GLOBAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  NON_GLOBAL_NAMES_UNIQUE  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  NON_GLOBAL_NAMES_UNIQUE);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  NON_GLOBAL_NAMES_UNIQUE);	  MutableNodeTraversal.traverse(compiler,    n,    null,    parent);    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_NAMES_UNIQUE	76	None	replace
498	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                n        =        n.getLastChild();        n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	145	13	add
499	[BUG]  [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  n.getLastChild();  n  =  n.getLastChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getLastChild();        n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	145	13	add
500	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                n        =        n.getLastChild();        n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	145	13	add
501	[BUG]  [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();  n  =  n.getLastChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getLastChild();        n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	145	13	add
502	[BUG]  [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  Node  n  =  n.getLastChild();  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  Node  n  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getLastChild();        n    =    n.getLastChild();    Node  n  =  n.getLastChild();  n  =  n.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	145	None	add
503	[BUG]  [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  Node  n  =  n.getFirstChild();  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  Node  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getLastChild();        n    =    n.getLastChild();    Node  n  =  n.getFirstChild();  n  =  n.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	145	None	add
504	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  parent.getLastChild();  n  =  parent.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                n        =        n.getLastChild();        n    =    n.getLastChild();    n  =  parent.getLastChild();  n  =  parent.getLastChild();	  	compilable	  [FE]  RuntimeException  	145	13	add
505	[BUG]  [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  parent.getLastChild();  n  =  parent.getLastChild();  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  parent.getLastChild();  n  =  parent.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getLastChild();        n    =    n.getLastChild();    n  =  parent.getLastChild();  n  =  parent.getLastChild();	  	compilable	  [FE]  RuntimeException  	145	13	add
506	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	179	13	add
507	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	179	13	add
508	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	179	13	add
509	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	179	13	add
510	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	179	13	add
511	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	179	13	add
512	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	179	13	add
513	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	179	13	add
514	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  >=  Token.NAME  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	179	13	add
515	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.NAME  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  >=  Token.NAME  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	179	13	add
516	[BUG]  [BUGGY]  parent.getFirstChild().getString().endsWith( "__ "))  {  throw  new  IllegalStateException( " ");  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  parent.getFirstChild().getString().endsWith( "__ "))  {  throw  new  IllegalStateException( " ");  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	parent.getFirstChild().getString().endsWith( "__ "))  {  throw  new  IllegalStateException( " ");	          n.getFirstChild().getString().endsWith(   "__   "))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	276	None	replace
517	[BUG]  [BUGGY]  NodeUtil.getFirstChild().getString().endsWith( "__ "))  {  throw  new  IllegalStateException( " ");  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.getFirstChild().getString().endsWith( "__ "))  {  throw  new  IllegalStateException( " ");  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.getFirstChild().getString().endsWith( "__ "))  {  throw  new  IllegalStateException( " ");	          n.getFirstChild().getString().endsWith(   "__   "))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	276	None	replace
518	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	190	13	add
519	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	190	13	add
520	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	190	13	add
521	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	190	13	add
522	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	190	13	add
523	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	190	13	add
524	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	190	13	add
525	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	190	13	add
526	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	190	13	add
527	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	190	13	add
528	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	190	13	add
529	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	190	13	add
530	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(n.getType()  ==  Token.VAR);  [CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isStatementBlock(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isStatementBlock(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeUtil.isStatementBlock(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	267	None	replace
531	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  parent.getType()  ==  Token.VAR);  NodeUtil.isStatementBlock(n.getType()  ==  Token.VAR);  [CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  parent.getType()  ==  Token.VAR);  NodeUtil.isStatementBlock(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR,  parent.getType()  ==  Token.VAR);  NodeUtil.isStatementBlock(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeUtil.isStatementBlock(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	267	None	replace
532	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.isStatementBlock(n.getType()  ==  Token.VAR);  [CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.isStatementBlock(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.isStatementBlock(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeUtil.isStatementBlock(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	267	None	replace
533	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getType()  ==  Token.VAR);  NodeUtil.isStatementBlock(n.getType()  ==  Token.VAR);  [CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getType()  ==  Token.VAR);  NodeUtil.isStatementBlock(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getType()  ==  Token.VAR);  NodeUtil.isStatementBlock(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeUtil.isStatementBlock(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	267	None	replace
534	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  parent.getType()  ==  Token.FUNCTION);  NodeUtil.isStatementBlock(n.getType()  ==  Token.VAR);  [CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  parent.getType()  ==  Token.FUNCTION);  NodeUtil.isStatementBlock(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR,  parent.getType()  ==  Token.FUNCTION);  NodeUtil.isStatementBlock(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeUtil.isStatementBlock(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	267	None	replace
535	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  argumentCount);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  argumentCount);	  NodeTraversal.traverse(compiler,    n,    parent,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	1	None	replace
536	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  argumentNames);  [CE]  cannot  find  symbol  argumentNames  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  argumentNames);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  argumentNames);	  NodeTraversal.traverse(compiler,    n,    parent,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentNames	1	None	replace
537	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeUtil.removeChild(parent,        n);        Preconditions.checkState(parent.getType()    ==    Token.VAR);    NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	307	13	add
538	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        Preconditions.checkState(parent.getType()    ==    Token.VAR);    NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	307	13	add
539	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeUtil.removeChild(parent,        n);        Preconditions.checkState(parent.getType()    ==    Token.VAR);    NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	307	13	add
540	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        Preconditions.checkState(parent.getType()    ==    Token.VAR);    NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	307	13	add
541	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.removeChild(parent,  n);  preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.removeChild(parent,  n);  preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        Preconditions.checkState(parent.getType()    ==    Token.VAR);    NodeUtil.removeChild(parent,  n);  preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	307	None	add
542	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(parent)||  parent.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isVarDeclaration(parent)||  parent.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isVarDeclaration(parent)||  parent.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);	          NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.FUNCTION)    {    normalizeVarDeclarations(n);    	non-compiled	[CE]  not  a  statement	239	None	replace
543	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(parent)||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isVarDeclaration(parent)||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isVarDeclaration(parent)||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);	          NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.FUNCTION)    {    normalizeVarDeclarations(n);    	non-compiled	[CE]  not  a  statement	239	None	replace
544	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(parent)&&  parent.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isVarDeclaration(parent)&&  parent.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isVarDeclaration(parent)&&  parent.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);	          NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.FUNCTION)    {    normalizeVarDeclarations(n);    	non-compiled	[CE]  not  a  statement	239	None	replace
545	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    	compilable	  [FE]  RuntimeException  	183	13	replace
546	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.LABEL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    	compilable	  [FE]  RuntimeException  	183	13	replace
547	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    	compilable	  [FE]  RuntimeException  	183	13	replace
548	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.LABEL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    	compilable	  [FE]  RuntimeException  	183	13	replace
549	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    	compilable	  [FE]  RuntimeException  	183	13	replace
550	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.LABEL);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    	compilable	  [FE]  RuntimeException  	183	13	replace
551	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	183	1	replace
552	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.LABEL);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	183	1	replace
553	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	47	13	replace
554	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	47	13	replace
555	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDe  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDe  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDe	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
556	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDe  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDe  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDe	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
557	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
558	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	163	None	add
559	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	163	None	add
560	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	163	None	add
561	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  breakVarDeclarations(n);  }  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  breakVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  breakVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	163	None	add
562	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);	  	non-compiled	[CE]  ';'  expected	163	None	add
563	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  parent  =  n.getFirstChild();  extractForInitializer(parent,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	parent  =  n.getFirstChild();  extractForInitializer(parent,  null,  null);	  extractForInitializer(parent,    null,    null);    Node    parent    =    n.getFirstChild();    extractForInitializer(parent,    null,    null);    	compilable	  [FE]  RuntimeException  	202	9	replace
564	[BUG]  [BUGGY]  parent  =  n.getFirstChild();  extractForInitializer(parent,  null,  null);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  parent  =  n.getFirstChild();  extractForInitializer(parent,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	parent  =  n.getFirstChild();  extractForInitializer(parent,  null,  null);	  extractForInitializer(parent,    null,    null);    Node    parent    =    n.getFirstChild();    extractForInitializer(parent,    null,    null);    	compilable	  [FE]  RuntimeException  	202	9	replace
565	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(n!=  ';'  expected  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(n!=  ';'  expected  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function()  {  arguments=Array.prototype.slice.call(n!=  ';'  expected	  function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	51	None	replace
566	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(n  ==  ';'  expected  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(n  ==  ';'  expected  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function()  {  arguments=Array.prototype.slice.call(n  ==  ';'  expected	  function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	51	None	replace
567	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(n,  arguments  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(n,  arguments  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function()  {  arguments=Array.prototype.slice.call(n,  arguments	  function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	51	None	replace
568	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(n!=  ';'  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(n!=  ';'  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function()  {  arguments=Array.prototype.slice.call(n!=  ';'	  function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	51	None	replace
569	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                n        =        n.getFirstChild();        n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	30	13	add
570	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();  n  =  n.getLastChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	30	13	add
571	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  Node  n  =  n.getFirstChild();  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  Node  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    n.getLastChild();    Node  n  =  n.getFirstChild();  n  =  n.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	30	None	add
572	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                n        =        n.getFirstChild();        n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	30	13	add
573	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getLastChild();  n  =  n.getLastChild();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	30	13	add
574	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  node  =  n.getFirstChild();  n  =  n.getLastChild();  [CE]  cannot  find  symbol  node  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  node  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    n.getLastChild();    node  =  n.getFirstChild();  n  =  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol  node	30	None	add
575	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  parent.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                n        =        n.getFirstChild();        n    =    n.getLastChild();    n  =  parent.getFirstChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	30	13	add
576	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  parent.getFirstChild();  n  =  n.getLastChild();  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  parent.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    n.getLastChild();    n  =  parent.getFirstChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	30	13	add
577	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()!=  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	221	1	replace
578	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()!=  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	221	1	replace
579	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  >=  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	221	1	replace
580	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.VAR);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  >=  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	221	1	replace
581	[BUG]  [BUGGY]  Presconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  Presconditions  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Presconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Presconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  Presconditions	221	None	replace
582	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback)	126	None	replace
583	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments);  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments);  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments);  Context.checkState(n.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  arguments	126	None	replace
584	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Normalize.ScopeTicklingCallback)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Normalize.ScopeTicklingCallback)	126	None	replace
585	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	74	13	replace
586	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	74	13	replace
587	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	74	13	replace
588	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	74	13	replace
589	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()!=  Token.FUNCTION);	  Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	74	13	replace
590	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()!=  Token.FUNCTION);	  Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	74	13	replace
591	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Node  parent  =  n.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	73	None	add
592	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	73	None	add
593	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  >=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  >=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	73	13	add
594	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  >=  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  >=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  >=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	73	13	add
595	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(n.getType()  ==  Token.NAME);  [CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isStatementBlock(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isStatementBlock(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeUtil.isStatementBlock(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	290	None	replace
596	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getType()  ==  Token.NAME);  NodeUtil.isStatementBlock(n.getType()  ==  Token.NAME);  [CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getType()  ==  Token.NAME);  NodeUtil.isStatementBlock(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getType()  ==  Token.NAME);  NodeUtil.isStatementBlock(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeUtil.isStatementBlock(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	290	None	replace
597	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(parent.getType()  ==  Token.NAME);  [CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isStatementBlock(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isStatementBlock(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeUtil.isStatementBlock(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	290	None	replace
598	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getType()  ==  Token.FUNCTION);  NodeUtil.isStatementBlock(n.getType()  ==  Token.NAME);  [CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getType()  ==  Token.FUNCTION);  NodeUtil.isStatementBlock(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getType()  ==  Token.FUNCTION);  NodeUtil.isStatementBlock(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeUtil.isStatementBlock(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	290	None	replace
599	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeUtil.isStatementBlock(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	290	13	replace
600	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeUtil.isStatementBlock(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	290	13	replace
601	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    normalizeVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
602	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()  ==  Token.FUNCTION)  {	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    normalizeVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
603	[BUG]  [BUGGY]  ||  parent.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  parent.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  parent.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    normalizeVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
604	[BUG]  [BUGGY]  ||  n.getType()!=  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()!=  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()!=  Token.FUNCTION)  {  normalizeVarDeclarations(n);	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    normalizeVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
605	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(parent);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(parent);	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    normalizeVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
606	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    n    =    n.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	41	None	replace
607	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    n    =    n.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	41	None	replace
608	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    n    =    n.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	41	None	replace
609	[BUG]  [BUGGY]  conductNormalization(t,  n,  parent,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  conductNormalization(t,  n,  parent,  arguments);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	conductNormalization(t,  n,  parent,  arguments);	  conductNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  arguments	261	None	replace
610	[BUG]  [BUGGY]  conductNormalization(t,  n,  parent,  argument);  [CE]  cannot  find  symbol  argument  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  conductNormalization(t,  n,  parent,  argument);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	conductNormalization(t,  n,  parent,  argument);	  conductNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argument	261	None	replace
611	[BUG]  [BUGGY]  ConductNormalization(t,  n,  parent,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ConductNormalization(t,  n,  parent,  arguments);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ConductNormalization(t,  n,  parent,  arguments);	  conductNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  arguments	261	None	replace
612	[BUG]  [BUGGY]  conductNormalization(t,  n,  parent,  isConst);  [CE]  cannot  find  symbol  isConst  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  conductNormalization(t,  n,  parent,  isConst);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	conductNormalization(t,  n,  parent,  isConst);	  conductNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  isConst	261	None	replace
613	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  null,  parent);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  null,  parent);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  null,  parent);	  MutableNodeTraversal.traverse(compiler,    node,    null);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	192	None	replace
614	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback)	124	None	replace
615	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments);  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments);  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments);  Context.checkState(n.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  arguments	124	None	replace
616	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Normalize.ScopeTicklingCallback)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Normalize.ScopeTicklingCallback)	124	None	replace
617	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	81	None	replace
618	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	81	13	replace
619	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	81	13	replace
620	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  parent);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)	81	None	replace
621	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.NAME);	          NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	241	None	replace
622	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(parent)||  n.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isVarDeclaration(parent)||  n.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isVarDeclaration(parent)||  n.getType()  ==  Token.NAME);	          NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	241	None	replace
623	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(parent)||  parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isVarDeclaration(parent)||  parent.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isVarDeclaration(parent)||  parent.getType()  ==  Token.NAME);	          NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	241	None	replace
624	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.NAME);	          NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	241	None	replace
625	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Node    n    =    parent.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	217	None	replace
626	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Node    n    =    parent.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	217	None	replace
627	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	127	13	add
628	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	127	13	add
629	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	127	13	add
630	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	127	13	add
631	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	127	13	add
632	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	127	13	add
633	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	127	13	add
634	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	127	13	add
635	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	127	13	add
636	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	127	13	add
637	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    n.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	160	None	replace
638	[BUG]  [BUGGY]  n.getFirstChild().getString().equals( "prototype "))  {  normalizeVarDeclarations(n);  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n.getFirstChild().getString().equals( "prototype "))  {  normalizeVarDeclarations(n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n.getFirstChild().getString().equals( "prototype "))  {  normalizeVarDeclarations(n);	          n.getLastChild().getString().equals(   "prototype   "))    {    normalizeVarDeclarations(n);    	non-compiled	[CE]  	273	None	replace
639	[BUG]  [BUGGY]  parent.getLastChild().getString().equals( "prototype "))  {  normalizeVarDeclarations(n);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  parent.getLastChild().getString().equals( "prototype "))  {  normalizeVarDeclarations(n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	parent.getLastChild().getString().equals( "prototype "))  {  normalizeVarDeclarations(n);	          n.getLastChild().getString().equals(   "prototype   "))    {    normalizeVarDeclarations(n);    	non-compiled	[CE]  	273	None	replace
640	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  Context  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  Context	79	None	replace
641	[BUG]  [BUGGY]  parent.getFirstChild().getString().endsWith( "__ "))  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  parent.getFirstChild().getString().endsWith( "__ "))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	parent.getFirstChild().getString().endsWith( "__ "))  {  throw  new  IllegalArgumentException( " ");	          n.getFirstChild().getString().endsWith(   "__   "))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	274	None	replace
642	[BUG]  [BUGGY]  NodeUtil.getFirstChild().getString().endsWith( "__ "))  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.getFirstChild().getString().endsWith( "__ "))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.getFirstChild().getString().endsWith( "__ "))  {  throw  new  IllegalArgumentException( " ");	          n.getFirstChild().getString().endsWith(   "__   "))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	274	None	replace
643	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeUtil.checkState(parent.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeUtil.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeUtil.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeUtil.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	266	None	replace
644	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeUtil.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	266	None	replace
645	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.checkState(parent.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeUtil.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	266	None	replace
646	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  normalizeVarDeclarations);  [CE]  cannot  find  symbol  normalizeVarDeclarations  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  normalizeVarDeclarations);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  normalizeVarDeclarations);	  NodeTraversal.traverse(compiler,    n,    parent,    this,    argumentMap);    	non-compiled	[CE]  cannot  find  symbol  normalizeVarDeclarations	3	None	replace
647	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Context  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Context	125	None	replace
648	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback)	125	None	replace
649	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Context  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Context	125	None	replace
650	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Context  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Context	125	None	replace
651	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeTraversal.traverse(compiler,    n,    null);    NodeTraversal.traverse(compiler,  n,  null);	  	compilable	  [FE]  RuntimeException  	196	13	add
652	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  NodeTraversal.traverse(compiler,  n,  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    n,    null);    NodeTraversal.traverse(compiler,  n,  null);	  	compilable	  [FE]  RuntimeException  	196	13	add
653	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  nodeTraversal.traverse(compiler,  n,  null);  [CE]  cannot  find  symbol  nodeTraversal  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  nodeTraversal.traverse(compiler,  n,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    n,    null);    nodeTraversal.traverse(compiler,  n,  null);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	196	None	add
654	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  Preconditions.checkState(compiler.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  Preconditions.checkState(compiler.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    n,    null);    Preconditions.checkState(compiler.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol	196	None	add
655	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  Preconditions.checkState(compiler.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  Preconditions.checkState(compiler.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    n,    null);    Preconditions.checkState(compiler.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol	196	None	add
656	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  Preconditions.checkState(compiler.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  Preconditions.checkState(compiler.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    n,    null);    Preconditions.checkState(compiler.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	196	None	add
657	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  true);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  true);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  true);	  MutableNodeTraversal.traverse(compiler,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	209	None	replace
658	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  false,  null);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  false,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  false,  null);	  MutableNodeTraversal.traverse(compiler,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	209	None	replace
659	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(t,  n,  parent,  false);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(t,  n,  parent,  false);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(t,  n,  parent,  false);	  MutableNodeTraversal.traverse(compiler,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	209	None	replace
660	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  condition);  [CE]  cannot  find  symbol  condition  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  condition);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  condition);	  MutableNodeTraversal.traverse(compiler,    n,    parent,    argument);    	non-compiled	[CE]  cannot  find  symbol  condition	95	None	replace
661	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	28	13	add
662	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	28	13	add
663	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	28	13	add
664	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	28	13	add
665	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	28	13	add
666	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getLastChild();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	28	13	add
667	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  n  =  n.getFirstChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	28	None	add
668	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getNext();  n  =  n.getNext();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getNext();  n  =  n.getNext();	  	compilable	  [FE]  RuntimeException  	28	13	add
669	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getNext();  n  =  n.getNext();  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getNext();  n  =  n.getNext();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getNext();  n  =  n.getNext();	  	compilable	  [FE]  RuntimeException  	28	13	add
670	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild().getNext();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  parent  =  n.getFirstChild().getNext();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  parent  =  n.getFirstChild().getNext();	  Node    parent    =    n.getParent()    +    1;    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	38	None	replace
671	[BUG]  [BUGGY]  Node  v  =  n.removeFirstChild();  Node  v  =  n.removeFirstChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.removeFirstChild();  Node  v  =  n.removeFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.removeFirstChild();    Node  v  =  n.removeFirstChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	278	None	add
672	[BUG]  [BUGGY]  Node  v  =  n.removeFirstChild();  Node  v  =  n.removeLastChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.removeFirstChild();  Node  v  =  n.removeLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.removeFirstChild();    Node  v  =  n.removeLastChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	278	None	add
673	[BUG]  [BUGGY]  Node  v  =  n.removeFirstChild();  Node  n  =  n.removeFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.removeFirstChild();  Node  n  =  n.removeFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.removeFirstChild();    Node  n  =  n.removeFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	278	None	add
674	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.removeFirstChild();  n  =  n.removeFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Node    v    =    n.removeFirstChild();    n  =  n.removeFirstChild();	  	compilable	  [FE]  RuntimeException  	278	13	add
675	[BUG]  [BUGGY]  Node  v  =  n.removeFirstChild();  n  =  n.removeFirstChild();  [FE]  RuntimeException  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.removeFirstChild();  n  =  n.removeFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.removeFirstChild();    n  =  n.removeFirstChild();	  	compilable	  [FE]  RuntimeException  	278	13	add
676	[BUG]  [BUGGY]  Node  v  =  n.removeFirstChild();  Node  v  =  n.removeFirstChild());  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.removeFirstChild();  Node  v  =  n.removeFirstChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.removeFirstChild();    Node  v  =  n.removeFirstChild());	  	non-compiled	[CE]  ';'  expected	278	None	add
677	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()!=    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	42	13	add
678	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()!=    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	42	13	add
679	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()!=    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	42	13	add
680	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()!=    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	42	13	add
681	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()!=    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	42	13	add
682	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()!=    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	42	13	add
683	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  >>  Token.FUNCTION);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  >>  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()!=    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  >>  Token.FUNCTION);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	42	None	add
684	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()!=    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	42	13	add
685	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()!=    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	42	13	add
686	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()!=    Token.FUNCTION);    Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	42	13	add
687	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()!=    Token.FUNCTION);    Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	42	13	add
688	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	211	13	replace
689	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	211	13	replace
690	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	211	13	replace
691	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	211	13	replace
692	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	211	13	replace
693	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	211	13	replace
694	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	211	1	replace
695	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.CALL);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	211	1	replace
696	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	186	13	replace
697	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	186	13	replace
698	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	182	13	add
699	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	182	13	add
700	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	182	13	add
701	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	182	13	add
702	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	182	13	add
703	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.LABEL);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	182	13	add
704	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  Preconditions.checkState(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    Preconditions.checkState(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	182	13	add
705	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  Preconditions.checkState(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  Preconditions.checkState(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    Preconditions.checkState(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	182	13	add
706	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >=  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >=  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	182	13	add
707	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >=  Token.LABEL);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >=  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >=  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	182	13	add
708	[BUG]  [BUGGY]  NodeUtil.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    NodeUtil.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	300	None	replace
709	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    NodeUtil.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	300	None	replace
710	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    NodeUtil.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	300	None	replace
711	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    NodeUtil.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	300	None	replace
712	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  parent);  [CE]  cannot  find  symbol  Context  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.traverse(compiler,  n,  parent);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.traverse(compiler,  n,  parent);	  Context.traverse(compiler,    n,    null);    	non-compiled	[CE]  cannot  find  symbol  Context	77	None	replace
713	[BUG]  [BUGGY]  Context.traverse(compiler,  parent,  null);  [CE]  cannot  find  symbol  Context  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.traverse(compiler,  parent,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.traverse(compiler,  parent,  null);	  Context.traverse(compiler,    n,    null);    	non-compiled	[CE]  cannot  find  symbol  Context	77	None	replace
714	[BUG]  [BUGGY]  Context.traverse(t,  n,  null);  [CE]  cannot  find  symbol  Context  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.traverse(t,  n,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.traverse(t,  n,  null);	  Context.traverse(compiler,    n,    null);    	non-compiled	[CE]  cannot  find  symbol  Context	77	None	replace
715	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  null,  parent);  [CE]  cannot  find  symbol  Context  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.traverse(compiler,  n,  null,  parent);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.traverse(compiler,  n,  null,  parent);	  Context.traverse(compiler,    n,    null);    	non-compiled	[CE]  cannot  find  symbol  Context	77	None	replace
716	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();	  extractForInitializer(parent,    null,    null);    Node    parent    =    n.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	55	None	replace
717	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getParent();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getParent();	  extractForInitializer(parent,    null,    null);    Node    parent    =    n.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	55	None	replace
718	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  parent  =  n.getParent();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  parent  =  n.getParent();	  extractForInitializer(parent,    null,    null);    Node    parent    =    n.getParent();    	compilable	  [FE]  RuntimeException  	55	13	replace
719	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  parent  =  n.getParent();  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  parent  =  n.getParent();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  parent  =  n.getParent();	  extractForInitializer(parent,    null,    null);    Node    parent    =    n.getParent();    	compilable	  [FE]  RuntimeException  	55	13	replace
720	[BUG]  [BUGGY]  translateForNormalization(t,  n,  parent,  false);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateForNormalization(t,  n,  parent,  false);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateForNormalization(t,  n,  parent,  false);	  extractForNormalization(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol	236	None	replace
721	[BUG]  [BUGGY]  translateForNormalization(t,  n,  parent,  true);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateForNormalization(t,  n,  parent,  true);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateForNormalization(t,  n,  parent,  true);	  extractForNormalization(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol	236	None	replace
722	[BUG]  [BUGGY]  extractForNormalization(t,  n,  parent,  true);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForNormalization(t,  n,  parent,  true);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForNormalization(t,  n,  parent,  true);	  extractForNormalization(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol	236	None	replace
723	[BUG]  [BUGGY]  performStatementForNormalization(t,  n,  parent,  false);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  performStatementForNormalization(t,  n,  parent,  false);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	performStatementForNormalization(t,  n,  parent,  false);	  extractForNormalization(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol	236	None	replace
724	[BUG]  [BUGGY]  MutationUtil.extractForNormalization(t,  n,  parent,  false);  [CE]  cannot  find  symbol  MutationUtil  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutationUtil.extractForNormalization(t,  n,  parent,  false);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutationUtil.extractForNormalization(t,  n,  parent,  false);	  extractForNormalization(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol  MutationUtil	236	None	replace
725	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback)	123	None	replace
726	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments);  Context.checkState(n.getType()  ==  Token.FUNCTION);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  arguments	123	None	replace
727	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Normalize.ScopeTicklingCallback)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Normalize.ScopeTicklingCallback)	123	None	replace
728	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	169	13	add
729	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	169	13	add
730	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	169	13	add
731	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	169	13	add
732	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	169	13	add
733	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	169	13	add
734	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	169	13	add
735	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	169	13	add
736	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  >=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	169	13	add
737	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  >=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	169	13	add
738	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  parent,  arguments,  null);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  parent,  arguments,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  parent,  arguments,  null);	  MutableNodeTraversal.traverse(compiler,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	75	None	replace
739	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(t,  n,  parent,  null);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(t,  n,  parent,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(t,  n,  parent,  null);	  MutableNodeTraversal.traverse(compiler,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	75	None	replace
740	[BUG]  [BUGGY]  parent.getLastChild().getString().endsWith( "__ "))  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  parent.getLastChild().getString().endsWith( "__ "))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	parent.getLastChild().getString().endsWith( "__ "))  {  throw  new  IllegalArgumentException( " ");	          n.getLastChild().getString().endsWith(   "__   "))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	271	None	replace
741	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	85	13	add
742	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	85	13	add
743	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	85	None	add
744	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	85	13	add
745	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	85	13	add
746	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);  preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	85	None	add
747	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	85	13	add
748	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	85	13	add
749	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  Context  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  cannot  find  symbol  Context	281	None	replace
750	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  Traversal  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Traversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Traversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  cannot  find  symbol  Traversal	281	None	replace
751	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	223	13	replace
752	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	223	13	replace
753	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  this,  null);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  this,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  this,  null);	  MutableNodeTraversal.traverse(compiler,    n,    this,    null);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	294	None	replace
754	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  arguments,  null);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  arguments,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  this,  arguments,  null);	  MutableNodeTraversal.traverse(compiler,    n,    this,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	294	None	replace
755	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  expression	250	None	replace
756	[BUG]  [BUGGY]  ||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  expression	250	None	replace
757	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(parent);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(parent);	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  expression	250	None	replace
758	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  breakVarDeclarations(n);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  breakVarDeclarations(n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()  ==  Token.FUNCTION)  {  breakVarDeclarations(n);	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  expression	250	None	replace
759	[BUG]  [BUGGY]  ||  n.getType()!=  Token.FUNCTION)  {  splitVarDeclarations(n);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()!=  Token.FUNCTION)  {  splitVarDeclarations(n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()!=  Token.FUNCTION)  {  splitVarDeclarations(n);	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  expression	250	None	replace
760	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Node    n    =    n.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	133	None	replace
761	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  preconditions	233	None	replace
762	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  preconditions	233	None	replace
763	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	233	13	replace
764	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	233	13	replace
765	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  null);  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  null);  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  null);  Context.checkState(n.getType()  ==  Token.NAME);	  extractForInitializer(n,    parent,    null);    Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	62	None	replace
766	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(n.getType()  ==  Token.NAME);	  extractForInitializer(n,    parent,    null);    Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	62	None	replace
767	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  null);  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  null);  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  null);  Context.checkState(n.getType()  ==  Token.NAME);	  extractForInitializer(n,    parent,    null);    Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	62	None	replace
768	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  arguments);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  arguments);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    t);    	non-compiled	[CE]  cannot  find  symbol  arguments	116	None	replace
769	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  argument);  [CE]  cannot  find  symbol  argument  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  argument);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  argument);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    t);    	non-compiled	[CE]  cannot  find  symbol  argument	116	None	replace
770	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  isConst);  [CE]  cannot  find  symbol  isConst  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  isConst);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  isConst);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    t);    	non-compiled	[CE]  cannot  find  symbol  isConst	116	None	replace
771	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  context);  [CE]  cannot  find  symbol  context  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  context);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  context);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    t);    	non-compiled	[CE]  cannot  find  symbol  context	116	None	replace
772	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  state);  [CE]  cannot  find  symbol  state  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  state);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  state);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    t);    	non-compiled	[CE]  cannot  find  symbol  state	116	None	replace
773	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	170	13	replace
774	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	170	13	replace
775	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	170	13	replace
776	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	170	13	replace
777	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	170	13	replace
778	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	170	13	replace
779	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [CE]  cannot  find  symbol  Context  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.FUNCTION);    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  cannot  find  symbol  Context	280	None	replace
780	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  Context  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.FUNCTION);    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  cannot  find  symbol  Context	280	None	replace
781	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	44	13	add
782	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	44	13	add
783	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations	  	non-compiled	[CE]  ';'  expected	44	None	add
784	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe	  	non-compiled	[CE]  ';'  expected	44	None	add
785	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	44	13	add
786	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	44	13	add
787	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(  [CE]  ')'  expected  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(	  	non-compiled	[CE]  ')'  expected	44	None	add
788	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getLastChild();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getLastChild();	  extractForInitializer(n,    parent,    null);    Node    parent    =    n.getLastChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	63	None	replace
789	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getLastChild();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  n.getLastChild();	  extractForInitializer(n,    parent,    null);    Node    parent    =    n.getLastChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	63	None	replace
790	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getLastChild();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getLastChild();	  extractForInitializer(n,    parent,    null);    Node    parent    =    n.getLastChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	63	None	replace
791	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  arguments=Array.prototype.slice.call(arguments  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()  ==  Token.FUNCTION)  {  arguments=Array.prototype.slice.call(arguments	  ||    n.getType()    ==    Token.VAR)    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
792	[BUG]  [BUGGY]  ||  n.getType()!=  Token.VAR)  {  arguments=Array.prototype.slice.call(arguments  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()!=  Token.VAR)  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()!=  Token.VAR)  {  arguments=Array.prototype.slice.call(arguments	  ||    n.getType()    ==    Token.VAR)    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
793	[BUG]  [BUGGY]  ||  parent.getType()  ==  Token.VAR)  {  arguments=Array.prototype.slice.call(arguments  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  parent.getType()  ==  Token.VAR)  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  parent.getType()  ==  Token.VAR)  {  arguments=Array.prototype.slice.call(arguments	  ||    n.getType()    ==    Token.VAR)    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
794	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.NAME)  {  arguments=Array.prototype.slice.call(arguments  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()  ==  Token.NAME)  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()  ==  Token.NAME)  {  arguments=Array.prototype.slice.call(arguments	  ||    n.getType()    ==    Token.VAR)    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
795	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	168	13	replace
796	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	168	13	replace
797	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()!=  Token.VAR);	  Preconditions.checkState(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	168	13	replace
798	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()!=  Token.VAR);	  Preconditions.checkState(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	168	13	replace
799	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
800	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FU  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FU  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FU	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  ')'  expected	45	None	replace
801	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
802	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  DEFAULT_NON_GLOBAL_NAMES_UNIQUE));  [CE]  cannot  find  symbol  DEFAULT_NON_GLOBAL_NAMES_UNIQUE  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  DEFAULT_NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  DEFAULT_NON_GLOBAL_NAMES_UNIQUE));	  extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NON_GLOBAL_NAMES_UNIQUE	56	None	replace
803	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE));  [CE]  cannot  find  symbol  INVALID_NAMES_UNIQUE  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE));	  extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  cannot  find  symbol  INVALID_NAMES_UNIQUE	56	None	replace
804	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  STRICT_MODULE_NAMES_UNIQUE));  [CE]  cannot  find  symbol  STRICT_MODULE_NAMES_UNIQUE  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  STRICT_MODULE_NAMES_UNIQUE));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  STRICT_MODULE_NAMES_UNIQUE));	  extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  cannot  find  symbol  STRICT_MODULE_NAMES_UNIQUE	56	None	replace
805	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  parent,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  parent,  arguments);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  this,  parent,  arguments);	  MutableNodeTraversal.traverse(compiler,    n,    this,    parent);    	non-compiled	[CE]  cannot  find  symbol  arguments	137	None	replace
806	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  normalizeVarDeclarations);  [CE]  cannot  find  symbol  normalizeVarDeclarations  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  normalizeVarDeclarations);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  this,  normalizeVarDeclarations);	  MutableNodeTraversal.traverse(compiler,    n,    this,    parent);    	non-compiled	[CE]  cannot  find  symbol  normalizeVarDeclarations	137	None	replace
807	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Compiler  compiler  =  t.getCompiler();  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Compiler  compiler  =  t.getCompiler();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Compiler  compiler  =  t.getCompiler();	          NodeTraversal.traverse(compiler,    n,    this);    Compiler    compiler    =    t.getCompiler();    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	84	None	replace
808	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  compiler  =  t.getCompiler();  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  compiler  =  t.getCompiler();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  compiler  =  t.getCompiler();	          NodeTraversal.traverse(compiler,    n,    this);    Compiler    compiler    =    t.getCompiler();    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	84	None	replace
809	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Compiler  compiler  =  t.getCompiler();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Compiler  compiler  =  t.getCompiler();	          NodeTraversal.traverse(compiler,    n,    this);    Compiler    compiler    =    t.getCompiler();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	84	1	replace
810	[BUG]  [BUGGY]  Compiler  compiler  =  t.getCompiler();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Compiler  compiler  =  t.getCompiler();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Compiler  compiler  =  t.getCompiler();	          NodeTraversal.traverse(compiler,    n,    this);    Compiler    compiler    =    t.getCompiler();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	84	1	replace
811	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Compiler  compiler  =  t.getCompiler();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeTraversal.traverse(compiler,  parent,  this);  Compiler  compiler  =  t.getCompiler();	          NodeTraversal.traverse(compiler,    n,    this);    Compiler    compiler    =    t.getCompiler();    	compilable	  [FE]  RuntimeException  	84	13	replace
812	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Compiler  compiler  =  t.getCompiler();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Compiler  compiler  =  t.getCompiler();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  parent,  this);  Compiler  compiler  =  t.getCompiler();	          NodeTraversal.traverse(compiler,    n,    this);    Compiler    compiler    =    t.getCompiler();    	compilable	  [FE]  RuntimeException  	84	13	replace
813	[BUG]  [BUGGY]  FunctionNode  v  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  FunctionNode  v  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	FunctionNode  v  =  n.getFirstChild();	          Node    v    =    n.getFirstChild();    FunctionNode    v    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
814	[BUG]  [BUGGY]  Node  v  =  parent.getFirstChild();  FunctionNode  v  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  parent.getFirstChild();  FunctionNode  v  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  parent.getFirstChild();  FunctionNode  v  =  n.getFirstChild();	          Node    v    =    n.getFirstChild();    FunctionNode    v    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
815	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	187	13	add
816	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	187	13	add
817	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	187	13	add
818	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	187	13	add
819	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.	  	non-compiled	[CE]  ')'  expected	187	None	add
820	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	187	13	add
821	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	187	13	add
822	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	187	13	add
823	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	187	13	add
824	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	187	13	add
825	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	187	13	add
826	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	218	13	add
827	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	218	13	add
828	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	218	13	add
829	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	218	13	add
830	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	218	13	add
831	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	218	13	add
832	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(  [CE]  ')'  expected  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(	  	non-compiled	[CE]  ')'  expected	218	None	add
833	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	218	13	add
834	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	218	13	add
835	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	218	13	add
836	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	218	13	add
837	[BUG]  [BUGGY]  ExtractForInitializer(t,  parent,  n);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForInitializer(t,  parent,  n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForInitializer(t,  parent,  n);	  extractForInitializer(n,    parent,    t);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
838	[BUG]  [BUGGY]  extractForInitializer(n,  parent,  t,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(n,  parent,  t,  arguments);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,  parent,  t,  arguments);	  extractForInitializer(n,    parent,    t);    	non-compiled	[CE]  cannot  find  symbol  arguments	67	None	replace
839	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  nodeUtil.removeChild(parent,  n);  [CE]  cannot  find  symbol  nodeUtil  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n);  nodeUtil.removeChild(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n);  nodeUtil.removeChild(parent,  n);	          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  cannot  find  symbol  nodeUtil	106	None	replace
840	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n  +  1);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n  +  1);	          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	106	None	replace
841	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  arguments,  null);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  arguments,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  arguments,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    this,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	297	None	replace
842	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  argumentMap,  null);  [CE]  cannot  find  symbol  argumentMap  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  argumentMap,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  argumentMap,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    this,    null);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	297	None	replace
843	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  constantMap,  null);  [CE]  cannot  find  symbol  constantMap  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  constantMap,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  constantMap,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    this,    null);    	non-compiled	[CE]  cannot  find  symbol  constantMap	297	None	replace
844	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  parent.getFirstChild();  n  =  n.getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                n        =        n.getFirstChild();        n    =    parent.getFirstChild();    n  =  n.getFirstChild();  n  =  parent.getFirstChild();	  	compilable	  [FE]  RuntimeException  	263	13	add
845	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  parent.getFirstChild();  n  =  n.getFirstChild();  n  =  parent.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  parent.getFirstChild();  n  =  n.getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    parent.getFirstChild();    n  =  n.getFirstChild();  n  =  parent.getFirstChild();	  	compilable	  [FE]  RuntimeException  	263	13	add
846	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  parent.getFirstChild();  n  =  n.getLastChild();  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                n        =        n.getFirstChild();        n    =    parent.getFirstChild();    n  =  n.getLastChild();  n  =  parent.getFirstChild();	  	compilable	  [FE]  RuntimeException  	263	13	add
847	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  parent.getFirstChild();  n  =  n.getLastChild();  n  =  parent.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  parent.getFirstChild();  n  =  n.getLastChild();  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    parent.getFirstChild();    n  =  n.getLastChild();  n  =  parent.getFirstChild();	  	compilable	  [FE]  RuntimeException  	263	13	add
848	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  parent.getFirstChild();  Node  n  =  n.getFirstChild();  n  =  parent.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  parent.getFirstChild();  Node  n  =  n.getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    parent.getFirstChild();    Node  n  =  n.getFirstChild();  n  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	263	None	add
849	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  parent.getFirstChild();  n  =  n.getFirstChild();  n  =  parent.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                n        =        n.getFirstChild();        n    =    parent.getFirstChild();    n  =  n.getFirstChild();  n  =  parent.getLastChild();	  	compilable	  [FE]  RuntimeException  	263	13	add
850	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  parent.getFirstChild();  n  =  n.getFirstChild();  n  =  parent.getLastChild();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  parent.getFirstChild();  n  =  n.getFirstChild();  n  =  parent.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    parent.getFirstChild();    n  =  n.getFirstChild();  n  =  parent.getLastChild();	  	compilable	  [FE]  RuntimeException  	263	13	add
851	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  parent.getFirstChild();  node  =  n.getFirstChild();  n  =  parent.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  parent.getFirstChild();  node  =  n.getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    parent.getFirstChild();    node  =  n.getFirstChild();  n  =  parent.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  node	263	None	add
852	[BUG]  [BUGGY]  Context.checkNotNull(n);  [CE]  cannot  find  symbol  Context  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.checkNotNull(n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.checkNotNull(n);	  extractForInitializer(n,    parent,    null);    Context.checkNotNull(parent);    	non-compiled	[CE]  cannot  find  symbol  Context	243	None	replace
853	[BUG]  [BUGGY]  Context.checkNotNull(parent);  [CE]  cannot  find  symbol  Context  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.checkNotNull(parent);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.checkNotNull(parent);	  extractForInitializer(n,    parent,    null);    Context.checkNotNull(parent);    	non-compiled	[CE]  cannot  find  symbol  Context	243	None	replace
854	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  null);  Context.checkNotNull(parent);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  null);  Context.checkNotNull(parent);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  null);  Context.checkNotNull(parent);	  extractForInitializer(n,    parent,    null);    Context.checkNotNull(parent);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	243	None	replace
855	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent);  Context.checkNotNull(arguments);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent);  Context.checkNotNull(arguments);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent);  Context.checkNotNull(arguments);	  extractForInitializer(n,    parent,    null);    Context.checkNotNull(parent);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	243	None	replace
856	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent);  Context.checkNotNull(parent);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent);  Context.checkNotNull(parent);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent);  Context.checkNotNull(parent);	  extractForInitializer(n,    parent,    null);    Context.checkNotNull(parent);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	243	None	replace
857	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	n    =    parent.getFirstChild();    n  =  parent.getFirstChild();	  	compilable	  [FE]  RuntimeException  	100	13	add
858	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n    =    parent.getFirstChild();    n  =  parent.getFirstChild();	  	compilable	  [FE]  RuntimeException  	100	13	add
859	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	n    =    parent.getFirstChild();    n  =  parent.getLastChild();	  	compilable	  [FE]  RuntimeException  	100	13	add
860	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getLastChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n    =    parent.getFirstChild();    n  =  parent.getLastChild();	  	compilable	  [FE]  RuntimeException  	100	13	add
861	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  Node  n  =  parent.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getFirstChild();  Node  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n    =    parent.getFirstChild();    Node  n  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	100	None	add
862	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  Node  parent  =  n.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getFirstChild();  Node  parent  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n    =    parent.getFirstChild();    Node  parent  =  n.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	100	None	add
863	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n    =    parent.getFirstChild();    Node  parent  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	100	None	add
864	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  no  =  parent.getFirstChild();  [CE]  cannot  find  symbol  no  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getFirstChild();  no  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n    =    parent.getFirstChild();    no  =  parent.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  no	100	None	add
865	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getFirstChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    	compilable	  [FE]  RuntimeException  	247	13	replace
866	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getFirstChild());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getFirstChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    	compilable	  [FE]  RuntimeException  	247	13	replace
867	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    	compilable	  [FE]  RuntimeException  	247	13	replace
868	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    	compilable	  [FE]  RuntimeException  	247	13	replace
869	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeTraversal.traverse(compiler,        n,        new        ScopeTicklingCallback());        t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	282	1	add
870	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        new        ScopeTicklingCallback());        t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	282	1	add
871	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeTraversal.traverse(compiler,        n,        new        ScopeTicklingCallback());        t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	282	1	add
872	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        new        ScopeTicklingCallback());        t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	282	1	add
873	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeTraversal.traverse(compiler,        n,        new        ScopeTicklingCallback());        t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	282	1	add
874	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        new        ScopeTicklingCallback());        t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	282	1	add
875	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  parent.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  parent.getCompiler().reportCodeChange();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        new        ScopeTicklingCallback());        t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  parent.getCompiler().reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol	282	None	add
876	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  compiler.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  compiler.getCompiler().reportCodeChange();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        new        ScopeTicklingCallback());        t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  compiler.getCompiler().reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol	282	None	add
877	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  n.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  n.getCompiler().reportCodeChange();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        new        ScopeTicklingCallback());        t.getCompiler().reportCodeChange();    n.getCompiler().reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol	282	None	add
878	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  parent);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  parent);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  parent);	  MutableNodeTraversal.traverse(compiler,    n);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	284	None	replace
879	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parents);  [CE]  cannot  find  symbol  parents  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parents);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parents);	  MutableNodeTraversal.traverse(compiler,    n);    	non-compiled	[CE]  cannot  find  symbol  parents	284	None	replace
880	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	231	13	add
881	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	231	13	add
882	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	231	13	add
883	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	231	13	add
884	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	231	13	add
885	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	231	13	add
886	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	231	13	add
887	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	231	13	add
888	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	231	13	add
889	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	231	13	add
890	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  >=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	231	13	add
891	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  >=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	231	13	add
892	[BUG]  [BUGGY]  translateForInitializer(t,  n,  parent,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateForInitializer(t,  n,  parent,  arguments);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateForInitializer(t,  n,  parent,  arguments);	  translateForInitializer(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  arguments	155	None	replace
893	[BUG]  [BUGGY]  translateForInitializer(t,  n,  parent,  argument);  [CE]  cannot  find  symbol  argument  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateForInitializer(t,  n,  parent,  argument);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateForInitializer(t,  n,  parent,  argument);	  translateForInitializer(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argument	155	None	replace
894	[BUG]  [BUGGY]  translateForInitializer(t,  n,  parent,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateForInitializer(t,  n,  parent,  argumentCount);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateForInitializer(t,  n,  parent,  argumentCount);	  translateForInitializer(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	155	None	replace
895	[BUG]  [BUGGY]  translateForInitializer(t,  n,  parent,  argumentType);  [CE]  cannot  find  symbol  argumentType  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateForInitializer(t,  n,  parent,  argumentType);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateForInitializer(t,  n,  parent,  argumentType);	  translateForInitializer(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argumentType	155	None	replace
896	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeUtil.removeChild(parent,  n);  Preconditions.checkState(n.getType()  ==  Token.NAME);	          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	206	13	replace
897	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n);  Preconditions.checkState(n.getType()  ==  Token.NAME);	          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	206	13	replace
898	[BUG]  [BUGGY]  NodeUtil.removeChild(parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);	          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	206	None	replace
899	[BUG]  [BUGGY]  Node  v  =  n.getNext();  Node  v  =  n.getNext();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getNext();  Node  v  =  n.getNext();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.getNext();    Node  v  =  n.getNext();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	25	None	add
900	[BUG]  [BUGGY]  Node  v  =  n.getNext();  Node  n  =  n.getNext();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getNext();  Node  n  =  n.getNext();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.getNext();    Node  n  =  n.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	25	None	add
901	[BUG]  [BUGGY]  Node  v  =  n.getNext();  FunctionNode  v  =  n.getNext();  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getNext();  FunctionNode  v  =  n.getNext();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.getNext();    FunctionNode  v  =  n.getNext();	  	non-compiled	[CE]  cannot  find  symbol	25	None	add
902	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getNext();  n  =  n.getNext();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Node    v    =    n.getNext();    n  =  n.getNext();	  	compilable	  [FE]  RuntimeException  	25	13	add
903	[BUG]  [BUGGY]  Node  v  =  n.getNext();  n  =  n.getNext();  [FE]  RuntimeException  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getNext();  n  =  n.getNext();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.getNext();    n  =  n.getNext();	  	compilable	  [FE]  RuntimeException  	25	13	add
904	[BUG]  [BUGGY]  Node  v  =  n.getNext();  Function  v  =  n.getNext();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getNext();  Function  v  =  n.getNext();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.getNext();    Function  v  =  n.getNext();	  	non-compiled	[CE]  cannot  find  symbol	25	None	add
905	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  arguments);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  arguments);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	255	None	replace
906	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.ScopeTicklingCallback,Normalize,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  parent);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.ScopeTicklingCallback,Normalize,Node)	255	None	replace
907	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  parent,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.ScopeTicklingCallback,Node,Normalize)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  parent,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  parent,  this);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.ScopeTicklingCallback,Node,Normalize)	255	None	replace
908	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Normalize.ScopeTicklingCallback)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Normalize.ScopeTicklingCallback)	255	None	replace
909	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  true);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback,boolean)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  true);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  true);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback,boolean)	229	None	replace
910	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false,  arguments);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false,  arguments);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	229	None	replace
911	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  null,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback,<null>,boolean)  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  null,  false);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  null,  false);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback,<null>,boolean)	229	None	replace
912	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback,boolean,<null>)  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback,boolean,<null>)	229	None	replace
913	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false,  isConst);  [CE]  cannot  find  symbol  isConst  [FE]                                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false,  isConst);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false,  isConst);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    false);    	non-compiled	[CE]  cannot  find  symbol  isConst	229	None	replace
914	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  not  a  statement	130	None	replace
915	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  not  a  statement	130	None	replace
916	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	130	13	replace
917	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	130	13	replace
918	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  not  a  statement	130	None	replace
919	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	70	13	replace
920	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	70	13	replace
921	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	70	13	replace
922	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	70	13	replace
923	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	70	1	replace
924	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	70	1	replace
925	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n.getLastChild());  NodeUtil.removeChild(parent,  n.getLastChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeUtil.removeChild(parent,    n.getLastChild());    NodeUtil.removeChild(parent,  n.getLastChild());	  	compilable	  [FE]  RuntimeException  	14	13	add
926	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n.getLastChild());  NodeUtil.removeChild(parent,  n.getLastChild());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n.getLastChild());  NodeUtil.removeChild(parent,  n.getLastChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,    n.getLastChild());    NodeUtil.removeChild(parent,  n.getLastChild());	  	compilable	  [FE]  RuntimeException  	14	13	add
927	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n.getLastChild());  NodeUtil.removeChild(parent,  n.getFirstChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeUtil.removeChild(parent,    n.getLastChild());    NodeUtil.removeChild(parent,  n.getFirstChild());	  	compilable	  [FE]  RuntimeException  	14	13	add
928	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n.getLastChild());  NodeUtil.removeChild(parent,  n.getFirstChild());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n.getLastChild());  NodeUtil.removeChild(parent,  n.getFirstChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,    n.getLastChild());    NodeUtil.removeChild(parent,  n.getFirstChild());	  	compilable	  [FE]  RuntimeException  	14	13	add
929	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n.getLastChild());  NodeUtil.removeChild(parent,  n.get  lastChild());  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n.getLastChild());  NodeUtil.removeChild(parent,  n.get  lastChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,    n.getLastChild());    NodeUtil.removeChild(parent,  n.get  lastChild());	  	non-compiled	[CE]  ')'  expected	14	None	add
930	[BUG]  [BUGGY]  Node  v  =  n.getFirstChild();  Node  n  =  parent.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getFirstChild();  Node  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  n.getFirstChild();  Node  n  =  parent.getFirstChild();	          Node    v    =    n.getFirstChild();    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	90	None	replace
931	[BUG]  [BUGGY]  Node  v  =  parent.getFirstChild();  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  parent.getFirstChild();  Node  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  parent.getFirstChild();  Node  n  =  n.getFirstChild();	          Node    v    =    n.getFirstChild();    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	90	None	replace
932	[BUG]  [BUGGY]  Node  v  =  n.getLastChild();  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getLastChild();  Node  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  n.getLastChild();  Node  n  =  n.getFirstChild();	          Node    v    =    n.getFirstChild();    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	90	None	replace
933	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent  +  1);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(n,  parent  +  1);	  NodeUtil.removeChild(parent,    n    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	13	None	replace
934	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n  +  1,  parent);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n  +  1,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n  +  1,  parent);	  NodeUtil.removeChild(parent,    n    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	13	None	replace
935	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n  +  1,  n.getType());  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n  +  1,  n.getType());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n  +  1,  n.getType());	  NodeUtil.removeChild(parent,    n    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	13	None	replace
936	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n,  parent  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n,  parent  +  1);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n,  parent  +  1);	  NodeUtil.removeChild(parent,    n    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	13	None	replace
937	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	n  =  parent.getFirstChild();  n  =  n.getFirstChild();	          n    =    n.getFirstChild();    n    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	265	13	replace
938	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  parent.getFirstChild();  n  =  n.getFirstChild();	          n    =    n.getFirstChild();    n    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	265	13	replace
939	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  n.getLastChild();  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	n  =  n.getLastChild();  n  =  parent.getFirstChild();	          n    =    n.getFirstChild();    n    =    parent.getFirstChild();    	compilable	  [FE]  RuntimeException  	264	13	replace
940	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  parent.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  n.getLastChild();  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  n.getLastChild();  n  =  parent.getFirstChild();	          n    =    n.getFirstChild();    n    =    parent.getFirstChild();    	compilable	  [FE]  RuntimeException  	264	13	replace
941	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  n.getFirstChild();  n  =  parent.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	n  =  n.getFirstChild();  n  =  parent.getLastChild();	          n    =    n.getFirstChild();    n    =    parent.getFirstChild();    	compilable	  [FE]  RuntimeException  	264	13	replace
942	[BUG]  [BUGGY]  n  =  n.getFirstChild();  n  =  parent.getLastChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  n.getFirstChild();  n  =  parent.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  n.getFirstChild();  n  =  parent.getLastChild();	          n    =    n.getFirstChild();    n    =    parent.getFirstChild();    	compilable	  [FE]  RuntimeException  	264	13	replace
943	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getParent();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  n.getParent();	  extractForInitializer(n,    parent,    null);    Node    parent    =    n.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	64	None	replace
944	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.LABEL);  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.LABEL);  Node  parent  =  n.getParent();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.LABEL);  Node  parent  =  n.getParent();	  extractForInitializer(n,    parent,    null);    Node    parent    =    n.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	64	None	replace
945	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	298	13	add
946	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	298	13	add
947	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	298	13	add
948	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	298	13	add
949	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	298	13	add
950	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.BLOCK);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	298	13	add
951	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  >=  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  >=  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	298	13	add
952	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  >=  Token.BLOCK);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  >=  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  >=  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	298	13	add
953	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	298	13	add
954	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	298	13	add
955	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeUtil.removeChild(parent,  n);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	308	13	replace
956	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	308	13	replace
957	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeUtil.removeChild(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	308	13	replace
958	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	308	13	replace
959	[BUG]  [BUGGY]  NodeUtil.removeChild(parent);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	308	None	replace
960	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [CE]  cannot  find  symbol  Traversal  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Traversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Traversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  cannot  find  symbol  Traversal	244	None	replace
961	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	46	13	add
962	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	46	13	add
963	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations	  	non-compiled	[CE]  ';'  expected	46	None	add
964	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDe  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDe  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDe	  	non-compiled	[CE]  ';'  expected	46	None	add
965	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	46	13	add
966	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	46	13	add
967	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations	  	non-compiled	[CE]  ';'  expected	46	None	add
968	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	46	13	add
969	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	46	13	add
970	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(n.getType()  ==  Token.FUNCTION);	  extractForInitializer(parent,    null,    null);    Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	286	None	replace
971	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  null);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  null);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  null);  Context.checkState(n.getType()  ==  Token.FUNCTION);	  extractForInitializer(parent,    null,    null);    Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	286	None	replace
972	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  parent));  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean,Node)  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  parent));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  parent));	  extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean,Node)	59	None	replace
973	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  name));  [CE]  cannot  find  symbol  name  [FE]                    RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  name));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  name));	  extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  cannot  find  symbol  name	59	None	replace
974	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  value));  [CE]  cannot  find  symbol  value  [FE]                      RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  value));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  value));	  extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  cannot  find  symbol  value	59	None	replace
975	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  values));  [CE]  cannot  find  symbol  values  [FE]                        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  values));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  values));	  extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  cannot  find  symbol  values	59	None	replace
976	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  INVALID_VAR_DECLARATIONS));  [CE]  cannot  find  symbol  INVALID_VAR_DECLARATIONS  [FE]                          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  INVALID_VAR_DECLARATIONS));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  INVALID_VAR_DECLARATIONS));	  extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  cannot  find  symbol  INVALID_VAR_DECLARATIONS	59	None	replace
977	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent.getFirstChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeUtil.removeChild(n,  parent.getFirstChild());	  NodeUtil.removeChild(parent,    n.getFirstChild());    	compilable	  [FE]  RuntimeException  	10	13	replace
978	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent.getFirstChild());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent.getFirstChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(n,  parent.getFirstChild());	  NodeUtil.removeChild(parent,    n.getFirstChild());    	compilable	  [FE]  RuntimeException  	10	13	replace
979	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  parent.getFirstChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeUtil.removeChild(parent,  parent.getFirstChild());	  NodeUtil.removeChild(parent,    n.getFirstChild());    	compilable	  [FE]  RuntimeException  	10	13	replace
980	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent.getFirstChild());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  parent.getFirstChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  parent.getFirstChild());	  NodeUtil.removeChild(parent,    n.getFirstChild());    	compilable	  [FE]  RuntimeException  	10	13	replace
981	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n.getString());  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n.getString());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n.getString());	  NodeUtil.removeChild(parent,    n.getFirstChild());    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	10	None	replace
982	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n)  {  extractForInitializer(n,  null,  null);  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n)  {  extractForInitializer(n,  null,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n)  {  extractForInitializer(n,  null,  null);	  NodeUtil.removeChild(parent,    n)    	non-compiled	[CE]  ';'  expected	194	None	replace
983	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent)  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent)  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(n,  parent)	  NodeUtil.removeChild(parent,    n)    	non-compiled	[CE]  ';'  expected	194	None	replace
984	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n)  {  removeVarDeclarations(n);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n)  {  removeVarDeclarations(n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n)  {  removeVarDeclarations(n);	  NodeUtil.removeChild(parent,    n)    	non-compiled	[CE]  ';'  expected	194	None	replace
985	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	210	13	add
986	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	210	13	add
987	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	210	13	add
988	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	210	13	add
989	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	210	13	add
990	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.CALL);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	210	13	add
991	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	210	13	add
992	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    Preconditions.checkState(n.getType()  >=  Token.VAR  ||  n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	210	13	add
993	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  >=  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  >=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	210	13	add
994	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  >=  Token.CALL);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  >=  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  >=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	210	13	add
995	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  parent.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Node  v  =  parent.getLastChild();	  Node    v    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	22	13	replace
996	[BUG]  [BUGGY]  Node  v  =  parent.getLastChild();  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  parent.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  parent.getLastChild();	  Node    v    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	22	13	replace
997	[BUG]  [BUGGY]  Node  v  =  node.getLastChild();  [CE]  cannot  find  symbol  node  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  node.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  node.getLastChild();	  Node    v    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	22	None	replace
998	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  argumentCount);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  argumentCount);	  MutableNodeTraversal.traverse(compiler,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	94	None	replace
999	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  argumentStatements);  [CE]  cannot  find  symbol  argumentStatements  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  argumentStatements);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  argumentStatements);	  MutableNodeTraversal.traverse(compiler,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentStatements	94	None	replace
1000	[BUG]  [BUGGY]  translateForNormalization(t,  n,  parent,  argument);  [CE]  cannot  find  symbol  argument  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateForNormalization(t,  n,  parent,  argument);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateForNormalization(t,  n,  parent,  argument);	  translateForNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argument	140	None	replace
1001	[BUG]  [BUGGY]  translateForNormalization(t,  n,  parent,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateForNormalization(t,  n,  parent,  argumentCount);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateForNormalization(t,  n,  parent,  argumentCount);	  translateForNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	140	None	replace
1002	[BUG]  [BUGGY]  translateForNormalization(t,  n,  parent,  isConst);  [CE]  cannot  find  symbol  isConst  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateForNormalization(t,  n,  parent,  isConst);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateForNormalization(t,  n,  parent,  isConst);	  translateForNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  isConst	140	None	replace
1003	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  expectedConst);  [CE]  cannot  find  symbol  expectedConst  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  expectedConst);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  expectedConst);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    arguments);    	non-compiled	[CE]  cannot  find  symbol  expectedConst	115	None	replace
1004	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  argumentCount);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  argumentCount);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	115	None	replace
1005	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  parameters);  [CE]  cannot  find  symbol  parameters  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  parameters);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  parameters);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    arguments);    	non-compiled	[CE]  cannot  find  symbol  parameters	115	None	replace
1006	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent.getLastChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeUtil.removeChild(n,  parent.getLastChild());	  NodeUtil.removeChild(parent,    n.getLastChild());    	compilable	  [FE]  RuntimeException  	15	13	replace
1007	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent.getLastChild());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent.getLastChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(n,  parent.getLastChild());	  NodeUtil.removeChild(parent,    n.getLastChild());    	compilable	  [FE]  RuntimeException  	15	13	replace
1008	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  n.getLastChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeUtil.removeChild(n,  n.getLastChild());	  NodeUtil.removeChild(parent,    n.getLastChild());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	15	12	replace
1009	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  n.getLastChild());  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  n.getLastChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(n,  n.getLastChild());	  NodeUtil.removeChild(parent,    n.getLastChild());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	15	12	replace
1010	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  parent.getLastChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeUtil.removeChild(parent,  parent.getLastChild());	  NodeUtil.removeChild(parent,    n.getLastChild());    	compilable	  [FE]  RuntimeException  	15	13	replace
1011	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent.getLastChild());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  parent.getLastChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  parent.getLastChild());	  NodeUtil.removeChild(parent,    n.getLastChild());    	compilable	  [FE]  RuntimeException  	15	13	replace
1012	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	292	None	add
1013	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	292	None	add
1014	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	292	13	add
1015	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	292	13	add
1016	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	292	13	add
1017	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	292	13	add
1018	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	292	13	add
1019	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	292	13	add
1020	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	292	13	add
1021	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	292	13	add
1022	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	269	13	replace
1023	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	269	13	replace
1024	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	269	13	replace
1025	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	269	13	replace
1026	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	269	13	replace
1027	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	269	13	replace
1028	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	269	13	replace
1029	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	compilable	  [FE]  RuntimeException  	269	13	replace
1030	[BUG]  [BUGGY]  Node  v  =  parent.getFirstChild();  Node  v  =  parent.getFirstChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  parent.getFirstChild();  Node  v  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    parent.getFirstChild();    Node  v  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	23	None	add
1031	[BUG]  [BUGGY]  Node  v  =  parent.getFirstChild();  Node  v  =  parent.getLastChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  parent.getFirstChild();  Node  v  =  parent.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    parent.getFirstChild();    Node  v  =  parent.getLastChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	23	None	add
1032	[BUG]  [BUGGY]  Node  v  =  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    parent.getFirstChild();    Node  parent  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	23	None	add
1033	[BUG]  [BUGGY]  Node  v  =  parent.getFirstChild();  Node  v  =  child.getFirstChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  parent.getFirstChild();  Node  v  =  child.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    parent.getFirstChild();    Node  v  =  child.getFirstChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	23	None	add
1034	[BUG]  [BUGGY]  Node  v  =  parent.getFirstChild();  Node  v  =  parent.getFirstChild());  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  parent.getFirstChild();  Node  v  =  parent.getFirstChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    parent.getFirstChild();    Node  v  =  parent.getFirstChild());	  	non-compiled	[CE]  ';'  expected	23	None	add
1035	[BUG]  [BUGGY]  extractForInitializer(t,  n,  parent,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(t,  n,  parent,  argumentCount);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  n,  parent,  argumentCount);	  extractForInitializer(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	152	None	replace
1036	[BUG]  [BUGGY]  extractForInitializer(t,  n,  parent,  isConst);  [CE]  cannot  find  symbol  isConst  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(t,  n,  parent,  isConst);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  n,  parent,  isConst);	  extractForInitializer(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  isConst	152	None	replace
1037	[BUG]  [BUGGY]  extractForInitializer(t,  n,  parent,  null,  null);  [CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(t,  n,  parent,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  n,  parent,  null,  null);	  extractForInitializer(t,    n,    null,    null);    	non-compiled	[CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;	48	None	replace
1038	[BUG]  [BUGGY]  ExtractForInitializer(t,  n,  parent,  null);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForInitializer(t,  n,  parent,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForInitializer(t,  n,  parent,  null);	  extractForInitializer(t,    n,    null,    null);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
1039	[BUG]  [BUGGY]  extractForInitializer(t,  parent,  n,  null,  null);  [CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(t,  parent,  n,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  parent,  n,  null,  null);	  extractForInitializer(t,    n,    null,    null);    	non-compiled	[CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;	48	None	replace
1040	[BUG]  [BUGGY]  extractForInitializer(t,  parent,  null,  null);  [CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(t,  parent,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  parent,  null,  null);	  extractForInitializer(t,    n,    null,    null);    	non-compiled	[CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;	48	None	replace
1041	[BUG]  [BUGGY]  n.getFirstChild().getString().endsWith( "__ "))  {  normalizeVarDeclarations(n);  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n.getFirstChild().getString().endsWith( "__ "))  {  normalizeVarDeclarations(n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n.getFirstChild().getString().endsWith( "__ "))  {  normalizeVarDeclarations(n);	          n.getLastChild().getString().endsWith(   "__   "))    {    normalizeVarDeclarations(n);    	non-compiled	[CE]  	272	None	replace
1042	[BUG]  [BUGGY]  parent.getLastChild().getString().endsWith( "__ "))  {  normalizeVarDeclarations(n);  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  parent.getLastChild().getString().endsWith( "__ "))  {  normalizeVarDeclarations(n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	parent.getLastChild().getString().endsWith( "__ "))  {  normalizeVarDeclarations(n);	          n.getLastChild().getString().endsWith(   "__   "))    {    normalizeVarDeclarations(n);    	non-compiled	[CE]  	272	None	replace
1043	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  arguments,  null);  [CE]  cannot  find  symbol  arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  arguments,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  arguments,  null);	  MutableNodeTraversal.traverse(compiler,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	66	None	replace
1044	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  argumentMap);  [CE]  cannot  find  symbol  argumentMap  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  argumentMap);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  argumentMap);	  MutableNodeTraversal.traverse(compiler,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	66	None	replace
1045	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()!=  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	232	1	replace
1046	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	232	1	replace
1047	[BUG]  [BUGGY]  Condition.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  Condition  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Condition.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Condition.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  Condition	232	None	replace
1048	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  >=  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	232	1	replace
1049	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  >=  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	232	1	replace
1050	[BUG]  [BUGGY]  Function  v  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Function  v  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Function  v  =  n.getFirstChild();	          Node    v    =    n.getFirstChild();    Function    v    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1051	[BUG]  [BUGGY]  Node  v  =  parent.getFirstChild();  Function  v  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  parent.getFirstChild();  Function  v  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  parent.getFirstChild();  Function  v  =  n.getFirstChild();	          Node    v    =    n.getFirstChild();    Function    v    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1052	[BUG]  [BUGGY]  Node  v  =  n.getFirstChild();  Function  v  =  parent.getFirstChild();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getFirstChild();  Function  v  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  n.getFirstChild();  Function  v  =  parent.getFirstChild();	          Node    v    =    n.getFirstChild();    Function    v    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1053	[BUG]  [BUGGY]  Node  v  =  n.getLastChild();  Function  v  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getLastChild();  Function  v  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  n.getLastChild();  Function  v  =  n.getFirstChild();	          Node    v    =    n.getFirstChild();    Function    v    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1054	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	177	13	add
1055	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	177	13	add
1056	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	177	13	add
1057	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	177	13	add
1058	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	177	13	add
1059	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	177	13	add
1060	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  >=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  >=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	177	13	add
1061	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  >=  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  >=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  >=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	177	13	add
1062	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  >=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  >=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	177	13	add
1063	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  >=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  >=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  >=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	177	13	add
1064	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	177	13	add
1065	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	177	13	add
1066	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeUtil.removeChild(parent,        n);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	205	13	add
1067	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	205	13	add
1068	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeUtil.removeChild(parent,        n);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	205	13	add
1069	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	205	13	add
1070	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  n);  preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  n);  preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(parent,  n);  preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	205	None	add
1071	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  constantMap);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  this,  constantMap);	  MutableNodeTraversal.traverse(compiler,    n,    this,    argument);    	non-compiled	[CE]  cannot  find  symbol  constantMap	139	None	replace
1072	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Compiler  compiler  =  t.getCompiler();  NodeTraversal.traverse(compiler,  n,  this);  Compiler  compiler  =  t.getCompiler();  [CE]  variable  compiler  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Compiler  compiler  =  t.getCompiler();  NodeTraversal.traverse(compiler,  n,  this);  Compiler  compiler  =  t.getCompiler();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Compiler    compiler    =    t.getCompiler();    NodeTraversal.traverse(compiler,  n,  this);  Compiler  compiler  =  t.getCompiler();	  	non-compiled	[CE]  variable  compiler  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	83	None	add
1073	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Compiler  compiler  =  t.getCompiler();  NodeTraversal.traverse(compiler,  n,  this);  compiler  =  t.getCompiler();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Compiler    compiler    =    t.getCompiler();    NodeTraversal.traverse(compiler,  n,  this);  compiler  =  t.getCompiler();	  	compilable	  [FE]  RuntimeException  	83	13	add
1074	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Compiler  compiler  =  t.getCompiler();  NodeTraversal.traverse(compiler,  n,  this);  compiler  =  t.getCompiler();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Compiler  compiler  =  t.getCompiler();  NodeTraversal.traverse(compiler,  n,  this);  compiler  =  t.getCompiler();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Compiler    compiler    =    t.getCompiler();    NodeTraversal.traverse(compiler,  n,  this);  compiler  =  t.getCompiler();	  	compilable	  [FE]  RuntimeException  	83	13	add
1075	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Compiler  compiler  =  t.getCompiler();  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Compiler    compiler    =    t.getCompiler();    NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	83	13	add
1076	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Compiler  compiler  =  t.getCompiler();  NodeTraversal.traverse(compiler,  n,  this);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Compiler  compiler  =  t.getCompiler();  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Compiler    compiler    =    t.getCompiler();    NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	83	13	add
1077	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  n,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.ScopeTicklingCallback,Node,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  n,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  n,  parent);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.ScopeTicklingCallback,Node,Node)	104	None	replace
1078	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  parent,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  parent,  arguments);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  parent,  arguments);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    parent);    	non-compiled	[CE]  cannot  find  symbol  arguments	104	None	replace
1079	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  t);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.ScopeTicklingCallback,NodeTraversal)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  t);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  t);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.ScopeTicklingCallback,NodeTraversal)	104	None	replace
1080	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  t,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.ScopeTicklingCallback,NodeTraversal,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  t,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  t,  parent);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.ScopeTicklingCallback,NodeTraversal,Node)	104	None	replace
1081	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Node  v  =  n.getFirstChild();  n  =  n.getLastChild();	          Node    v    =    n.getFirstChild();    n    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	93	9	replace
1082	[BUG]  [BUGGY]  Node  v  =  n.getFirstChild();  n  =  n.getLastChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  n.getFirstChild();  n  =  n.getLastChild();	          Node    v    =    n.getFirstChild();    n    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	93	9	replace
1083	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Node  v  =  n.getLastChild();  n  =  n.getFirstChild();	          Node    v    =    n.getFirstChild();    n    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	93	9	replace
1084	[BUG]  [BUGGY]  Node  v  =  n.getLastChild();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  n.getLastChild();  n  =  n.getFirstChild();	          Node    v    =    n.getFirstChild();    n    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	93	9	replace
1085	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  parent.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Node  v  =  parent.getFirstChild();  n  =  n.getFirstChild();	          Node    v    =    n.getFirstChild();    n    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	93	13	replace
1086	[BUG]  [BUGGY]  Node  v  =  parent.getFirstChild();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  parent.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  parent.getFirstChild();  n  =  n.getFirstChild();	          Node    v    =    n.getFirstChild();    n    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	93	13	replace
1087	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Node  v  =  n.getFirstChild();  n  =  parent.getFirstChild();	          Node    v    =    n.getFirstChild();    n    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	93	13	replace
1088	[BUG]  [BUGGY]  Node  v  =  n.getFirstChild();  n  =  parent.getFirstChild();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  n.getFirstChild();  n  =  parent.getFirstChild();	          Node    v    =    n.getFirstChild();    n    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	93	13	replace
1089	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getFirstChild();  n  =  n.getNext();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Node  v  =  n.getFirstChild();  n  =  n.getNext();	          Node    v    =    n.getFirstChild();    n    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	93	13	replace
1090	[BUG]  [BUGGY]  Node  v  =  n.getFirstChild();  n  =  n.getNext();  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getFirstChild();  n  =  n.getNext();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  n.getFirstChild();  n  =  n.getNext();	          Node    v    =    n.getFirstChild();    n    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	93	13	replace
1091	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {	          NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	242	None	replace
1092	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(parent)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isVarDeclaration(parent)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isVarDeclaration(parent)||  parent.getType()  ==  Token.FUNCTION)  {	          NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	242	None	replace
1093	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(parent)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isVarDeclaration(parent)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isVarDeclaration(parent)||  n.getType()  ==  Token.FUNCTION)  {	          NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	242	None	replace
1094	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION)  {	          NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	242	None	replace
1095	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  RuntimeException  	19	13	add
1096	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  RuntimeException  	19	13	add
1097	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  n.getLastChild().removeChild(parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  n.getLastChild().removeChild(parent);	  	compilable	  [FE]  RuntimeException  	19	13	add
1098	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  n.getLastChild().removeChild(parent);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  n.getLastChild().removeChild(parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  n.getLastChild().removeChild(parent);	  	compilable	  [FE]  RuntimeException  	19	13	add
1099	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  n.getLastChild().addChildToBack(parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  n.getLastChild().addChildToBack(parent);	  	compilable	  [FE]  RuntimeException  	19	13	add
1100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  n.getLastChild().addChildToBack(parent);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  n.getLastChild().addChildToBack(parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  n.getLastChild().addChildToBack(parent);	  	compilable	  [FE]  RuntimeException  	19	13	add
1101	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  n.getLastChild().addChildToFront(parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  n.getLastChild().addChildToFront(parent);	  	compilable	  [FE]  RuntimeException  	19	13	add
1102	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  n.getLastChild().addChildToFront(parent);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  n.getLastChild().addChildToFront(parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  n.getLastChild().addChildToFront(parent);	  	compilable	  [FE]  RuntimeException  	19	13	add
1103	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  n.setLastChild();  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  n.setLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  n.setLastChild();	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
1104	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  n.getLastChild().setString( "PropertyDeclaration ");  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  n.getLastChild().setString( "PropertyDeclaration ");	  	compilable	  [FE]  RuntimeException  	19	13	add
1105	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  n.getLastChild().setString( "PropertyDeclaration ");  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  n.getLastChild().setString( "PropertyDeclaration ");  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  n.getLastChild().setString( "PropertyDeclaration ");	  	compilable	  [FE]  RuntimeException  	19	13	add
1106	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback)	283	None	replace
1107	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);	          NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.FUNCTION)    {    normalizeVarDeclarations(n);    	non-compiled	[CE]  not  a  statement	240	None	replace
1108	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  break;  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  break;  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()  ==  Token.FUNCTION)  {  break;	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
1109	[BUG]  [BUGGY]  ||  parent.getType()  ==  Token.FUNCTION)  {  break;  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  parent.getType()  ==  Token.FUNCTION)  {  break;  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  parent.getType()  ==  Token.FUNCTION)  {  break;	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
1110	[BUG]  [BUGGY]  ||  n.getType()!=  Token.FUNCTION)  {  break;  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()!=  Token.FUNCTION)  {  break;  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()!=  Token.FUNCTION)  {  break;	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
1111	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  continue;  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  continue;  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()  ==  Token.FUNCTION)  {  continue;	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
1112	[BUG]  [BUGGY]  ||(n.getType()  ==  Token.FUNCTION))  {  break;  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||(n.getType()  ==  Token.FUNCTION))  {  break;  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||(n.getType()  ==  Token.FUNCTION))  {  break;	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
1113	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	158	None	add
1114	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations	  	non-compiled	[CE]  ';'  expected	158	None	add
1115	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	158	13	add
1116	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	158	13	add
1117	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe	  	non-compiled	[CE]  ';'  expected	158	None	add
1118	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	158	13	add
1119	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	158	13	add
1120	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  breakVarDeclarations(n);  }  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  breakVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  breakVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	158	None	add
1121	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  parent));  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  parent));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  parent));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,Node)	248	None	replace
1122	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  parent));  [CE]  cannot  find  symbol  NON_GLOBAL_NAMES_UNIQUE  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  parent));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  parent));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_NAMES_UNIQUE	248	None	replace
1123	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  VAR_LOCAL_NAMES_UNIQUE));  [CE]  cannot  find  symbol  VAR_LOCAL_NAMES_UNIQUE  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  VAR_LOCAL_NAMES_UNIQUE));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  VAR_LOCAL_NAMES_UNIQUE));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  cannot  find  symbol  VAR_LOCAL_NAMES_UNIQUE	248	None	replace
1124	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  parent.getNext();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Node  v  =  parent.getNext();	  Node    v    =    n.getNext();    	compilable	  [FE]  RuntimeException  	26	13	replace
1125	[BUG]  [BUGGY]  Node  v  =  parent.getNext();  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  parent.getNext();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  parent.getNext();	  Node    v    =    n.getNext();    	compilable	  [FE]  RuntimeException  	26	13	replace
1126	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getParent();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Node  v  =  n.getParent();	  Node    v    =    n.getNext();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	26	1	replace
1127	[BUG]  [BUGGY]  Node  v  =  n.getParent();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getParent();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  n.getParent();	  Node    v    =    n.getNext();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	26	1	replace
1128	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  new  ScopeTicklingCallback());  [CE]  cannot  find  symbol  arguments  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  arguments,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    parent,    null,    new    ScopeTicklingCallback());    	non-compiled	[CE]  cannot  find  symbol  arguments	118	None	replace
1129	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  null,  new  ScopeTicklingCallback());  [CE]  cannot  find  symbol  arguments  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  null,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  arguments,  null,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    parent,    null,    new    ScopeTicklingCallback());    	non-compiled	[CE]  cannot  find  symbol  arguments	118	None	replace
1130	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null,  new  ScopeTicklingCallback(),  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null,  new  ScopeTicklingCallback(),  arguments);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  null,  new  ScopeTicklingCallback(),  arguments);	  NodeTraversal.traverse(compiler,    n,    parent,    null,    new    ScopeTicklingCallback());    	non-compiled	[CE]  cannot  find  symbol  arguments	118	None	replace
1131	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.VAR);    Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	167	None	add
1132	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  >=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	167	13	add
1133	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  >=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	167	13	add
1134	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  n  =  parent.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  n  =  parent.getLastChild();	  	compilable	  [FE]  RuntimeException  	167	13	add
1135	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  n  =  parent.getLastChild();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  n  =  parent.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  n  =  parent.getLastChild();	  	compilable	  [FE]  RuntimeException  	167	13	add
1136	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  no  =  n.getFirstChild();  [CE]  cannot  find  symbol  no  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getFirstChild();  no  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  parent.getFirstChild();  no  =  n.getFirstChild();	          n    =    n.getFirstChild();    no    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  no	33	None	replace
1137	[BUG]  [BUGGY]  n  =  n.getFirstChild();  no  =  parent.getFirstChild();  [CE]  cannot  find  symbol  no  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  n.getFirstChild();  no  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  n.getFirstChild();  no  =  parent.getFirstChild();	          n    =    n.getFirstChild();    no    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  no	33	None	replace
1138	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                n        =        n.getLastChild();        n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	148	13	add
1139	[BUG]  [BUGGY]          n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getLastChild();        n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	148	13	add
1140	[BUG]  [BUGGY]          n    =    n.getLastChild();    n  =  n.getFirstChild();  Node  n  =  n.getLastChild();  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getFirstChild();  Node  n  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getLastChild();        n    =    n.getFirstChild();    Node  n  =  n.getLastChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	148	None	add
1141	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                n        =        n.getLastChild();        n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	148	13	add
1142	[BUG]  [BUGGY]          n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getLastChild();        n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	148	13	add
1143	[BUG]  [BUGGY]          n    =    n.getLastChild();    n  =  n.getFirstChild();  node  =  n.getLastChild();  n  =  n.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getFirstChild();  node  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getLastChild();        n    =    n.getFirstChild();    node  =  n.getLastChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  node	148	None	add
1144	[BUG]  [BUGGY]          n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();  n  =  n.getfirstChild();  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();  n  =  n.getfirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getLastChild();        n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getfirstChild();	  	non-compiled	[CE]  cannot  find  symbol	148	None	add
1145	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	251	None	replace
1146	[BUG]  [BUGGY]  ||  parent.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  parent.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  parent.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	251	None	replace
1147	[BUG]  [BUGGY]  ||  n.getType()!=  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()!=  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()!=  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	251	None	replace
1148	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ".);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ".);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ".);	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	251	None	replace
1149	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( ". ");  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( ". ");  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( ". ");	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	251	None	replace
1150	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  this,  arguments);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  this,  arguments);	  MutableNodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	97	None	replace
1151	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  this,  argument);  [CE]  cannot  find  symbol  argument  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  this,  argument);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  this,  argument);	  MutableNodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  argument	97	None	replace
1152	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  arguments);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,  n,  parent,  arguments);	  doStatementNormalizations(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  arguments	144	None	replace
1153	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  argument);  [CE]  cannot  find  symbol  argument  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  argument);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,  n,  parent,  argument);	  doStatementNormalizations(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argument	144	None	replace
1154	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  isConst);  [CE]  cannot  find  symbol  isConst  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  isConst);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,  n,  parent,  isConst);	  doStatementNormalizations(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  isConst	144	None	replace
1155	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  null);  [CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,  n,  parent,  null);	  doStatementNormalizations(t,    n,    parent);    	non-compiled	[CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;	144	None	replace
1156	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  false);  [CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  false);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,  n,  parent,  false);	  doStatementNormalizations(t,    n,    parent);    	non-compiled	[CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;	144	None	replace
1157	[BUG]  [BUGGY]  parent.getLastChild().getString().endsWith( "__ "))  {  throw  new  IllegalStateException( " ");  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  parent.getLastChild().getString().endsWith( "__ "))  {  throw  new  IllegalStateException( " ");  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	parent.getLastChild().getString().endsWith( "__ "))  {  throw  new  IllegalStateException( " ");	          n.getLastChild().getString().endsWith(   "__   "))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	275	None	replace
1158	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    null);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);	  	compilable	  [FE]  RuntimeException  	109	13	add
1159	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    null);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);	  	compilable	  [FE]  RuntimeException  	109	13	add
1160	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    null);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  cannot  find  symbol	109	None	add
1161	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  NodeUtil.removeChild(parent,  n);  NodeUtil.replaceChild(parent,  n);  parent.replaceChild(n,  null);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  NodeUtil.removeChild(parent,  n);  NodeUtil.replaceChild(parent,  n);  parent.replaceChild(n,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    null);    NodeUtil.removeChild(parent,  n);  NodeUtil.replaceChild(parent,  n);  parent.replaceChild(n,  null);	  	non-compiled	[CE]  cannot  find  symbol	109	None	add
1162	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  NodeUtil.removeChild(n,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  NodeUtil.removeChild(n,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    null);    NodeUtil.removeChild(n,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);	  	non-compiled	[CE]  cannot  find  symbol	109	None	add
1163	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getFirstChild());  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  n.getLastChild();  n  =  n.getFirstChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  n.getLastChild();  n  =  n.getFirstChild());	          n    =    n.getFirstChild();    n    =    n.getFirstChild());    	non-compiled	[CE]  ';'  expected	34	None	replace
1164	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  n  =  n.getFirstChild());  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getFirstChild();  n  =  n.getFirstChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  parent.getFirstChild();  n  =  n.getFirstChild());	          n    =    n.getFirstChild();    n    =    n.getFirstChild());    	non-compiled	[CE]  ';'  expected	34	None	replace
1165	[BUG]  [BUGGY]  n  =  n.getFirstChild();  n  =  n.getLastChild());  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  n.getFirstChild();  n  =  n.getLastChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  n.getFirstChild();  n  =  n.getLastChild());	          n    =    n.getFirstChild();    n    =    n.getFirstChild());    	non-compiled	[CE]  ';'  expected	34	None	replace
1166	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  forbidChanges);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  forbidChanges);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  forbidChanges);	  NodeTraversal.traverse(compiler,    n,    parent,    this,    expectedConst);    	non-compiled	[CE]  cannot  find  symbol	216	None	replace
1167	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  condition);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  condition);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  condition);	  NodeTraversal.traverse(compiler,    n,    parent,    this,    expectedConst);    	non-compiled	[CE]  cannot  find  symbol	216	None	replace
1168	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  cannot  find  symbol	219	None	replace
1169	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  node  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getFirstChild();  node  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  parent.getFirstChild();  node  =  n.getFirstChild();	          n    =    n.getFirstChild();    node    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	207	None	replace
1170	[BUG]  [BUGGY]  n  =  n.getFirstChild();  node  =  parent.getFirstChild();  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  n.getFirstChild();  node  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  n.getFirstChild();  node  =  parent.getFirstChild();	          n    =    n.getFirstChild();    node    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	207	None	replace
1171	[BUG]  [BUGGY]  Node  node  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  node  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  node  =  n.getLastChild();	          n    =    n.getLastChild();    no    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
1172	[BUG]  [BUGGY]  n  =  parent.getLastChild();  no  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getLastChild();  no  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  parent.getLastChild();  no  =  n.getLastChild();	          n    =    n.getLastChild();    no    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
1173	[BUG]  [BUGGY]  node  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  node  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	node  =  n.getLastChild();	          n    =    n.getLastChild();    no    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
1174	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent,  null);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  parent,  null);	  NodeTraversal.traverse(compiler,    n,    this,    null);    	non-compiled	[CE]  cannot  find  symbol	198	None	replace
1175	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  null);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  parent,  n,  null);	  NodeTraversal.traverse(compiler,    n,    this,    null);    	non-compiled	[CE]  cannot  find  symbol	198	None	replace
1176	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  constantMap,  null);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  constantMap,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  constantMap,  null);	  NodeTraversal.traverse(compiler,    n,    this,    null);    	non-compiled	[CE]  cannot  find  symbol	198	None	replace
1177	[BUG]  [BUGGY]  extractForInitializer(n,  parent,  n);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(n,  parent,  n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,  parent,  n);	  extractForInitializer(n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
1178	[BUG]  [BUGGY]  ExtractForInitializer(n,  parent,  arguments);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForInitializer(n,  parent,  arguments);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForInitializer(n,  parent,  arguments);	  extractForInitializer(n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
1179	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  extractForInitializer(parent,  null,  null);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  parent  =  n.getParent();  extractForInitializer(parent,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  parent  =  n.getParent();  extractForInitializer(parent,  null,  null);	  extractForInitializer(parent,    null,    null);    Node    parent    =    n.getParent();    extractForInitializer(parent,    null,    null);    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
1180	[BUG]  [BUGGY]  parent  =  n.getParent();  extractForInitializer(parent,  null,  null);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  parent  =  n.getParent();  extractForInitializer(parent,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	parent  =  n.getParent();  extractForInitializer(parent,  null,  null);	  extractForInitializer(parent,    null,    null);    Node    parent    =    n.getParent();    extractForInitializer(parent,    null,    null);    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
1181	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
1182	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(n.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	306	None	replace
1183	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  parent);  Context.checkState(n.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	306	None	replace
1184	[BUG]  [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n  ==  ';'  expected  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n  ==  ';'  expected  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function  f()  {  arguments=Array.prototype.slice.call(n  ==  ';'  expected	  function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	49	None	replace
1185	[BUG]  [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n!=  ';'  expected  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n!=  ';'  expected  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function  f()  {  arguments=Array.prototype.slice.call(n!=  ';'  expected	  function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	49	None	replace
1186	[BUG]  [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n,  arguments  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n,  arguments  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function  f()  {  arguments=Array.prototype.slice.call(n,  arguments	  function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	49	None	replace
1187	[BUG]  [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n!=  ';'  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n!=  ';'  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function  f()  {  arguments=Array.prototype.slice.call(n!=  ';'	  function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	49	None	replace
1188	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argument));  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argument));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argument));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
1189	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  n  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  parent.getFirstChild();  n  =  n.getLastChild();	          n    =    n.getFirstChild();    n    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
1190	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());	  	non-compiled	[CE]  cannot  find  symbol	102	None	add
1191	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  n.removeChild(parent);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  n.removeChild(parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  n.removeChild(parent);	  	non-compiled	[CE]  cannot  find  symbol	102	None	add
1192	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  n.setLastChild();  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  n.setLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  n.setLastChild();	  	non-compiled	[CE]  cannot  find  symbol	102	None	add
1193	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  n.getLastChild();  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	102	None	add
1194	[BUG]  [BUGGY]  parseForNormalization(t,  n,  parent,  arguments);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  parseForNormalization(t,  n,  parent,  arguments);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	parseForNormalization(t,  n,  parent,  arguments);	  parseForNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
1195	[BUG]  [BUGGY]  parseForNormalization(t,  n,  parent,  argument);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  parseForNormalization(t,  n,  parent,  argument);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	parseForNormalization(t,  n,  parent,  argument);	  parseForNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
1196	[BUG]  [BUGGY]  parseForNormalization(t,  n,  parent,  argumentCount);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  parseForNormalization(t,  n,  parent,  argumentCount);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	parseForNormalization(t,  n,  parent,  argumentCount);	  parseForNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
1197	[BUG]  [BUGGY]  parseForNormalization(t,  n,  parent,  argumentType);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  parseForNormalization(t,  n,  parent,  argumentType);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	parseForNormalization(t,  n,  parent,  argumentType);	  parseForNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
1198	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getFirstChild();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getFirstChild();	  extractForInitializer(n,    parent,    null);    Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
1199	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getFirstChild();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getFirstChild();	  extractForInitializer(n,    parent,    null);    Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
1200	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getFirstChild();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  n.getFirstChild();	  extractForInitializer(n,    parent,    null);    Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
1201	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.LABEL);  Node  parent  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.LABEL);  Node  parent  =  n.getFirstChild();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.LABEL);  Node  parent  =  n.getFirstChild();	  extractForInitializer(n,    parent,    null);    Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
1202	[BUG]  [BUGGY]  n  =  parent.getLastChild();  node  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getLastChild();  node  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  parent.getLastChild();  node  =  n.getLastChild();	          n    =    n.getLastChild();    node    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	193	None	replace
1203	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
1204	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
1205	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
1206	[BUG]  [BUGGY]  n  =  parent.getLastChild();  n  =  parent.getLastChild();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getLastChild();  n  =  parent.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n    =    parent.getLastChild();    n  =  parent.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	98	None	add
1207	[BUG]  [BUGGY]  n  =  parent.getLastChild();  Node  n  =  parent.getLastChild();  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getLastChild();  Node  n  =  parent.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n    =    parent.getLastChild();    Node  n  =  parent.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	98	None	add
1208	[BUG]  [BUGGY]  n  =  parent.getLastChild();  n  =  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getLastChild();  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n    =    parent.getLastChild();    n  =  parent.getFirstChild();	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	98	None	add
1209	[BUG]  [BUGGY]  n  =  parent.getLastChild();  Node  parent  =  n.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getLastChild();  Node  parent  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n    =    parent.getLastChild();    Node  parent  =  n.getFirstChild();	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	98	None	add
1210	[BUG]  [BUGGY]  n  =  parent.getLastChild();  node  =  parent.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getLastChild();  node  =  parent.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n    =    parent.getLastChild();    node  =  parent.getLastChild();	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	98	None	add
1211	[BUG]  [BUGGY]  n  =  parent.getLastChild();  n  =  n.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  parent.getLastChild();  n  =  n.getFirstChild();	          n    =    n.getLastChild();    n    =    n.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	149	None	replace
1212	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  invalid  method  declaration;  return  type  required  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	225	None	replace
1213	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  invalid  method  declaration;  return  type  required  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	225	None	replace
1214	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  invalid  method  declaration;  return  type  required  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  parent);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	225	None	replace
1215	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  parent  =  n.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  parent  =  n.getFirstChild();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  parent  =  n.getFirstChild();	  extractForInitializer(parent,    null,    null);    Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	199	None	replace
1216	[BUG]  [BUGGY]  MutableStatement.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  invalid  method  declaration;  return  type  required  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableStatement.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableStatement.checkState(n.getType()  ==  Token.FUNCTION);	  extractForInitializer(n,    parent,    null);    Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
1217	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argumentNames));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argumentNames));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argumentNames));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
1218	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [CE]  invalid  method  declaration;  return  type  required  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
1219	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [CE]  invalid  method  declaration;  return  type  required  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
1220	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  invalid  method  declaration;  return  type  required  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
1221	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	293	None	replace
1222	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(t,  n,  parent,  this);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(t,  n,  parent,  this);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(t,  n,  parent,  this);	  MutableNodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	138	None	replace
1223	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(t,  n,  this);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(t,  n,  this);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(t,  n,  this);	  MutableNodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	138	None	replace
1224	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  parent,  this,  arguments);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  parent,  this,  arguments);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  parent,  this,  arguments);	  MutableNodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	138	None	replace
1225	[BUG]  [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n  [CE]  invalid  method  declaration;  return  type  required  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function  f()  {  arguments=Array.prototype.slice.call(n	          function    f()    {    arguments=Array.prototype.slice.call(n!=    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
1226	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  isConst);  [CE]  invalid  method  declaration;  return  type  required  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  isConst);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  isConst);	  MutableNodeTraversal.traverse(compiler,    n,    parent,    expectedConst);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
1227	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  forbidChanges);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  forbidChanges);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  forbidChanges);	  MutableNodeTraversal.traverse(compiler,    n,    parent,    expectedConst);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
1228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  parent,  null);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	197	None	replace
1229	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent);  NodeUtil.addChildToFront(parent,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent);  NodeUtil.addChildToFront(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(n,  parent);  NodeUtil.addChildToFront(parent,  n);	          NodeUtil.removeChild(parent,    n);    NodeUtil.addChildToFront(parent,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	204	None	replace
1230	[BUG]  [BUGGY]  NodeUtil.insertChild(parent,  n);  NodeUtil.addChildToFront(parent,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.insertChild(parent,  n);  NodeUtil.addChildToFront(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.insertChild(parent,  n);  NodeUtil.addChildToFront(parent,  n);	          NodeUtil.removeChild(parent,    n);    NodeUtil.addChildToFront(parent,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	204	None	replace
1231	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  invalid  method  declaration;  return  type  required  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	add
1232	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  invalid  method  declaration;  return  type  required  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	add
1233	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [CE]  invalid  method  declaration;  return  type  required  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	add
1234	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  invalid  method  declaration;  return  type  required  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	add
1235	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  n,  this);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  invalid  method  declaration;  return  type  required  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  n,  this);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    NodeTraversal.traverse(compiler,  n,  this);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	add
1236	[BUG]  [BUGGY]  ExtractForInitializer(n,  parent);  [CE]  invalid  method  declaration;  return  type  required  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForInitializer(n,  parent);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForInitializer(n,  parent);	  ExtractForInitializer(parent,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	277	None	replace
1237	[BUG]  [BUGGY]  ExtractForInitializer(t,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForInitializer(t,  n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForInitializer(t,  n);	  ExtractForInitializer(parent,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	277	None	replace
1238	[BUG]  [BUGGY]  ExtractForInitializer(parent,  n,  arguments);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForInitializer(parent,  n,  arguments);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForInitializer(parent,  n,  arguments);	  ExtractForInitializer(parent,    n);    	non-compiled	[CE]  cannot  find  symbol	277	None	replace
1239	[BUG]  [BUGGY]  ExtractForInitializer(t,  parent);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForInitializer(t,  parent);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForInitializer(t,  parent);	  ExtractForInitializer(parent,    n);    	non-compiled	[CE]  cannot  find  symbol	277	None	replace
1240	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  parent,  n);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  parent,  n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  parent,  n);	  ExtractForInitializer(parent,    n);    	non-compiled	[CE]  cannot  find  symbol	277	None	replace
1241	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n.getFirstChild());  NodeUtil.removeChild(parent,  n.getFirstChild());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n.getFirstChild());  NodeUtil.removeChild(parent,  n.getFirstChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,    n.getFirstChild());    NodeUtil.removeChild(parent,  n.getFirstChild());	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
1242	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n.getFirstChild());  NodeUtil.removeChild(parent,  n.getLastChild());  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n.getFirstChild());  NodeUtil.removeChild(parent,  n.getLastChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,    n.getFirstChild());    NodeUtil.removeChild(parent,  n.getLastChild());	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
1243	[BUG]  [BUGGY]  extractForInitializer(t,  n,  parent,  this);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(t,  n,  parent,  this);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  n,  parent,  this);	  extractForInitializer(n,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol	181	None	replace
1244	[BUG]  [BUGGY]  ExtractForInitializer(t,  n,  parent,  this);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForInitializer(t,  n,  parent,  this);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForInitializer(t,  n,  parent,  this);	  extractForInitializer(n,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol	181	None	replace
1245	[BUG]  [BUGGY]  extractForInitializer(n,  parent,  this,  arguments);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(n,  parent,  this,  arguments);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,  parent,  this,  arguments);	  extractForInitializer(n,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol	181	None	replace
1246	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
1247	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
1248	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
1249	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  cannot  find  symbol	222	None	add
1250	[BUG]  [BUGGY]  Node  parent  =  n.getPrevious();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  parent  =  n.getPrevious();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  parent  =  n.getPrevious();	  Node    parent    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
1251	[BUG]  [BUGGY]  extractForNormalizer(n,  null,  parent);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForNormalizer(n,  null,  parent);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForNormalizer(n,  null,  parent);	  extractForNormalizer(n,    null,    null);    	non-compiled	[CE]  cannot  find  symbol	256	None	replace
1252	[BUG]  [BUGGY]  ExtractForNormalizer(n,  parent,  null);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForNormalizer(n,  parent,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForNormalizer(n,  parent,  null);	  extractForNormalizer(n,    null,    null);    	non-compiled	[CE]  cannot  find  symbol	256	None	replace
1253	[BUG]  [BUGGY]  extractForNormalizer(parent,  null,  null);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForNormalizer(parent,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForNormalizer(parent,  null,  null);	  extractForNormalizer(n,    null,    null);    	non-compiled	[CE]  cannot  find  symbol	256	None	replace
1254	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  internalizeVarDeclarations);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  internalizeVarDeclarations);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  internalizeVarDeclarations);	  NodeTraversal.traverse(compiler,    n,    parent,    this,    argumentMap);    	non-compiled	[CE]  ')'  expected	3	None	replace
1255	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  false);  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  false);  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  false);  Context.checkState(n.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	124	None	replace
1256	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    	non-compiled	[CE]  ')'  expected	183	None	replace
1257	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  node  =  parent.getFirstChild();  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getFirstChild();  node  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n    =    parent.getFirstChild();    node  =  parent.getFirstChild();	  	non-compiled	[CE]  ')'  expected	100	None	add
1258	[BUG]  [BUGGY]  n  =  n.getFirstChild();  ||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  n.getFirstChild();  ||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  n.getFirstChild();  ||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	251	None	replace
1259	[BUG]  [BUGGY]  n  =  n.getFirstChild();  ||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  n.getFirstChild();  ||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  n.getFirstChild();  ||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	251	None	replace
1260	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  t);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  t);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  t);	  NodeTraversal.traverse(compiler,    n,    parent,    event);    	non-compiled	[CE]  ')'  expected	215	None	replace
1261	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  	85	None	add
1262	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  ')'  expected	281	None	replace
1263	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  ')'  expected	281	None	replace
1264	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.LABEL);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.LABEL);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.checkState(n.getType()  ==  Token.LABEL);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  ')'  expected	281	None	replace
1265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  parent.replaceChild(n,  new  NodeTraversal(parent));  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  parent.replaceChild(n,  new  NodeTraversal(parent));  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  parent.replaceChild(n,  new  NodeTraversal(parent));	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    parent.replaceChild(n,    new    NodeTraversal(compiler));    	non-compiled	[CE]  ')'  expected	245	None	replace
1266	[BUG]  [BUGGY]  MutableStatement.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  ')'  expected  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableStatement.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableStatement.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));	  extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  ')'  expected	56	None	replace
1267	[BUG]  [BUGGY]  MutableStatement.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableStatement.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableStatement.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));	  extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  ')'  expected	56	None	replace
1268	[BUG]  [BUGGY]  MutableDeclaration.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableDeclaration.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableDeclaration.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));	  extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  ')'  expected	56	None	replace
1269	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  ')'  expected	224	None	add
1270	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChil  [CE]  ')'  expected  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChil  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChil	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    moveNamedFunctions(n.getLastChil    	non-compiled	[CE]  ')'  expected	302	None	replace
1271	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FU  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FU  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FU	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    moveNamedFunctions(n.getLastChil    	non-compiled	[CE]  ')'  expected	302	None	replace
1272	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    moveNamedFunctions(n.getLastChil    	non-compiled	[CE]  ')'  expected	302	None	replace
1273	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    moveNamedFunctions(n.getLastChil    	non-compiled	[CE]  ')'  expected	302	None	replace
1274	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  ')'  expected	80	None	add
1275	[BUG]  [BUGGY]  Node  v  =  n.getFirstChild();  Node  n  =  n.getLastChild();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getFirstChild();  Node  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  n.getFirstChild();  Node  n  =  n.getLastChild();	          Node    v    =    n.getFirstChild();    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	90	None	replace
1276	[BUG]  [BUGGY]  MutableStatement.checkState(n.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableStatement.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableStatement.checkState(n.getType()  ==  Token.NAME);	  extractForInitializer(parent,    null,    null);    Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	285	None	replace
1277	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n.getFirstChild());  NodeUtil.addChildToFront(parent,  n.getFirstChild());  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n.getFirstChild());  NodeUtil.addChildToFront(parent,  n.getFirstChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,    n.getFirstChild());    NodeUtil.addChildToFront(parent,  n.getFirstChild());	  	non-compiled	[CE]  ')'  expected	9	None	add
1278	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n.getFirstChild());  NodeUtil.removeChild(parent,  n.getfirstChild());  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n.getFirstChild());  NodeUtil.removeChild(parent,  n.getfirstChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,    n.getFirstChild());    NodeUtil.removeChild(parent,  n.getfirstChild());	  	non-compiled	[CE]  ')'  expected	9	None	add
1279	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);	  	non-compiled	[CE]  ')'  expected	182	None	add
1280	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);	  	non-compiled	[CE]  ')'  expected	182	None	add
1281	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(parent,  n.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isStatementBlock(parent,  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isStatementBlock(parent,  n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeUtil.isStatementBlock(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	290	None	replace
1282	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.isStatementBlock(n.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.isStatementBlock(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.isStatementBlock(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeUtil.isStatementBlock(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	290	None	replace
1283	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(n.getType()  {  Token.NAME);  [CE]  ')'  expected  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isStatementBlock(n.getType()  {  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isStatementBlock(n.getType()  {  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeUtil.isStatementBlock(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	290	None	replace
1284	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.isStatementBlock(parent.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.isStatementBlock(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.isStatementBlock(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeUtil.isStatementBlock(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	290	None	replace
1285	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parents,  false);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parents,  false);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parents,  false);	  MutableNodeTraversal.traverse(compiler,    n,    parent,    false);    	non-compiled	[CE]  ')'  expected	209	None	replace
1286	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback(),  t);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback(),  t);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback(),  t);	  NodeTraversal.traverse(compiler,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  ')'  expected	103	None	replace
1287	[BUG]  [BUGGY]  Préconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Préconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Préconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	232	None	replace
1288	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  null);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  null);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  null);  Context.checkState(n.getType()  ==  Token.FUNCTION);	  extractForInitializer(n,    parent,    null);    Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	61	None	replace
1289	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.replaceChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.replaceChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    NodeUtil.replaceChild(parent,  n);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  ')'  expected	105	None	add
1290	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);	  	non-compiled	[CE]  ')'  expected	156	None	add
1291	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  ')'  expected	156	None	add
1292	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  ')'  expected	298	None	add
1293	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  ')'  expected	298	None	add
1294	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  ')'  expected	269	None	replace
1295	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.LABEL);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.LABEL);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.LABEL);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  ')'  expected	269	None	replace
1296	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  ')'  expected	269	None	replace
1297	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(parent.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [CE]  ')'  expected  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(parent.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(parent.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  ')'  expected	269	None	replace
1298	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  ')'  expected	158	None	add
1299	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ')'  expected	158	None	add
1300	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe	  	non-compiled	[CE]  ')'  expected	158	None	add
1301	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  n  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    n    =    parent.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	230	None	replace
1302	[BUG]  [BUGGY]  Node  v  =  n.getNext();  Node  v  =  node.getNext();  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getNext();  Node  v  =  node.getNext();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.getNext();    Node  v  =  node.getNext();	  	non-compiled	[CE]  ')'  expected	25	None	add
1303	[BUG]  [BUGGY]  ExtractForNormalization(t,  n,  parent,  false);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForNormalization(t,  n,  parent,  false);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForNormalization(t,  n,  parent,  false);	  ExtractForNormalization(t,    n,    parent,    arguments);    	non-compiled	[CE]  ')'  expected	235	None	replace
1304	[BUG]  [BUGGY]  ExtractForNormalization(t,  n,  parent,  null);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForNormalization(t,  n,  parent,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForNormalization(t,  n,  parent,  null);	  ExtractForNormalization(t,    n,    parent,    arguments);    	non-compiled	[CE]  ')'  expected	235	None	replace
1305	[BUG]  [BUGGY]  ExtractForNormalization(t,  n,  parent,  this);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForNormalization(t,  n,  parent,  this);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForNormalization(t,  n,  parent,  this);	  ExtractForNormalization(t,    n,    parent,    arguments);    	non-compiled	[CE]  ')'  expected	235	None	replace
1306	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  n  =  parent.getFirstChild();  [CE]  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  n  =  parent.getFirstChild();	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Node    n    =    parent.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	217	None	replace
1307	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  values);  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  values);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  values);	  MutableNodeTraversal.traverse(compiler,    n,    parent,    null);    	non-compiled	[CE]  	66	None	replace
1308	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  	293	None	replace
1309	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  ')'  expected	293	None	replace
1310	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  ')'  expected	293	None	replace
1311	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null,  new  ScopeTicklingCallback(),  t);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null,  new  ScopeTicklingCallback(),  t);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  null,  new  ScopeTicklingCallback(),  t);	  NodeTraversal.traverse(compiler,    n,    parent,    null,    new    ScopeTicklingCallback());    	non-compiled	[CE]  ')'  expected	118	None	replace
1312	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  ')'  expected	164	None	replace
1313	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  ')'  expected	164	None	replace
1314	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  ')'  expected	164	None	replace
1315	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(parent);  }  [CE]  ')'  expected  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(parent);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(parent);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  ')'  expected	164	None	replace
1316	[BUG]  [BUGGY]  translateForInitializer(t,  parent,  n);  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateForInitializer(t,  parent,  n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateForInitializer(t,  parent,  n);	  extractForInitializer(n,    parent,    t);    	non-compiled	[CE]  ')'  expected	67	None	replace
1317	[BUG]  [BUGGY]  extractForInitializer(n,  t,  parent);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(n,  t,  parent);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,  t,  parent);	  extractForInitializer(n,    parent,    t);    	non-compiled	[CE]  ')'  expected	67	None	replace
1318	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  NodeUtil.checkState(n.getType()  ==  Token.NAME,  parent);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  NodeUtil.checkState(n.getType()  ==  Token.NAME,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    NodeUtil.checkState(n.getType()  ==  Token.NAME,  parent);	  	non-compiled	[CE]  ')'  expected	246	None	add
1319	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNKNOWN,  arguments));  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNKNOWN,  arguments));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNKNOWN,  arguments));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  ')'  expected	7	None	replace
1320	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  parent,  arguments));  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  parent,  arguments));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  parent,  arguments));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  ')'  expected	7	None	replace
1321	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  ')'  expected	159	None	replace
1322	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  ')'  expected	159	None	replace
1323	[BUG]  [BUGGY]  extractForInitializer(t,  n,  parent,  values);  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(t,  n,  parent,  values);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  n,  parent,  values);	  extractForInitializer(t,    n,    parent,    null);    	non-compiled	[CE]  ')'  expected	257	None	replace
1324	[BUG]  [BUGGY]  ExtractForInitializer(t,  n,  parent,  null,  null);  [CE]  ')'  expected  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForInitializer(t,  n,  parent,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForInitializer(t,  n,  parent,  null,  null);	  extractForInitializer(t,    n,    null,    null);    	non-compiled	[CE]  ')'  expected	48	None	replace
1325	[BUG]  [BUGGY]  ExtractForInitializer(parent,  n,  parent);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForInitializer(parent,  n,  parent);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForInitializer(parent,  n,  parent);	  ExtractForInitializer(parent,    n);    	non-compiled	[CE]  ')'  expected	277	None	replace
1326	[BUG]  [BUGGY]  ExtractForInitializer(parent,  n,  false);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForInitializer(parent,  n,  false);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForInitializer(parent,  n,  false);	  ExtractForInitializer(parent,    n);    	non-compiled	[CE]  ')'  expected	277	None	replace
1327	[BUG]  [BUGGY]  ExtractForInitializer(parent,  n,  true);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForInitializer(parent,  n,  true);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForInitializer(parent,  n,  true);	  ExtractForInitializer(parent,    n);    	non-compiled	[CE]  ')'  expected	277	None	replace
1328	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  null,  this);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  null,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  null,  this);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  ')'  expected	227	None	replace
1329	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  parent);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  null,  parent);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  ')'  expected	197	None	replace
1330	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n);  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  ')'  expected	197	None	replace
1331	[BUG]  [BUGGY]  parent!=  null;  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  parent!=  null;  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	parent!=  null;  Preconditions.checkState(n.getType()  ==  Token.NAME);	  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	289	None	replace
1332	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getFirstChild();  extractForInitializer(parent,  null,  null);  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getFirstChild();  extractForInitializer(parent,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getFirstChild();  extractForInitializer(parent,  null,  null);	  extractForInitializer(parent,    null,    null);    Node    parent    =    n.getFirstChild();    extractForInitializer(parent,    null,    null);    	non-compiled	[CE]  ')'  expected	202	None	replace
1333	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.LABEL);  Node  parent  =  n.getFirstChild();  extractForInitializer(parent,  null,  null);  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.LABEL);  Node  parent  =  n.getFirstChild();  extractForInitializer(parent,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.LABEL);  Node  parent  =  n.getFirstChild();  extractForInitializer(parent,  null,  null);	  extractForInitializer(parent,    null,    null);    Node    parent    =    n.getFirstChild();    extractForInitializer(parent,    null,    null);    	non-compiled	[CE]  ')'  expected	202	None	replace
1334	[BUG]  [BUGGY]  Node  no  =  n.getLastChild();  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  no  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  no  =  n.getLastChild();	          n    =    n.getLastChild();    no    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	151	None	replace
1335	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  ')'  expected	168	None	replace
1336	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  ')'  expected	211	None	replace
1337	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);	  	non-compiled	[CE]  ')'  expected	210	None	add
1338	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);	  	non-compiled	[CE]  ')'  expected	210	None	add
1339	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.removeChild(parent,  n);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.removeChild(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        Preconditions.checkState(parent.getType()    ==    Token.VAR);    NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  ')'  expected	307	None	add
1340	[BUG]  [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n  ==  ';'  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n  ==  ';'  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function  f()  {  arguments=Array.prototype.slice.call(n  ==  ';'	  function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ')'  expected	49	None	replace
1341	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR,  parent));  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR,  parent));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR,  parent));	  Context.report(JSError.make(t,    n,    CONVERT_WHILE_TO_FOR));    	non-compiled	[CE]  ')'  expected	8	None	replace
1342	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  parent  =  n.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  parent  =  n.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.VAR);    Node  parent  =  n.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  ')'  expected	167	None	add
1343	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ')'  expected	167	None	add
1344	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.VAR)  {  splitVarDeclarations(n);  }  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.VAR)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.VAR)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ')'  expected	167	None	add
1345	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  ')'  expected  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  ')'  expected	167	None	add
1346	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null,  expectedConst);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null,  expectedConst);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  null,  expectedConst);	  NodeTraversal.traverse(compiler,    n,    parent,    null);    	non-compiled	[CE]  ')'  expected	4	None	replace
1347	[BUG]  [BUGGY]  NodeUtil.replaceChild(parent,  n);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.replaceChild(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.replaceChild(parent,  n);	  NodeUtil.removeChild(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
1348	[BUG]  [BUGGY]  NodeUtil.redeclareVarDeclarations(n,  parent);  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.redeclareVarDeclarations(n,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.redeclareVarDeclarations(n,  parent);	  NodeUtil.removeChild(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
1349	[BUG]  [BUGGY]  NodeUtil.replaceChild(n,  parent);  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.replaceChild(n,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.replaceChild(n,  parent);	  NodeUtil.removeChild(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
1350	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	299	None	replace
1351	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
1352	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
1353	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  illegal  start  of  expression	163	None	add
1354	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  illegal  start  of  expression	163	None	add
1355	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Node  parent  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Node  parent  =  n.getParent();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Node  parent  =  n.getParent();	  	non-compiled	[CE]  illegal  start  of  expression	163	None	add
1356	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  illegal  start  of  expression	163	None	add
1357	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  illegal  start  of  expression	163	None	add
1358	[BUG]  [BUGGY]  Node  v  =  n.removeFirstChild();  Node  v  =  node.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.removeFirstChild();  Node  v  =  node.removeFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.removeFirstChild();    Node  v  =  node.removeFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	278	None	add
1359	[BUG]  [BUGGY]  Context.traverse(compiler,  n);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.traverse(compiler,  n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.traverse(compiler,  n);	  Context.traverse(compiler,    n,    null);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
1360	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()!=    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
1361	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  doStatementNormalizations(t,  n,  parent);  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  doStatementNormalizations(t,  n,  parent);  }  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,    n,    parent);    if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  doStatementNormalizations(t,  n,  parent);  }	  	non-compiled	[CE]  illegal  start  of  expression	143	None	add
1362	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  doStatementNormalizations(t,  n,  parent);  }  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  doStatementNormalizations(t,  n,  parent);  }  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,    n,    parent);    if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  doStatementNormalizations(t,  n,  parent);  }	  	non-compiled	[CE]  illegal  start  of  expression	143	None	add
1363	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  doStatementNormalizations(t,  n,  parent);  }  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  doStatementNormalizations(t,  n,  parent);  }  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,    n,    parent);    if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  doStatementNormalizations(t,  n,  parent);  }	  	non-compiled	[CE]  illegal  start  of  expression	143	None	add
1364	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.STRING)  {  doStatementNormalizations(t,  n,  parent);  }  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.STRING)  {  doStatementNormalizations(t,  n,  parent);  }  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,    n,    parent);    if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.STRING)  {  doStatementNormalizations(t,  n,  parent);  }	  	non-compiled	[CE]  illegal  start  of  expression	143	None	add
1365	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent);  if(NodeUtil.isStatementBlock(n))  {  doStatementNormalizations(t,  n,  parent);  }  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent);  if(NodeUtil.isStatementBlock(n))  {  doStatementNormalizations(t,  n,  parent);  }  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,    n,    parent);    if(NodeUtil.isStatementBlock(n))  {  doStatementNormalizations(t,  n,  parent);  }	  	non-compiled	[CE]  illegal  start  of  expression	143	None	add
1366	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeVarDeclarations(n));  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeVarDeclarations(n));  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeVarDeclarations(n));	  Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    	non-compiled	[CE]  illegal  start  of  expression	247	None	replace
1367	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
1368	[BUG]  [BUGGY]  extractForNormalization(t,  n,  parent,  this);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForNormalization(t,  n,  parent,  this);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForNormalization(t,  n,  parent,  this);	  extractForNormalization(t,    n,    parent,    null);    	non-compiled	[CE]  ')'  expected	237	None	replace
1369	[BUG]  [BUGGY]  extractForNormalization(t,  n,  parent,  argumentMap);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForNormalization(t,  n,  parent,  argumentMap);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForNormalization(t,  n,  parent,  argumentMap);	  extractForNormalization(t,    n,    parent,    null);    	non-compiled	[CE]  ')'  expected	237	None	replace
1370	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  null,  null);  [CE]  ')'  expected  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  null,  null);	  MutableNodeTraversal.traverse(compiler,    n,    null,    null);    	non-compiled	[CE]  ')'  expected	249	None	replace
1371	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  node,  null,  null);  [CE]  ')'  expected  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  node,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  node,  null,  null);	  MutableNodeTraversal.traverse(compiler,    n,    null,    null);    	non-compiled	[CE]  ')'  expected	249	None	replace
1372	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n)  {  [CE]  ')'  expected  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n)  {	  NodeUtil.removeChild(parent,    n)    	non-compiled	[CE]  ')'  expected	194	None	replace
1373	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n)&  0  <=  0;  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n)&  0  <=  0;  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n)&  0  <=  0;	  NodeUtil.removeChild(parent,    n)    	non-compiled	[CE]  <identifier>  expected	194	None	replace
1374	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n)  {  normalizeInitializer(n,  null,  null);  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n)  {  normalizeInitializer(n,  null,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n)  {  normalizeInitializer(n,  null,  null);	  NodeUtil.removeChild(parent,    n)    	non-compiled	[CE]  <identifier>  expected	194	None	replace
1375	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
1376	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(parent);  }  [CE]  <identifier>  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(parent);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(parent);  }	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
1377	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(parent);  }  [CE]  <identifier>  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(parent);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(parent);  }	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
1378	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  n.getType());  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  n.getType());  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,  n,  parent,  n.getType());	  doStatementNormalizations(t,    n,    parent);    	non-compiled	[CE]  <identifier>  expected	144	None	replace
1379	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  n);  [CE]  <identifier>  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,  n,  parent,  n);	  doStatementNormalizations(t,    n,    parent);    	non-compiled	[CE]  <identifier>  expected	144	None	replace
1380	[BUG]  [BUGGY]  conductNormalization(t,  n,  parent,  null);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  conductNormalization(t,  n,  parent,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	conductNormalization(t,  n,  parent,  null);	  conductNormalization(t,    n,    parent);    	non-compiled	[CE]  <identifier>  expected	261	None	replace
1381	[BUG]  [BUGGY]  conductNormalization(t,  n,  parent,  false);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  conductNormalization(t,  n,  parent,  false);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	conductNormalization(t,  n,  parent,  false);	  conductNormalization(t,    n,    parent);    	non-compiled	[CE]  <identifier>  expected	261	None	replace
1382	[BUG]  [BUGGY]  conductNormalization(t,  n,  parent,  nameNode);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  conductNormalization(t,  n,  parent,  nameNode);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	conductNormalization(t,  n,  parent,  nameNode);	  conductNormalization(t,    n,    parent);    	non-compiled	[CE]  <identifier>  expected	261	None	replace
1383	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  expectedConstants);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  expectedConstants);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  expectedConstants);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    arguments);    	non-compiled	[CE]  <identifier>  expected	115	None	replace
1384	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(n,  parent);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(n,  parent);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(n,    parent);    NodeUtil.removeChild(n,  parent);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  <identifier>  expected	11	None	add
1385	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(n,  parent);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [CE]  <identifier>  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(n,  parent);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(n,    parent);    NodeUtil.removeChild(n,  parent);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  <identifier>  expected	11	None	add
1386	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(n,  parent);  if(NodeUtil.isStatementBlock(n))  {  breakVarDeclarations(n);  }  [CE]  <identifier>  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(n,  parent);  if(NodeUtil.isStatementBlock(n))  {  breakVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(n,    parent);    NodeUtil.removeChild(n,  parent);  if(NodeUtil.isStatementBlock(n))  {  breakVarDeclarations(n);  }	  	non-compiled	[CE]  <identifier>  expected	11	None	add
1387	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(n,  parent);  if(NodeUtil.isStatementBlock(n))  {  removeVarDeclarations(n);  }  [CE]  <identifier>  expected  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(n,  parent);  if(NodeUtil.isStatementBlock(n))  {  removeVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(n,    parent);    NodeUtil.removeChild(n,  parent);  if(NodeUtil.isStatementBlock(n))  {  removeVarDeclarations(n);  }	  	non-compiled	[CE]  <identifier>  expected	11	None	add
1388	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(n,  parent);  if(NodeUtil.isStatementBlock(parent))  {  breakVarDeclarations(n);  }  [CE]  <identifier>  expected  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(n,  parent);  if(NodeUtil.isStatementBlock(parent))  {  breakVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(n,    parent);    NodeUtil.removeChild(n,  parent);  if(NodeUtil.isStatementBlock(parent))  {  breakVarDeclarations(n);  }	  	non-compiled	[CE]  <identifier>  expected	11	None	add
1389	[BUG]  [BUGGY]  Node  v  =  parent.getFirstChild();  Node  v  =  parent.getfirstChild();  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  parent.getFirstChild();  Node  v  =  parent.getfirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    parent.getFirstChild();    Node  v  =  parent.getfirstChild();	  	non-compiled	[CE]  <identifier>  expected	23	None	add
1390	[BUG]  [BUGGY]  Node  v  =  parent.getFirstChild();  v  =  parent.getFirstChild();  [CE]  <identifier>  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  parent.getFirstChild();  v  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    parent.getFirstChild();    v  =  parent.getFirstChild();	  	non-compiled	[CE]  <identifier>  expected	23	None	add
1391	[BUG]  [BUGGY]  Node  v  =  parent.getFirstChild();  Name  v  =  parent.getFirstChild();  [CE]  <identifier>  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  parent.getFirstChild();  Name  v  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    parent.getFirstChild();    Name  v  =  parent.getFirstChild();	  	non-compiled	[CE]  <identifier>  expected	23	None	add
1392	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());	  	non-compiled	[CE]  <identifier>  expected	258	None	add
1393	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Node  n  =  t.getModule();  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [CE]  <identifier>  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Node  n  =  t.getModule();  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Node  n  =  t.getModule();  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());	  	non-compiled	[CE]  <identifier>  expected	258	None	add
1394	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Context.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [CE]  <identifier>  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Context.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Context.checkState(n.getType()  ==  Token.NAME,  t.getModule());	  	non-compiled	[CE]  <identifier>  expected	258	None	add
1395	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  <identifier>  expected	171	None	add
1396	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  <identifier>  expected	175	None	add
1397	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  <identifier>  expected	175	None	add
1398	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
1399	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  parent.getCompiler().reportCodeChange();  [CE]  <identifier>  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  parent.getCompiler().reportCodeChange();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  parent.getCompiler().reportCodeChange();	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  <identifier>  expected	283	None	replace
1400	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  <identifier>  expected	190	None	add
1401	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  <identifier>  expected	190	None	add
1402	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.LABEL);  [CE]  <identifier>  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.LABEL);	  	non-compiled	[CE]  <identifier>  expected	190	None	add
1403	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  <identifier>  expected	190	None	add
1404	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    moveNamedFunctions(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	301	None	replace
1405	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getFirstChild  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getFirstChild  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getFirstChild	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    moveNamedFunctions(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	301	None	replace
1406	[BUG]  [BUGGY]  NodeUtil.isName(n)||  parent.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isName(n)||  parent.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isName(n)||  parent.getType()  ==  Token.NAME);	          NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	241	None	replace
1407	[BUG]  [BUGGY]  MutableStatement.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableStatement.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableStatement.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));	  extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  ')'  expected	57	None	replace
1408	[BUG]  [BUGGY]  MutableStatement.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableStatement.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableStatement.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));	  extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  ')'  expected	57	None	replace
1409	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RangeTicklingCallback());  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RangeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  RangeTicklingCallback());	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  ')'  expected	121	None	replace
1410	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  ';'  expected	187	None	add
1411	[BUG]  [BUGGY]  Preconditions.checkState(compiler!=  null);  Compiler  compiler  =  t.getCompiler();  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(compiler!=  null);  Compiler  compiler  =  t.getCompiler();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(compiler!=  null);  Compiler  compiler  =  t.getCompiler();	          NodeTraversal.traverse(compiler,    n,    this);    Compiler    compiler    =    t.getCompiler();    	non-compiled	[CE]  ';'  expected	84	None	replace
1412	[BUG]  [BUGGY]  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();  Node  parent  =  n.getParent();  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();  Node  parent  =  n.getParent();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,        parent,        null);        t.getCompiler().reportCodeChange();    Node  parent  =  n.getParent();	  	non-compiled	[CE]  ';'  expected	303	None	add
1413	[BUG]  [BUGGY]  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();  Node  parent  =  n.getLastChild();  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();  Node  parent  =  n.getLastChild();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,        parent,        null);        t.getCompiler().reportCodeChange();    Node  parent  =  n.getLastChild();	  	non-compiled	[CE]  ';'  expected	303	None	add
1414	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  ';'  expected	268	None	add
1415	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  illegal  start  of  expression	268	None	add
1416	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  illegal  start  of  expression	268	None	add
1417	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Node  parent  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Node  parent  =  n.getParent();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Node  parent  =  n.getParent();	  	non-compiled	[CE]  illegal  start  of  expression	268	None	add
1418	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.LABEL);	          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
1419	[BUG]  [BUGGY]  extractForInitializer(parent,  n,  false);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(parent,  n,  false);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,  n,  false);	  extractForInitializer(n,    parent,    false);    	non-compiled	[CE]  illegal  start  of  expression	213	None	replace
1420	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent);  Context.reportCodeChange();  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent);  Context.reportCodeChange();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent);  Context.reportCodeChange();	  extractForInitializer(parent,    null,    null);    Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	54	None	replace
1421	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  null,  parent);  Context.reportCodeChange();  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  null,  parent);  Context.reportCodeChange();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  null,  parent);  Context.reportCodeChange();	  extractForInitializer(parent,    null,    null);    Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	54	None	replace
1422	[BUG]  [BUGGY]  MutableStatement.reportCodeChange();  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableStatement.reportCodeChange();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableStatement.reportCodeChange();	  extractForInitializer(parent,    null,    null);    Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	54	None	replace
1423	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  false);  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  false);  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  false);  Context.checkState(n.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  ';'  expected	126	None	replace
1424	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  ';'  expected	73	None	add
1425	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getLastChild();  preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getLastChild();  preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Node  parent  =  n.getLastChild();  preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  ';'  expected	73	None	add
1426	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  NodeUtil.newVarDeclaration(n),  this);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  NodeUtil.newVarDeclaration(n),  this);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  NodeUtil.newVarDeclaration(n),  this);	  MutableNodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  ';'  expected	138	None	replace
1427	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  NodeUtil.getFunctionDeclaration(n),  this);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  NodeUtil.getFunctionDeclaration(n),  this);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  NodeUtil.getFunctionDeclaration(n),  this);	  MutableNodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  ';'  expected	138	None	replace
1428	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  node,  this);  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  node,  this);	  MutableNodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  ';'  expected	138	None	replace
1429	[BUG]  [BUGGY]  Node  parent  =  n.getPreviousChild();  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  parent  =  n.getPreviousChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  parent  =  n.getPreviousChild();	  Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	37	None	replace
1430	[BUG]  [BUGGY]          n    =    n.getLastChild();    n  =  n.getFirstChild();  =  n.getLastChild();  n  =  n.getFirstChild();  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getFirstChild();  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getLastChild();        n    =    n.getFirstChild();    =  n.getLastChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  ';'  expected	148	None	add
1431	[BUG]  [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  n.getfirstChild();  n  =  n.getLastChild();  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  n.getfirstChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getLastChild();        n    =    n.getLastChild();    n  =  n.getfirstChild();  n  =  n.getLastChild();	  	non-compiled	[CE]  ';'  expected	145	None	add
1432	[BUG]  [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  parent.getLastChild();  n  =  n.getLastChild();  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  parent.getLastChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getLastChild();        n    =    n.getLastChild();    n  =  parent.getLastChild();  n  =  n.getLastChild();	  	non-compiled	[CE]  ';'  expected	145	None	add
1433	[BUG]  [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  n.getLastChild();  n  =  n.getFirstChild();  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getLastChild();        n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  ';'  expected	145	None	add
1434	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  ';'  expected	218	None	add
1435	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations	  	non-compiled	[CE]  ';'  expected	218	None	add
1436	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  preconditions.checkState(n.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	86	None	replace
1437	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  preconditions.checkState(n.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  ';'  expected	225	None	replace
1438	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	non-compiled	[CE]  ';'  expected	161	None	add
1439	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNKNOWN));  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNKNOWN));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNKNOWN));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  ';'  expected	248	None	replace
1440	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNKNOWN));  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNKNOWN));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNKNOWN));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  ';'  expected	248	None	replace
1441	[BUG]  [BUGGY]  ExtractForNormalization(t,  n,  parent,  true);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForNormalization(t,  n,  parent,  true);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForNormalization(t,  n,  parent,  true);	  extractForNormalization(t,    n,    parent,    false);    	non-compiled	[CE]  ';'  expected	236	None	replace
1442	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	43	None	replace
1443	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  this);  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  this);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    t);    	non-compiled	[CE]  ';'  expected	116	None	replace
1444	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  null);  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    t);    	non-compiled	[CE]  ';'  expected	116	None	replace
1445	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  ';'  expected	69	None	add
1446	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  	69	None	add
1447	[BUG]  [BUGGY]  Préconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Préconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Préconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	221	None	replace
1448	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    n,    parent,    this,    constantMap);    	non-compiled	[CE]  	296	None	replace
1449	[BUG]  [BUGGY]  translateForInitializer(t,  n,  parent,  argumentMap);  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateForInitializer(t,  n,  parent,  argumentMap);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateForInitializer(t,  n,  parent,  argumentMap);	  translateForInitializer(t,    n,    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	155	None	replace
1450	[BUG]  [BUGGY]  translateForInitializer(t,  n,  parent,  isConst);  [CE]  class,  interface,  or  enum  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateForInitializer(t,  n,  parent,  isConst);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateForInitializer(t,  n,  parent,  isConst);	  translateForInitializer(t,    n,    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	155	None	replace
1451	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  class,  interface,  or  enum  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	add
1452	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  class,  interface,  or  enum  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  class,  interface,  or  enum  expected	178	None	replace
1453	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  class,  interface,  or  enum  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	185	None	add
1454	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [CE]  class,  interface,  or  enum  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	185	None	add
1455	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [CE]  class,  interface,  or  enum  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	185	None	add
1456	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n.getLastChild());  NodeUtil.addChildToFront(parent,  n.getLastChild());  [CE]  class,  interface,  or  enum  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n.getLastChild());  NodeUtil.addChildToFront(parent,  n.getLastChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,    n.getLastChild());    NodeUtil.addChildToFront(parent,  n.getLastChild());	  	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	add
1457	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false,  this);  [CE]  class,  interface,  or  enum  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false,  this);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	229	None	replace
1458	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false,  true);  [CE]  class,  interface,  or  enum  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false,  true);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false,  true);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	229	None	replace
1459	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  class,  interface,  or  enum  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	add
1460	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  illegal  start  of  type	44	None	add
1461	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  type	44	None	add
1462	[BUG]  [BUGGY]  Node  no  =  n.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  no  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  no  =  n.getFirstChild();	          n    =    n.getFirstChild();    no    =    n.getFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
1463	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  null,  expectedConst);  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  null,  expectedConst);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  null,  expectedConst);	  NodeTraversal.traverse(compiler,    n,    parent,    this,    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	297	None	replace
1464	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  class,  interface,  or  enum  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
1465	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  class,  interface,  or  enum  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
1466	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
1467	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(parent);  }  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(parent);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(parent);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
1468	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  null);  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  null);  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  null);  Context.checkState(n.getType()  ==  Token.VAR);	  extractForInitializer(n,    parent,    null);    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
1469	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(n.getType()  ==  Token.VAR);	  extractForInitializer(n,    parent,    null);    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
1470	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  null);  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  class,  interface,  or  enum  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  null);  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  null);  Context.checkState(n.getType()  ==  Token.VAR);	  extractForInitializer(n,    parent,    null);    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
1471	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);	  MutableNodeTraversal.traverse(compiler,    n,    parent,    argument);    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
1472	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  this);  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  this);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  class,  interface,  or  enum  expected	255	None	replace
1473	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  constantMap);  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  constantMap);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  constantMap);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  class,  interface,  or  enum  expected	255	None	replace
1474	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  null,  this);  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  null,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  null,  this);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  class,  interface,  or  enum  expected	255	None	replace
1475	[BUG]  [BUGGY]  n  =  n.getFirstChild();  ||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  [CE]  class,  interface,  or  enum  expected  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  n.getFirstChild();  ||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  n.getFirstChild();  ||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	250	None	replace
1476	[BUG]  [BUGGY]  n  =  parent.getLastChild();  ||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  [CE]  class,  interface,  or  enum  expected  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getLastChild();  ||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  parent.getLastChild();  ||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	250	None	replace
1477	[BUG]  [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function  f()  {  arguments=Array.prototype.slice.call(arguments  ==	  function    f()    {    arguments=Array.prototype.slice.call(n    ==    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
1478	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  n.getFirstChild());  [CE]  class,  interface,  or  enum  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  n.getFirstChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(n,  n.getFirstChild());	  NodeUtil.removeChild(parent,    n.getFirstChild());    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
1479	[BUG]  [BUGGY]  translateNormalization(t,  n,  parent,  false);  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateNormalization(t,  n,  parent,  false);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateNormalization(t,  n,  parent,  false);	  translateNormalization(t,    n,    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	262	None	replace
1480	[BUG]  [BUGGY]  translateNormalization(t,  n,  parent,  null);  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateNormalization(t,  n,  parent,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateNormalization(t,  n,  parent,  null);	  translateNormalization(t,    n,    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	262	None	replace
1481	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  class,  interface,  or  enum  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	165	None	add
1482	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	165	None	add
1483	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	70	None	replace
1484	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  ==  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  ==  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function()  {  arguments=Array.prototype.slice.call(arguments  ==	  function()    {    arguments=Array.prototype.slice.call(n    ==    	non-compiled	[CE]  not  a  statement	53	None	replace
1485	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  >>  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  >>  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function()  {  arguments=Array.prototype.slice.call(arguments  >>	  function()    {    arguments=Array.prototype.slice.call(n    ==    	non-compiled	[CE]  not  a  statement	53	None	replace
1486	[BUG]  [BUGGY]  MutableStatement.checkState(n.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableStatement.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableStatement.checkState(n.getType()  ==  Token.VAR);	  extractForInitializer(parent,    null,    null);    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	287	None	replace
1487	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  input));  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  input));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  input));	  extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  not  a  statement	59	None	replace
1488	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);	          NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.FUNCTION)    {    normalizeVarDeclarations(n);    	non-compiled	[CE]  not  a  statement	240	None	replace
1489	[BUG]  [BUGGY]  Node  v  =  n.getFirstChild();  FunctionNode  v  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getFirstChild();  FunctionNode  v  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  n.getFirstChild();  FunctionNode  v  =  parent.getFirstChild();	          Node    v    =    n.getFirstChild();    FunctionNode    v    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	89	None	replace
1490	[BUG]  [BUGGY]  n  =  parent.getLastChild();  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getLastChild();  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n    =    parent.getLastChild();    ||  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  not  a  statement	98	None	add
1491	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  parent);  NodeUtil.isStatementBlock(n.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  parent);  NodeUtil.isStatementBlock(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR,  parent);  NodeUtil.isStatementBlock(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeUtil.isStatementBlock(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	267	None	replace
1492	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(parent,  n.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isStatementBlock(parent,  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isStatementBlock(parent,  n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeUtil.isStatementBlock(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	267	None	replace
1493	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.isStatementBlock(parent.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.isStatementBlock(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  NodeUtil.isStatementBlock(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeUtil.isStatementBlock(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	267	None	replace
1494	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  not  a  statement	19	None	add
1495	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  not  a  statement	19	None	add
1496	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  if(NodeUtil.isStatementBlock(n))  {  breakVarDeclarations(n);  }  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  if(NodeUtil.isStatementBlock(n))  {  breakVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  if(NodeUtil.isStatementBlock(n))  {  breakVarDeclarations(n);  }	  	non-compiled	[CE]  not  a  statement	19	None	add
1497	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  if(NodeUtil.isStatementBlock(parent))  {  breakVarDeclarations(n);  }  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  if(NodeUtil.isStatementBlock(parent))  {  breakVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  if(NodeUtil.isStatementBlock(parent))  {  breakVarDeclarations(n);  }	  	non-compiled	[CE]  not  a  statement	19	None	add
1498	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  if(NodeUtil.isStatementBlock(n))  {  removeVarDeclarations(n);  }  [CE]  not  a  statement  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  if(NodeUtil.isStatementBlock(n))  {  removeVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  if(NodeUtil.isStatementBlock(n))  {  removeVarDeclarations(n);  }	  	non-compiled	[CE]  not  a  statement	19	None	add
1499	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
1500	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
1501	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(parent);  }  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(parent);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(parent);  }	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
1502	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
1503	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(n,  t));  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(n,  t));  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(n,  t));	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(t));    	non-compiled	[CE]  not  a  statement	117	None	replace
1504	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  registry));  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  registry));  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  registry));	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(t));    	non-compiled	[CE]  not  a  statement	117	None	replace
1505	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  _factory));  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  _factory));  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  _factory));	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(t));    	non-compiled	[CE]  not  a  statement	117	None	replace
1506	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(this,  t));  [CE]  not  a  statement  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(this,  t));  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(this,  t));	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(t));    	non-compiled	[CE]  not  a  statement	117	None	replace
1507	[BUG]  [BUGGY]  translateForNormalization(t,  n,  parent,  argumentMap);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateForNormalization(t,  n,  parent,  argumentMap);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateForNormalization(t,  n,  parent,  argumentMap);	  translateForNormalization(t,    n,    parent);    	non-compiled	[CE]  not  a  statement	140	None	replace
1508	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  null,  this);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  null,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  null,  this);	  	non-compiled	[CE]  not  a  statement	78	None	add
1509	[BUG]  [BUGGY]  n  =  n.getFirstChild();  ||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  n.getFirstChild();  ||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  n.getFirstChild();  ||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    normalizeVarDeclarations(n);    	non-compiled	[CE]  not  a  statement	252	None	replace
1510	[BUG]  [BUGGY]  n  =  parent.getLastChild();  ||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getLastChild();  ||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  parent.getLastChild();  ||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    normalizeVarDeclarations(n);    	non-compiled	[CE]  not  a  statement	252	None	replace
1511	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(parent.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(parent.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	306	None	replace
1512	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  	169	None	add
1513	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [CE]  class,  interface,  or  enum  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	169	None	add
1514	[BUG]  [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n  +  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n  +  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function  f()  {  arguments=Array.prototype.slice.call(n  +	          function    f()    {    arguments=Array.prototype.slice.call(n!=    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
1515	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDe  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDe  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDe	  	non-compiled	[CE]  <identifier>  expected	46	None	add
1516	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  new  ScopeTicklingCallback(),  this);  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  new  ScopeTicklingCallback(),  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false,  new  ScopeTicklingCallback(),  this);	  NodeTraversal.traverse(compiler,    n,    parent,    false,    new    ScopeTicklingCallback());    	non-compiled	[CE]  <identifier>  expected	119	None	replace
1517	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  new  ScopeTicklingCallback(),  t);  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  new  ScopeTicklingCallback(),  t);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  new  ScopeTicklingCallback(),  t);	  NodeTraversal.traverse(compiler,    n,    parent,    this,    new    ScopeTicklingCallback());    	non-compiled	[CE]  <identifier>  expected	228	None	replace
1518	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent  =  n.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent  =  n.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Node  parent  =  n.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  <identifier>  expected	173	None	add
1519	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Node  parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	173	None	add
1520	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Node  parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	173	None	add
1521	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  n);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  not  a  statement	205	None	add
1522	[BUG]  [BUGGY]  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Context.checkState(parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Context.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,        null,        null);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Context.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	288	None	add
1523	[BUG]  [BUGGY]  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getLastChild();  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getLastChild();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,        null,        null);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  parent  =  n.getLastChild();	  	non-compiled	[CE]  not  a  statement	288	None	add
1524	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  not  a  statement	134	None	add
1525	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	134	None	add
1526	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  nodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  nodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        new        ScopeTicklingCallback());        t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  nodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();	  	non-compiled	[CE]  not  a  statement	282	None	add
1527	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  nodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  nodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        new        ScopeTicklingCallback());        t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  nodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	  	non-compiled	[CE]  not  a  statement	282	None	add
1528	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTickingCallback());  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTickingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTickingCallback());	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    FunctionNodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  not  a  statement	122	None	replace
1529	[BUG]  [BUGGY]  parseForNormalization(t,  n,  parent,  nameNode);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  parseForNormalization(t,  n,  parent,  nameNode);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	parseForNormalization(t,  n,  parent,  nameNode);	  parseForNormalization(t,    n,    parent);    	non-compiled	[CE]  not  a  statement	142	None	replace
1530	[BUG]  [BUGGY]  parseForNormalization(t,  n,  parent,  null);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  parseForNormalization(t,  n,  parent,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	parseForNormalization(t,  n,  parent,  null);	  parseForNormalization(t,    n,    parent);    	non-compiled	[CE]  not  a  statement	142	None	replace
1531	[BUG]  [BUGGY]  parseForNormalization(t,  n,  parent,  false);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  parseForNormalization(t,  n,  parent,  false);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	parseForNormalization(t,  n,  parent,  false);	  parseForNormalization(t,    n,    parent);    	non-compiled	[CE]  not  a  statement	142	None	replace
1532	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	292	None	add
1533	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Node  parent  =  n.getParent();  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Node  parent  =  n.getParent();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Node  parent  =  n.getParent();	  	non-compiled	[CE]  not  a  statement	292	None	add
1534	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	292	None	add
1535	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	292	None	add
1536	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  n);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalization(t,  n,  parent,  n);	  doStatementNormalization(t,    n,    parent);    	non-compiled	[CE]  not  a  statement	141	None	replace
1537	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  null);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalization(t,  n,  parent,  null);	  doStatementNormalization(t,    n,    parent);    	non-compiled	[CE]  not  a  statement	141	None	replace
1538	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  false);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  false);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalization(t,  n,  parent,  false);	  doStatementNormalization(t,    n,    parent);    	non-compiled	[CE]  not  a  statement	141	None	replace
1539	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	non-compiled	[CE]  not  a  statement	131	None	add
1540	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  scope);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  scope);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  scope);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    predicate);    	non-compiled	[CE]  not  a  statement	295	None	replace
1541	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  expectedConstants);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  expectedConstants);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  expectedConstants);	  NodeTraversal.traverse(compiler,    n,    parent,    this,    arguments);    	non-compiled	[CE]  not  a  statement	1	None	replace
1542	[BUG]  [BUGGY]  extractForInitializer(t,  n,  parent,  n);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(t,  n,  parent,  n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  n,  parent,  n);	  extractForInitializer(t,    n,    parent);    	non-compiled	[CE]  	152	None	replace
1543	[BUG]  [BUGGY]  extractForInitializer(t,  n,  parent,  nameNode);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(t,  n,  parent,  nameNode);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  n,  parent,  nameNode);	  extractForInitializer(t,    n,    parent);    	non-compiled	[CE]  	152	None	replace
1544	[BUG]  [BUGGY]  &&  n.getType()  ==  Token.VAR)  {  arguments=Array.prototype.slice.call(arguments  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  &&  n.getType()  ==  Token.VAR)  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	&&  n.getType()  ==  Token.VAR)  {  arguments=Array.prototype.slice.call(arguments	  ||    n.getType()    ==    Token.VAR)    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  	50	None	replace
1545	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  	191	None	replace
1546	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [CE]  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  	191	None	replace
1547	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  breakVarDeclarations(n);  }  [CE]  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  breakVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  breakVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  	191	None	replace
1548	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  node.getFirstChild();  n  =  n.getFirstChild();  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  node.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Node        v        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  v  =  node.getFirstChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  	92	None	add
1549	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  parent.getFirstChild();  n  =  n.getFirstChild();  [CE]  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  parent.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Node        v        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  v  =  parent.getFirstChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  	92	None	add
1550	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	176	None	replace
1551	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.NAME);  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()!=  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  	162	None	replace
1552	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()!=  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  	162	None	replace
1553	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  	102	None	add
1554	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [CE]  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  	102	None	add
1555	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  [CE]  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    new    ScopeTicklingCallback());    Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());	  	non-compiled	[CE]  	102	None	add
1556	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  if(NodeUtil.isStatementBlock(n))  {  breakVarDeclarations(n);  }  [CE]  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  if(NodeUtil.isStatementBlock(n))  {  breakVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  if(NodeUtil.isStatementBlock(n))  {  breakVarDeclarations(n);  }	  	non-compiled	[CE]  	102	None	add
1557	[BUG]  [BUGGY]  ExtractForInitializer(t,  n,  parent,  argumentMap);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForInitializer(t,  n,  parent,  argumentMap);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForInitializer(t,  n,  parent,  argumentMap);	  ExtractForInitializer(t,    n,    parent);    	non-compiled	[CE]  	153	None	replace
1558	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  parent  =  n.getFirstChild()  +  1;  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  parent  =  n.getFirstChild()  +  1;	  Node    parent    =    n.getParent()    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
1559	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  parent);  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  parent);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	104	None	replace
1560	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  class,  interface,  or  enum  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	add
1561	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  class,  interface,  or  enum  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	add
1562	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  class,  interface,  or  enum  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	add
1563	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations  [CE]  class,  interface,  or  enum  expected  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations	  	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	add
1564	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe  [CE]  class,  interface,  or  enum  expected  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe	  	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	add
1565	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  class,  interface,  or  enum  expected	304	None	replace
1566	[BUG]  [BUGGY]  Node  v  =  getVarDeclarations(n.getFirstChild());  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  getVarDeclarations(n.getFirstChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  getVarDeclarations(n.getFirstChild());	  Node    v    =    node.getFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
1567	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  false);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  false);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  false);  Context.checkState(n.getType()  ==  Token.FUNCTION);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
1568	[BUG]  [BUGGY]  Node  v  =  n.getFirstChild();  Node  v  =  v.getLastChild();  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getFirstChild();  Node  v  =  v.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  n.getFirstChild();  Node  v  =  v.getLastChild();	          Node    v    =    n.getFirstChild();    Node    v    =    n.getLastChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	88	None	replace
1569	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n)&  NodeUtil.addChildToFront(parent,  n);  [CE]  class,  interface,  or  enum  expected  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n)&  NodeUtil.addChildToFront(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n)&  NodeUtil.addChildToFront(parent,  n);	          NodeUtil.removeChild(parent,    n);    NodeUtil.addChildToFront(parent,    n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	204	None	replace
1570	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [CE]  class,  interface,  or  enum  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	186	None	replace
1571	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [CE]  class,  interface,  or  enum  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	186	None	replace
1572	[BUG]  [BUGGY]  n.getLastChild().getString().endsWith( "_ "))  {  throw  new  IllegalStateException( " ");  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n.getLastChild().getString().endsWith( "_ "))  {  throw  new  IllegalStateException( " ");  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n.getLastChild().getString().endsWith( "_ "))  {  throw  new  IllegalStateException( " ");	          n.getLastChild().getString().endsWith(   "__   "))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  class,  interface,  or  enum  expected	275	None	replace
1573	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n  +  1,  n.getLastChild());  [CE]  class,  interface,  or  enum  expected  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n  +  1,  n.getLastChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n  +  1,  n.getLastChild());	  NodeUtil.removeChild(parent,    n    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
1574	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  parent.getFirstChild();  n  =  n.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  parent.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  parent.getFirstChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	add
1575	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  parent,  this,  null);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  parent,  this,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  parent,  this,  null);	  MutableNodeTraversal.traverse(compiler,    n,    this,    null);    	non-compiled	[CE]  ')'  expected	294	None	replace
1576	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  ')'  expected	177	None	add
1577	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  ')'  expected	177	None	add
1578	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  ')'  expected	179	None	add
1579	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();  n  =  n.getLastChild()  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();  n  =  n.getLastChild()  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  n.getLastChild()	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
1580	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  n  =  n.getfirstChild();  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getFirstChild();  n  =  n.getfirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  parent.getFirstChild();  n  =  n.getfirstChild();	          n    =    n.getFirstChild();    n    =    n.getfirstChild();    	non-compiled	[CE]  illegal  start  of  expression	208	None	replace
1581	[BUG]  [BUGGY]  n  =  n.getFirstChild();  ||  n.getType()  ==  Token.FUNCTION)  {  break;  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  n.getFirstChild();  ||  n.getType()  ==  Token.FUNCTION)  {  break;  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  n.getFirstChild();  ||  n.getType()  ==  Token.FUNCTION)  {  break;	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
1582	[BUG]  [BUGGY]  n  =  parent.getLastChild();  ||  n.getType()  ==  Token.FUNCTION)  {  break;  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getLastChild();  ||  n.getType()  ==  Token.FUNCTION)  {  break;  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  parent.getLastChild();  ||  n.getType()  ==  Token.FUNCTION)  {  break;	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
1583	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  ||  n.getType()  ==  Token.FUNCTION)  {  break;  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getFirstChild();  ||  n.getType()  ==  Token.FUNCTION)  {  break;  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  parent.getFirstChild();  ||  n.getType()  ==  Token.FUNCTION)  {  break;	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
1584	[BUG]  [BUGGY]  Node  v  =  n.getLastChild();  Node  v  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getLastChild();  Node  v  =  node.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.getLastChild();    Node  v  =  node.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
1585	[BUG]  [BUGGY]  Préconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Préconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Préconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
1586	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function()  {  arguments=Array.prototype.slice.call(arguments  }	  function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
1587	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
1588	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
1589	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  1);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  1);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  1);	          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    n);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
1590	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  illegal  start  of  expression	165	None	add
1591	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(t.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(t.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(t.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  illegal  start  of  expression	165	None	add
1592	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  null,  arguments);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  null,  arguments);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  null,  arguments);	  NodeTraversal.traverse(compiler,    n,    parent,    this,    null);    	non-compiled	[CE]  illegal  start  of  expression	297	None	replace
1593	[BUG]  [BUGGY]  n  =  n.getFirstChild();  n  =  parent.getfirstChild();  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  n.getFirstChild();  n  =  parent.getfirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  n.getFirstChild();  n  =  parent.getfirstChild();	          n    =    n.getFirstChild();    n    =    n.getfirstChild();    	non-compiled	[CE]  illegal  start  of  expression	208	None	replace
1594	[BUG]  [BUGGY]  TraverseRenderer.traverse(compiler,  n,  this);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  TraverseRenderer.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	TraverseRenderer.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
1595	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  illegal  start  of  expression	175	None	add
1596	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  illegal  start  of  expression	171	None	add
1597	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));	  Context.report(JSError.make(t,    n,    CONVERT_WHILE_TO_FOR));    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
1598	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(n,  parent);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	206	None	replace
1599	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  parent,  this,  n);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  parent,  this,  n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  parent,  this,  n);	  MutableNodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
1600	[BUG]  [BUGGY]  Node  v  =  n.removeFirstChild();  Node  v  =  no.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.removeFirstChild();  Node  v  =  no.removeFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.removeFirstChild();    Node  v  =  no.removeFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	278	None	add
1601	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this);  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this);  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this);  Context.checkState(n.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
1602	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isVarDeclarations(parent))  {  splitVarDeclarations(n);  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isVarDeclarations(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isVarDeclarations(parent))  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
1603	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDe  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDe  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDe	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
1604	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n)  {  ';'  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n)  {  ';'  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n)  {  ';'	  NodeUtil.removeChild(parent,    n)    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
1605	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this);  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this);  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this);  Context.checkState(n.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
1606	[BUG]  [BUGGY]  Node  parent  =  n.getParent()  *  1;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  parent  =  n.getParent()  *  1;  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  parent  =  n.getParent()  *  1;	  Node    parent    =    n.getParent()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
1607	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  illegal  start  of  expression	219	None	replace
1608	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  ')'  expected	219	None	replace
1609	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  ')'  expected	219	None	replace
1610	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false,  dataArea);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false,  dataArea);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false,  dataArea);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    false);    	non-compiled	[CE]  ')'  expected	229	None	replace
1611	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()!=  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  ')'  expected	223	None	replace
1612	[BUG]  [BUGGY]  n  =  n.getfirstChild();  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  n.getfirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  n.getfirstChild();	  n    =    parent.getLastChild();    	non-compiled	[CE]  ')'  expected	99	None	replace
1613	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this);  parent.replaceChild(n,  new  NodeTraversal(compiler));  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this);  parent.replaceChild(n,  new  NodeTraversal(compiler));  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this);  parent.replaceChild(n,  new  NodeTraversal(compiler));	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    parent.replaceChild(n,    new    NodeTraversal(compiler));    	non-compiled	[CE]  ')'  expected	245	None	replace
1614	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  parent.replaceChild(n,  new  NodeTraversal(compiler));  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Traversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  parent.replaceChild(n,  new  NodeTraversal(compiler));  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Traversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  parent.replaceChild(n,  new  NodeTraversal(compiler));	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    parent.replaceChild(n,    new    NodeTraversal(compiler));    	non-compiled	[CE]  ')'  expected	245	None	replace
1615	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDe  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDe  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDe	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  ')'  expected	135	None	replace
1616	[BUG]  [BUGGY]  Node  v  =  n.getFirstChild();  Function  v  =  n,  parent.getFirstChild();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getFirstChild();  Function  v  =  n,  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  n.getFirstChild();  Function  v  =  n,  parent.getFirstChild();	          Node    v    =    n.getFirstChild();    Function    v    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	91	None	replace
1617	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.FUNCTION);    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  ')'  expected	280	None	replace
1618	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  normalizeVarDeclarations(n);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  normalizeVarDeclarations(n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  this,  normalizeVarDeclarations(n);	  MutableNodeTraversal.traverse(compiler,    n,    this,    parent);    	non-compiled	[CE]  ')'  expected	137	None	replace
1619	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  normalizeVarDeclarations(n));  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  normalizeVarDeclarations(n));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  this,  normalizeVarDeclarations(n));	  MutableNodeTraversal.traverse(compiler,    n,    this,    parent);    	non-compiled	[CE]  ')'  expected	137	None	replace
1620	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(t.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(t.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(t.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  ')'  expected	231	None	add
1621	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent);  t.report(n,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent);  t.report(n,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,    n,    parent);    t.report(n,  MAKE_LOCAL_NAMES_UNIQUE);	  	non-compiled	[CE]  ')'  expected	143	None	add
1622	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent);  t.report(JSError.make(t,  n,  parent));  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent);  t.report(JSError.make(t,  n,  parent));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,    n,    parent);    t.report(JSError.make(t,  n,  parent));	  	non-compiled	[CE]  ')'  expected	143	None	add
1623	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent);  t.report(n,  INVALID_NAMES_UNIQUE);  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent);  t.report(n,  INVALID_NAMES_UNIQUE);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,    n,    parent);    t.report(n,  INVALID_NAMES_UNIQUE);	  	non-compiled	[CE]  ')'  expected	143	None	add
1624	[BUG]  [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function  f()  {  arguments=Array.prototype.slice.call(arguments!=	  function    f()    {    arguments=Array.prototype.slice.call(n    ==    	non-compiled	[CE]  ')'  expected	52	None	replace
1625	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDe  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDe  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDe	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  ')'  expected	164	None	replace
1626	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isVarDeclarations(n))  {  splitVarDeclarations(n);  }  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isVarDeclarations(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isVarDeclarations(n))  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  ')'  expected	186	None	replace
1627	[BUG]  [BUGGY]  Node  v  =  n.getNext();  Node  v  =  parent.getNext();  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getNext();  Node  v  =  parent.getNext();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.getNext();    Node  v  =  parent.getNext();	  	non-compiled	[CE]  ')'  expected	25	None	add
1628	[BUG]  [BUGGY]  Node  v  =  n.getNext();  Node  v  =  no.getNext();  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getNext();  Node  v  =  no.getNext();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node    v    =    n.getNext();    Node  v  =  no.getNext();	  	non-compiled	[CE]  	25	None	add
1629	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(n,  parent.getType()  ==  Token.FUNCTION);  [CE]  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(n,  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(n,  parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    NodeUtil.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	300	None	replace
1630	[BUG]  [BUGGY]  parseNormalization(t,  n,  parent,  arguments);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  parseNormalization(t,  n,  parent,  arguments);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	parseNormalization(t,  n,  parent,  arguments);	  parseForNormalization(t,    n,    parent);    	non-compiled	[CE]  	142	None	replace
1631	[BUG]  [BUGGY]  parseForNormalization(t,  n,  parent,  isConst);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  parseForNormalization(t,  n,  parent,  isConst);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	parseForNormalization(t,  n,  parent,  isConst);	  parseForNormalization(t,    n,    parent);    	non-compiled	[CE]  	142	None	replace
1632	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  that);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  that);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  that);  NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  	78	None	add
1633	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  nodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  nodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        NodeTraversal.traverse(compiler,    n,    this);    nodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  	78	None	add
1634	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  	78	None	add
1635	[BUG]  [BUGGY]          n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  parent.getLastChild();  n  =  n.getFirstChild();  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  parent.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getLastChild();        n    =    n.getFirstChild();    n  =  parent.getLastChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  	148	None	add
1636	[BUG]  [BUGGY]          n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  parent.getFirstChild();  n  =  n.getFirstChild();  [CE]  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  parent.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getLastChild();        n    =    n.getFirstChild();    n  =  parent.getFirstChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  	148	None	add
1637	[BUG]  [BUGGY]  NodeUtil.isNamedFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isNamedFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isNamedFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);	          NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.FUNCTION)    {    normalizeVarDeclarations(n);    	non-compiled	[CE]  	240	None	replace
1638	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations	  	non-compiled	[CE]  	46	None	add
1639	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations  [CE]  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations	  	non-compiled	[CE]  	46	None	add
1640	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()  ==  Token.FUNCTION)  {  break;  }	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    break;    	non-compiled	[CE]  	150	None	replace
1641	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  t.getModule()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  t.getModule()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  t.getModule()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  ';'  expected	259	None	replace
1642	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getReturnType());  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getReturnType());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getReturnType());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  ';'  expected	259	None	replace
1643	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  parent.replaceChild(n,  null);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  parent.replaceChild(n,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.redeclareVarsInsideBranch(n);  parent.replaceChild(n,  null);	          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    null);    	non-compiled	[CE]  ';'  expected	110	None	replace
1644	[BUG]  [BUGGY]  n  =  parent.getLastChild();  ||  parent.getType()  ==  Token.FUNCTION)  {  break;  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  parent.getLastChild();  ||  parent.getType()  ==  Token.FUNCTION)  {  break;  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n    =    parent.getLastChild();    ||  parent.getType()  ==  Token.FUNCTION)  {  break;	  	non-compiled	[CE]  ';'  expected	98	None	add
1645	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  Node  n  =  parent.getFirstChild();  n  =  n.getLastChild();  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  Node  n  =  parent.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    n.getLastChild();    Node  n  =  parent.getFirstChild();  n  =  n.getLastChild();	  	non-compiled	[CE]  ';'  expected	30	None	add
1646	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(n,  parent);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  ';'  expected	308	None	replace
1647	[BUG]  [BUGGY]  ExtractForNormalization(t,  n,  parent,  normalizeVarDeclarations);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ExtractForNormalization(t,  n,  parent,  normalizeVarDeclarations);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForNormalization(t,  n,  parent,  normalizeVarDeclarations);	  ExtractForNormalization(t,    n,    parent,    arguments);    	non-compiled	[CE]  ';'  expected	235	None	replace
1648	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  ';'  expected	173	None	add
1649	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent  =  n.getFirstChild();  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Node  parent  =  n.getFirstChild();	  	non-compiled	[CE]  ';'  expected	173	None	add
1650	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_TO_FOR));  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_TO_FOR));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_TO_FOR));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  ';'  expected	248	None	replace
1651	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_FOR));  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_FOR));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_FOR));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  ';'  expected	248	None	replace
1652	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	129	None	add
1653	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Node  n  =  parent.getFirstChild();  [CE]  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Node  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Node  n  =  parent.getFirstChild();	  	non-compiled	[CE]  	129	None	add
1654	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  	129	None	add
1655	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	86	None	replace
1656	[BUG]  [BUGGY]  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,        null,        null);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Context.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  	288	None	add
1657	[BUG]  [BUGGY]  n.getLastChild().getString().endsWith( "_ "))  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n.getLastChild().getString().endsWith( "_ "))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n.getLastChild().getString().endsWith( "_ "))  {  throw  new  IllegalArgumentException( " ");	          n.getLastChild().getString().endsWith(   "__   "))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	271	None	replace
1658	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  	73	None	add
1659	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  	73	None	add
1660	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [CE]  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  	73	None	add
1661	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  if(n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  	269	None	replace
1662	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  index);  [CE]  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  index);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  index);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  	16	None	replace
1663	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    	non-compiled	[CE]  	250	None	replace
1664	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  	158	None	add
1665	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Node  n  =  parent.getFirstChild();  [CE]  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Node  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Node  n  =  parent.getFirstChild();	  	non-compiled	[CE]  	158	None	add
1666	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  	158	None	add
1667	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  allConstants);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  allConstants);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  allConstants);	  NodeTraversal.traverse(compiler,    n,    parent,    this,    constantMap);    	non-compiled	[CE]  	296	None	replace
1668	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(n  ==  ';'  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(n  ==  ';'  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function()  {  arguments=Array.prototype.slice.call(n  ==  ';'	  function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  	51	None	replace
1669	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  isConst);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  isConst);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  isConst);	  NodeTraversal.traverse(compiler,    n,    parent,    this,    expectedConst);    	non-compiled	[CE]  	216	None	replace
1670	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  this);  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false,  this);	  NodeTraversal.traverse(compiler,    n,    parent,    false);    	non-compiled	[CE]  	214	None	replace
1671	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  expectedConst);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  expectedConst);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false,  expectedConst);	  NodeTraversal.traverse(compiler,    n,    parent,    false);    	non-compiled	[CE]  	214	None	replace
1672	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  normalizeVarDeclarations);  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  normalizeVarDeclarations);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  normalizeVarDeclarations);	  MutableNodeTraversal.traverse(compiler,    n,    parent,    arguments);    	non-compiled	[CE]  	94	None	replace
1673	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  NodeUtil.replaceChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  NodeUtil.replaceChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    n);    NodeUtil.replaceChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);	  	non-compiled	[CE]  	107	None	add
1674	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  NodeUtil.replaceChild(parent,  n);  [CE]  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  NodeUtil.replaceChild(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.replaceChild(parent,  n);	  	non-compiled	[CE]  	107	None	add
1675	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	166	None	replace
1676	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  null));  [CE]  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  null));  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t,  null));	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(t));    	non-compiled	[CE]  	117	None	replace
1677	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t),  n);  [CE]  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t),  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t),  n);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(t));    	non-compiled	[CE]  	117	None	replace
1678	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  parent  =  n.getLastChild();  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  parent  =  n.getLastChild();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  parent  =  n.getLastChild();	  extractForInitializer(n,    parent,    null);    Node    parent    =    n.getLastChild();    	non-compiled	[CE]  	63	None	replace
1679	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    	non-compiled	[CE]  	183	None	replace
1680	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(n.getType()  ==  Token.NAME,  parent);  [CE]  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isStatementBlock(n.getType()  ==  Token.NAME,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isStatementBlock(n.getType()  ==  Token.NAME,  parent);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeUtil.isStatementBlock(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	290	None	replace
1681	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);	  	non-compiled	[CE]  illegal  start  of  expression	210	None	add
1682	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
1683	[BUG]  [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  parent.getFirstChild();  n  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  parent.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getLastChild();        n    =    n.getLastChild();    n  =  parent.getFirstChild();  n  =  n.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	145	None	add
1684	[BUG]  [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  Node  n  =  parent.getFirstChild();  n  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  Node  n  =  parent.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getLastChild();        n    =    n.getLastChild();    Node  n  =  parent.getFirstChild();  n  =  n.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	145	None	add
1685	[BUG]  [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  parent.getFirstChild();  n  =  parent.getLastChild();  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  parent.getFirstChild();  n  =  parent.getLastChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getLastChild();        n    =    n.getLastChild();    n  =  parent.getFirstChild();  n  =  parent.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	145	None	add
1686	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  normalizeValues);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  normalizeValues);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  this,  normalizeValues);	  MutableNodeTraversal.traverse(compiler,    n,    this,    argument);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
1687	[BUG]  [BUGGY]  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,        parent,        null);        t.getCompiler().reportCodeChange();    Context.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  illegal  start  of  expression	303	None	add
1688	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	251	None	replace
1689	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  illegal  start  of  expression	177	None	add
1690	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());	  	non-compiled	[CE]  illegal  start  of  expression	258	None	add
1691	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());	  	non-compiled	[CE]  illegal  start  of  expression	258	None	add
1692	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.INC,  t.getModule());  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.INC,  t.getModule());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  ==  Token.INC,  t.getModule());	  	non-compiled	[CE]  illegal  start  of  expression	258	None	add
1693	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();	  extractForInitializer(n,    parent,    null);    Node    parent    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
1694	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  normalizeVarDeclarations(n),  null);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  normalizeVarDeclarations(n),  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  this,  normalizeVarDeclarations(n),  null);	  MutableNodeTraversal.traverse(compiler,    n,    this,    null);    	non-compiled	[CE]  illegal  start  of  expression	294	None	replace
1695	[BUG]  [BUGGY]  extractForInitializer(parent,  n,  this);  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(parent,  n,  this);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,  n,  this);	  extractForInitializer(n,    parent,    this);    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
1696	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(parent.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isStatementBlock(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isStatementBlock(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeUtil.isStatementBlock(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	267	None	replace
1697	[BUG]  [BUGGY]  extractForNormalization(t,  n,  parent,  str);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForNormalization(t,  n,  parent,  str);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForNormalization(t,  n,  parent,  str);	  extractForNormalization(t,    n,    parent,    argument);    	non-compiled	[CE]  illegal  start  of  expression	260	None	replace
1698	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n.getLastChild(),  n);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n.getLastChild(),  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n.getLastChild(),  n);	  NodeUtil.removeChild(parent,    n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
1699	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  n);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t,  n);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback(),    t);    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
1700	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(	  	non-compiled	[CE]  illegal  start  of  expression	222	None	add
1701	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
1702	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeUtil.checkState(n,  parent.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeUtil.checkState(n,  parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeUtil.checkState(n,  parent.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeUtil.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	266	None	replace
1703	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  n  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Node    n    =    parent.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	217	None	replace
1704	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FOR);Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FOR);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FOR);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  	187	None	add
1705	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.CAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.CAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.CAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  	187	None	add
1706	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.LAME);  [CE]  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.LAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.LAME);	  	non-compiled	[CE]  	187	None	add
1707	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(n,    parent);    NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  	11	None	add
1708	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  	156	None	add
1709	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.MOVED);  [CE]  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.MOVED);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.MOVED);	  	non-compiled	[CE]  	156	None	add
1710	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  null,  null);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  null,  null);	  MutableNodeTraversal.traverse(compiler,    node,    null);    	non-compiled	[CE]  	192	None	replace
1711	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  	190	None	add
1712	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [CE]  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(parent))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);	  	non-compiled	[CE]  	190	None	add
1713	[BUG]  [BUGGY]  Node  dev  =  n.getFirstChild();  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  dev  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  dev  =  n.getFirstChild();	  Node    v    =    node.getFirstChild();    	non-compiled	[CE]  	27	None	replace
1714	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.CALL);  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  	211	None	replace
1715	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        new        ScopeTicklingCallback());        NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,	  	non-compiled	[CE]  ';'  expected	120	None	add
1716	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Preconditions.checkState(n.getType()  ==  Token.INDEX,  parent);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Preconditions.checkState(n.getType()  ==  Token.INDEX,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    Preconditions.checkState(n.getType()  ==  Token.INDEX,  parent);	  	non-compiled	[CE]  ';'  expected	246	None	add
1717	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Node  parent  =  n.getFirstChild();  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Node  parent  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    Node  parent  =  n.getFirstChild();	  	non-compiled	[CE]  ';'  expected	246	None	add
1718	[BUG]  [BUGGY]  extractForNormalization(t,  n,  parent,  normalizeVarDeclarations);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForNormalization(t,  n,  parent,  normalizeVarDeclarations);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForNormalization(t,  n,  parent,  normalizeVarDeclarations);	  extractForNormalization(t,    n,    parent,    arguments);    	non-compiled	[CE]  ';'  expected	234	None	replace
1719	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  false,  new  ScopeTicklingCallback());  [CE]  ';'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  false,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  false,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    parent,    false,    new    ScopeTicklingCallback());    	non-compiled	[CE]  ';'  expected	119	None	replace
1720	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()!=    Token.FUNCTION);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	non-compiled	[CE]  	42	None	add
1721	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  	127	None	add
1722	[BUG]  [BUGGY]  n  =  n.getParent();  extractForInitializer(n,  null,  null);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  n.getParent();  extractForInitializer(n,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  n.getParent();  extractForInitializer(n,  null,  null);	  extractForInitializer(parent,    null,    null);    Node    parent    =    n.getParent();    extractForInitializer(parent,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	201	None	replace
1723	[BUG]  [BUGGY]  n  =  n.getParent();  extractForInitializer(n,  parent,  null,  null);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  n.getParent();  extractForInitializer(n,  parent,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  n.getParent();  extractForInitializer(n,  parent,  null,  null);	  extractForInitializer(parent,    null,    null);    Node    parent    =    n.getParent();    extractForInitializer(parent,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	201	None	replace
1724	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  nameNode);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  nameNode);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalization(t,  n,  parent,  nameNode);	  doStatementNormalization(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
1725	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    n,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  <identifier>  expected	196	None	add
1726	[BUG]  [BUGGY]  n.getFirstChild().getString().endsWith( "_ "))  {  throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n.getFirstChild().getString().endsWith( "_ "))  {  throw  new  IllegalStateException( " ");  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n.getFirstChild().getString().endsWith( "_ "))  {  throw  new  IllegalStateException( " ");	          n.getFirstChild().getString().endsWith(   "__   "))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	276	None	replace
1727	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  Preconditions.checkState(parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	168	None	replace
1728	[BUG]  [BUGGY]  NodeUtil.redeclareVarDeclarations(n);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.redeclareVarDeclarations(n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.redeclareVarDeclarations(n);	  NodeUtil.removeChild(n,    parent);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
1729	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportcodeChange();  [CE]  <identifier>  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportcodeChange();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        new        ScopeTicklingCallback());        t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportcodeChange();	  	non-compiled	[CE]  <identifier>  expected	282	None	add
1730	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  b.getCompiler().reportCodeChange();  [CE]  <identifier>  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  b.getCompiler().reportCodeChange();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        new        ScopeTicklingCallback());        t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  b.getCompiler().reportCodeChange();	  	non-compiled	[CE]  <identifier>  expected	282	None	add
1731	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();  }  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        new        ScopeTicklingCallback());        t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();  }	  	non-compiled	[CE]  <identifier>  expected	282	None	add
1732	[BUG]  [BUGGY]  translateForInitializer(t,  n,  parent,  normalizeVarDeclarations);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateForInitializer(t,  n,  parent,  normalizeVarDeclarations);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateForInitializer(t,  n,  parent,  normalizeVarDeclarations);	  translateForInitializer(t,    n,    parent);    	non-compiled	[CE]  <identifier>  expected	155	None	replace
1733	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()!=  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()!=  Token.VAR);	  	non-compiled	[CE]  <identifier>  expected	131	None	add
1734	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  <identifier>  expected	268	None	add
1735	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  strNode);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  strNode);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  strNode);	  NodeTraversal.traverse(compiler,    n,    parent,    argumentMap);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
1736	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.addChildToFront(parent,  n);  NodeUtil.removeChild(parent,  n);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.addChildToFront(parent,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    NodeUtil.addChildToFront(parent,  n);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  <identifier>  expected	105	None	add
1737	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  n);  [CE]  <identifier>  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  <identifier>  expected	105	None	add
1738	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.doStatement(n,  parent);  NodeUtil.removeChild(parent,  n);  [CE]  <identifier>  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.doStatement(n,  parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    NodeUtil.doStatement(n,  parent);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  <identifier>  expected	105	None	add
1739	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.clearChildren();  NodeUtil.removeChild(parent,  n);  [CE]  <identifier>  expected  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  NodeUtil.clearChildren();  NodeUtil.removeChild(parent,  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    NodeUtil.clearChildren();  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  <identifier>  expected	105	None	add
1740	[BUG]  [BUGGY]  extractForInitializer(t,  n,  parent,  normalizeVarDeclarations(n),  null);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(t,  n,  parent,  normalizeVarDeclarations(n),  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  n,  parent,  normalizeVarDeclarations(n),  null);	  extractForInitializer(t,    n,    parent,    null);    	non-compiled	[CE]  <identifier>  expected	257	None	replace
1741	[BUG]  [BUGGY]  extractForInitializer(t,  n,  parent,  normalizeVarDeclarations(n));  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(t,  n,  parent,  normalizeVarDeclarations(n));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  n,  parent,  normalizeVarDeclarations(n));	  extractForInitializer(t,    n,    parent,    null);    	non-compiled	[CE]  <identifier>  expected	257	None	replace
1742	[BUG]  [BUGGY]  extractForInitializer(n,  parent,  normalizeVarDeclarations);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(n,  parent,  normalizeVarDeclarations);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,  parent,  normalizeVarDeclarations);	  extractForInitializer(n,    parent,    arguments);    	non-compiled	[CE]  <identifier>  expected	154	None	replace
1743	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  n  =  parent.getFirstChild();  n  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  n  =  parent.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  n  =  parent.getFirstChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  <identifier>  expected	28	None	add
1744	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  parent.getLastChild();  n  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  parent.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  parent.getLastChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  <identifier>  expected	28	None	add
1745	[BUG]  [BUGGY]  Node  parent  =  n.getParentFirstChild();  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  parent  =  n.getParentFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  parent  =  n.getParentFirstChild();	  Node    parent    =    n.getParentNode();    	non-compiled	[CE]  <identifier>  expected	226	None	replace
1746	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    new    ScopeTicklingCallback());    Context.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());	  	non-compiled	[CE]  <identifier>  expected	102	None	add
1747	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  [CE]  <identifier>  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    new    ScopeTicklingCallback());    Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());	  	non-compiled	[CE]  <identifier>  expected	102	None	add
1748	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  n.getLastChild().removeChild(parent);  [CE]  <identifier>  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  n.getLastChild().removeChild(parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  n.getLastChild().removeChild(parent);	  	non-compiled	[CE]  <identifier>  expected	102	None	add
1749	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  <identifier>  expected	163	None	add
1750	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  <identifier>  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  <identifier>  expected	163	None	add
1751	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null,  parent);  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null,  parent);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  null,  parent);	  NodeTraversal.traverse(compiler,    n,    this,    null);    	non-compiled	[CE]  <identifier>  expected	198	None	replace
1752	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  <identifier>  expected	169	None	add
1753	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  nodeTraversal.traverse(compiler,  parent,  this);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  nodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    this);    nodeTraversal.traverse(compiler,  parent,  this);	  	non-compiled	[CE]  <identifier>  expected	19	None	add
1754	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    this);    Context.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  <identifier>  expected	19	None	add
1755	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,    parent,    this);    Context.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  <identifier>  expected	19	None	add
1756	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  NormalizeVarDeclarations(n);  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  NormalizeVarDeclarations(n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()  ==  Token.FUNCTION)  {  NormalizeVarDeclarations(n);	          n    =    n.getLastChild();    ||    n.getType()    ==    Token.FUNCTION)    {    normalizeVarDeclarations(n);    	non-compiled	[CE]  <identifier>  expected	252	None	replace
1757	[BUG]  [BUGGY]  n  =  n.getFirstChild();  extractForInitializer(n,  null,  null);  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  n.getFirstChild();  extractForInitializer(n,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  n.getFirstChild();  extractForInitializer(n,  null,  null);	  extractForInitializer(parent,    null,    null);    Node    parent    =    n.getFirstChild();    extractForInitializer(parent,    null,    null);    	non-compiled	[CE]  <identifier>  expected	202	None	replace
1758	[BUG]  [BUGGY]  n  =  n.getFirstChild();  extractForInitializer(n,  parent,  null,  null);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  n.getFirstChild();  extractForInitializer(n,  parent,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  n.getFirstChild();  extractForInitializer(n,  parent,  null,  null);	  extractForInitializer(parent,    null,    null);    Node    parent    =    n.getFirstChild();    extractForInitializer(parent,    null,    null);    	non-compiled	[CE]  <identifier>  expected	202	None	replace
1759	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();  [CE]  <identifier>  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Traversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Traversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  <identifier>  expected	283	None	replace
1760	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();  [CE]  <identifier>  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  <identifier>  expected	283	None	replace
1761	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  <identifier>  expected	134	None	add
1762	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Node  parent  =  n.getParent();  [CE]  <identifier>  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  Node  parent  =  n.getParent();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    Node  parent  =  n.getParent();	  	non-compiled	[CE]  <identifier>  expected	134	None	add
1763	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n.getFirstChild(),  n);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n.getFirstChild(),  n);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n.getFirstChild(),  n);	  NodeUtil.removeChild(parent,    n.getFirstChild());    	non-compiled	[CE]  <identifier>  expected	10	None	replace
1764	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CALL);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CALL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CALL);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	174	None	replace
1765	[BUG]  [BUGGY]  Node  v  =  n.getFirstChild();  Preconditions.checkState(v.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  v  =  n.getFirstChild();  Preconditions.checkState(v.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  n.getFirstChild();  Preconditions.checkState(v.getType()  ==  Token.FUNCTION);	          Node    v    =    n.getFirstChild();    Node    v    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
1766	[BUG]  [BUGGY]  extractForInitializer(t,  n,  parent,  argument);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(t,  n,  parent,  argument);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  n,  parent,  argument);	  extractForInitializer(t,    n,    parent);    	non-compiled	[CE]  <identifier>  expected	152	None	replace
1767	[BUG]  [BUGGY]  extractForInitializer(t,  n,  parent,  str);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  extractForInitializer(t,  n,  parent,  str);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  n,  parent,  str);	  extractForInitializer(t,    n,    parent);    	non-compiled	[CE]  <identifier>  expected	152	None	replace
1768	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
1769	[BUG]  [BUGGY]  Node  parent  =  n.getfirstChild();  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Node  parent  =  n.getfirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  parent  =  n.getfirstChild();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
1770	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(t.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(t.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(t.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  <identifier>  expected	71	None	add
1771	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.LABEL);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.LABEL);	  	non-compiled	[CE]  <identifier>  expected	182	None	add
1772	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  parent  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  parent  =  n.getFirstChild();  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  parent  =  n.getFirstChild();	  extractForInitializer(n,    parent,    null);    Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
1773	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  constantMap);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  constantMap);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  constantMap);	  NodeTraversal.traverse(compiler,    n,    this,    parent);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
1774	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    	non-compiled	[CE]  illegal  start  of  type	247	None	replace
1775	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDe	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
1776	[BUG]  [BUGGY]  translateNormalization(t,  n,  parent,  nameNode);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateNormalization(t,  n,  parent,  nameNode);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateNormalization(t,  n,  parent,  nameNode);	  translateNormalization(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  type	262	None	replace
1777	[BUG]  [BUGGY]  translateNormalization(t,  n,  parent,  values);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  translateNormalization(t,  n,  parent,  values);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateNormalization(t,  n,  parent,  values);	  translateNormalization(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  type	262	None	replace
1778	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
1779	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  parent);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  parent);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  parent);	  extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
1780	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  str);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  str);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  str);	  NodeTraversal.traverse(compiler,    n,    parent,    expectedConst);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
1781	[BUG]  [BUGGY]  n  =  n.getLastChild();  extractForInitializer(n,  null,  null);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  n  =  n.getLastChild();  extractForInitializer(n,  null,  null);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  n.getLastChild();  extractForInitializer(n,  null,  null);	  extractForInitializer(parent,    null,    null);    Node    parent    =    n.getLastChild();    extractForInitializer(parent,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	200	None	replace
1782	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    moveNamedFunctions(n.getLastChil    	non-compiled	[CE]  illegal  start  of  type	302	None	replace
1783	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNC  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNC  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNC	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    moveNamedFunctions(n.getLastChil    	non-compiled	[CE]  <identifier>  expected	302	None	replace
1784	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  NodeUtil.addChildToFront(parent,  n  +  1);  [CE]  <identifier>  expected  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n);  NodeUtil.addChildToFront(parent,  n  +  1);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n);  NodeUtil.addChildToFront(parent,  n  +  1);	          NodeUtil.removeChild(parent,    n);    NodeUtil.addChildToFront(parent,    n);    	non-compiled	[CE]  <identifier>  expected	204	None	replace
1785	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    parent.getFirstChild();    n  =  parent.getFirstChild();  n  =  parent.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  type	263	None	add
1786	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  parent.getFirstChild();  Node  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  parent.getFirstChild();  Node  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    parent.getFirstChild();    Node  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  type	263	None	add
1787	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  parent.getFirstChild();  n  =  n.getNext();  n  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          n    =    n.getFirstChild();    n  =  parent.getFirstChild();  n  =  n.getNext();  n  =  parent.getFirstChild();  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                n        =        n.getFirstChild();        n    =    parent.getFirstChild();    n  =  n.getNext();  n  =  parent.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  type	263	None	add
1788	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  illegal  start  of  type	244	None	replace
1789	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n  +  1,  n.getFirstChild());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.removeChild(parent,  n  +  1,  n.getFirstChild());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n  +  1,  n.getFirstChild());	  NodeUtil.removeChild(parent,    n    +    1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
1790	[BUG]  [BUGGY]  MutableStatistics.checkState(n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableStatistics.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableStatistics.checkState(n.getType()  ==  Token.VAR);	  extractForInitializer(n,    parent,    null);    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
1791	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.BLOCK);	  	non-compiled	[CE]  illegal  start  of  type	161	None	add
1792	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.MOVED);  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.MOVED);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.MOVED);	  	non-compiled	[CE]  illegal  start  of  type	161	None	add
1793	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.LABEL);  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.LABEL);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.LABEL);	  	non-compiled	[CE]  illegal  start  of  type	161	None	add
1794	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this);  Context.checkState(n.getType()  ==  Token.FUNCTION);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
1795	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  true);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  true);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  true);  Context.checkState(n.getType()  ==  Token.FUNCTION);	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
1796	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	225	None	replace
1797	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.NAME,  arguments);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.NAME,  arguments);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.NAME,  arguments);	          NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	241	None	replace
1798	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
1799	[BUG]  [BUGGY]  (n.getFirstChild().getString().endsWith( "__ ")))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  (n.getFirstChild().getString().endsWith( "__ ")))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	(n.getFirstChild().getString().endsWith( "__ ")))  {  throw  new  IllegalArgumentException( " ");	          n.getFirstChild().getString().endsWith(   "__   "))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	274	None	replace
1800	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  <identifier>  expected	179	None	add
1801	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  <identifier>  expected	69	None	add
1802	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  NodeUtil.addChildToFront(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  NodeUtil.addChildToFront(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeUtil.removeChild(parent,        n);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    null);    NodeUtil.addChildToFront(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);	  	non-compiled	[CE]  <identifier>  expected	109	None	add
1803	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  strNode,  new  ScopeTicklingCallback());  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  strNode,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  strNode,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    parent,    null,    new    ScopeTicklingCallback());    	non-compiled	[CE]  <identifier>  expected	118	None	replace
1804	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments!=  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments!=  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function()  {  arguments=Array.prototype.slice.call(arguments!=	  function()    {    arguments=Array.prototype.slice.call(n    ==    	non-compiled	[CE]  <identifier>  expected	53	None	replace
1805	[BUG]  [BUGGY]  TraverseStructure.traverse(compiler,  n,  new  ScopeTicklingCallback());  [CE]  <identifier>  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  TraverseStructure.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	TraverseStructure.traverse(compiler,  n,  new  ScopeTicklingCallback());	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  <identifier>  expected	121	None	replace
1806	[BUG]  [BUGGY]  TraverseRenderer.traverse(compiler,  n,  new  ScopeTicklingCallback());  [CE]  <identifier>  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  TraverseRenderer.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	TraverseRenderer.traverse(compiler,  n,  new  ScopeTicklingCallback());	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  <identifier>  expected	121	None	replace
1807	[BUG]  [BUGGY]  Traversed.traverse(compiler,  n,  new  ScopeTicklingCallback());  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Traversed.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Traversed.traverse(compiler,  n,  new  ScopeTicklingCallback());	          NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  <identifier>  expected	121	None	replace
1808	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION);	  extractForInitializer(n,    parent,    null);    Context.checkNotNull(parent);    	non-compiled	[CE]  <identifier>  expected	243	None	replace
1809	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  <identifier>  expected	218	None	add
1810	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [CE]  <identifier>  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    if(NodeUtil.isStatementBlock(n))    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  <identifier>  expected	218	None	add
1811	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  argument);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  argument);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  argument);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  <identifier>  expected	255	None	replace
1812	[BUG]  [BUGGY]  MutableDeclaration.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  MutableDeclaration.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [BUGGY]      }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableDeclaration.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));	  extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  <identifier>  expected	57	None	replace
1813	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  <identifier>  expected	224	None	add
1814	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  <identifier>  expected	167	None	add
1815	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  <identifier>  expected	298	None	add
1816	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  Preconditions.checkState(t.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [CE]  <identifier>  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  Preconditions.checkState(t.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.BLOCK);    Preconditions.checkState(t.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  <identifier>  expected	298	None	add
1817	[BUG]  [BUGGY]  NodeUtil.checkState(parent.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  NodeUtil.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeUtil.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	291	None	replace
1818	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	176	None	replace
