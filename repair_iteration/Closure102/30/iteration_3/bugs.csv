bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if  (n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.LABEL)  {	  if    (n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	71	1	replace
2	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.LABEL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if  (n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.LABEL)  {	  if    (n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	71	1	replace
3	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.STRING  ||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if  (parent.getType()  ==  Token.STRING  ||  parent.getType()  ==  Token.LABEL)  {	  if    (n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	71	13	replace
4	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.STRING  ||  parent.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.STRING  ||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if  (parent.getType()  ==  Token.STRING  ||  parent.getType()  ==  Token.LABEL)  {	  if    (n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	71	13	replace
5	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if  (parent.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	69	13	replace
6	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.STRING)  {  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if  (parent.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	69	13	replace
7	[BUG]  [BUGGY]  Node  parent  =  t.getParentNode();  [CE]  illegal  start  of  type  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  t.getParentNode();  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  parent  =  t.getParentNode();	  Node    parent    =    t.getParent();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
8	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.LABEL)    {    if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
9	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  if  (N.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  if  (N.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.LABEL)    {    if  (N.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
10	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  if  (n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  if  (n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.LABEL)    {    if  (n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
11	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  if  (n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  if  (n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.LABEL)    {    if  (n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
12	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  if  (parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  if  (parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.LABEL)    {    if  (parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
13	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(n)||  n.getType()!=  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isStatementBlock(n)||    n.getType()    >=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	35	13	replace
14	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()!=  Token.LABEL)  {  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||  n.getType()!=  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isStatementBlock(n)||    n.getType()    >=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	35	13	replace
15	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isStatementBlock(n)||    n.getType()    >=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	35	13	replace
16	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.LABEL)  {  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isStatementBlock(n)||    n.getType()    >=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	35	13	replace
17	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()!=    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	29	13	replace
18	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()!=    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	29	13	replace
19	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()!=    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	57	13	replace
20	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.STRING)  {  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()!=    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	57	13	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
27	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if((  n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION))  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if((  n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION))  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if((  n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION))  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    ((    n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
28	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  if((  n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION))  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  if((  n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION))  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  if((  n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION))  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    ((    n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
29	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	15	13	add
30	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	15	13	add
31	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	15	13	add
32	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	15	13	add
33	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	15	13	add
34	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.LABEL);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	15	13	add
35	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	15	13	add
36	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	15	13	add
37	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	15	13	add
38	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	15	13	add
39	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	15	None	add
40	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.LABEL);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.LABEL);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.LABEL);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.LABEL);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
44	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
45	[BUG]  [BUGGY]  If(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  If(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	If(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
46	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
47	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()!=    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	38	13	replace
48	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.NAME)  {  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()!=    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	38	13	replace
49	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL)  {  If  (parent.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL)  {  If  (parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL)  {  If  (parent.getType()  ==  Token.LABEL)  {	  if    (parent.getType()    ==    Token.LABEL)    {    If    (parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	74	None	replace
50	[BUG]  [BUGGY]  If  (parent.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  If  (parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	If  (parent.getType()  ==  Token.LABEL)  {	  if    (parent.getType()    ==    Token.LABEL)    {    If    (parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	74	None	replace
51	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.LABEL)  {	  if    (parent.getType()    ==    Token.LABEL)    {    If    (parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	74	13	replace
52	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.LABEL)  {	  if    (parent.getType()    ==    Token.LABEL)    {    If    (parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	74	13	replace
53	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.FUNCTION)    {    if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
54	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (parent.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (parent.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.FUNCTION)    {    if  (parent.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
55	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.FUNCTION)    {    if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
56	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	9	13	add
57	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	9	13	add
58	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	9	13	add
59	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	9	13	add
60	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	9	None	add
61	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	9	13	add
62	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	9	13	add
63	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	9	None	add
64	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	9	13	add
65	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	9	13	add
66	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getModule());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getModule());  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getModule());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.NAME,  n.getModule());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.NAME,  n.getModule());  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(t.getType()  ==  Token.NAME,  n.getModule());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(t.getModule()  ==  Token.NAME,  n.getType());  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(t.getModule()  ==  Token.NAME,  n.getType());  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(t.getModule()  ==  Token.NAME,  n.getType());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
70	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.NAME)  {	  if    (parent.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	80	13	replace
71	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.NAME)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.NAME)  {	  if    (parent.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	80	13	replace
72	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  &&  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(parent.getType()  ==  Token.LABEL  &&  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {	  if    (parent.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	80	13	replace
73	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  &&  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  &&  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  &&  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {	  if    (parent.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	80	13	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
77	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    n    =    n.getLastChild();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
78	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    n    =    n.getLastChild();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
79	[BUG]  [BUGGY]  Node  n  =  parent.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  parent.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  parent.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    n    =    n.getLastChild();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
80	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    n    =    n.getLastChild();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
81	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CALL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
82	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CALL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CALL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
84	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CALL);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CALL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
85	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.SCRIPT);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.SCRIPT);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.SCRIPT);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.SCRIPT);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.SCRIPT);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.SCRIPT);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.SCRIPT);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.SCRIPT);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.SCRIPT);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.SCRIPT);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.SCRIPT);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.SCRIPT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.SCRIPT);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
89	[BUG]  [BUGGY]  If  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  If  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	If  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    If    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	97	None	replace
90	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  If  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  If  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  If  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    If    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	97	None	replace
91	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	21	13	add
92	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	21	13	add
93	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	21	None	add
94	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	21	None	add
95	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	21	13	add
96	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	21	13	add
97	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	21	13	add
98	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	21	13	add
99	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	21	13	add
100	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	21	13	add
101	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
102	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()!=  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETPROP);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETPROP);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
109	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if  (n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.LABEL)  {	  if    (n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	53	1	replace
110	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.LABEL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if  (n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.LABEL)  {	  if    (n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	53	1	replace
111	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if  (parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL)  {	  if    (n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	53	13	replace
112	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if  (parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL)  {	  if    (n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	53	13	replace
113	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  >=  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
114	[BUG]  [BUGGY]  Presconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Presconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Presconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
115	[BUG]  [BUGGY]  Node  n  =  node.getNext();  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  node.getNext();  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  node.getNext();	  Node    n    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
116	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.STRING)    {    if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
117	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.STRING)    {    if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
118	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  if  (parent.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  if  (parent.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.STRING)    {    if  (parent.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
119	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.NAME)    {    if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
120	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.NAME)    {    if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
121	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if  (parent.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if  (parent.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.NAME)    {    if  (parent.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
122	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
125	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	67	13	replace
126	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	67	13	replace
127	[BUG]  [BUGGY]  if(NodeUtil.isConstructorDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isConstructorDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isConstructorDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
128	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.STRING)  {	  if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	67	9	replace
129	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.STRING)  {  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.STRING)  {	  if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	67	9	replace
130	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
131	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
132	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  if  (parent.getType()!=  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  if  (parent.getType()!=  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    if  (parent.getType()!=  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
133	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(n.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.NAME)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	6	1	replace
134	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.NAME)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.NAME)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	6	1	replace
135	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL)  {	  if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	6	13	replace
136	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL)  {	  if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	6	13	replace
137	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.FUNCTION)    {    if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
138	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  if  (n.getType()!=  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  if  (n.getType()!=  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.FUNCTION)    {    if  (n.getType()!=  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
139	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  if  (n.getType()  ==  Token.LABEL  &&  n.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  if  (n.getType()  ==  Token.LABEL  &&  n.getType()!=  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.FUNCTION)    {    if  (n.getType()  ==  Token.LABEL  &&  n.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
140	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  If  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  If  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.FUNCTION)    {    If  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
141	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (N.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
142	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(N.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(N.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(N.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (N.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
143	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (N.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
144	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    n    =    parent.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    n    =    parent.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
146	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	99	13	add
147	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	99	13	add
148	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	99	13	add
149	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	99	13	add
150	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	99	13	add
151	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	99	13	add
152	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	99	13	add
153	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	99	13	add
154	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	99	13	add
155	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	99	13	add
156	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	99	None	add
157	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.STRING)    {    if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
158	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  if  (n.getType()!=  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  if  (n.getType()!=  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.STRING)    {    if  (n.getType()!=  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
159	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  if  (n.getType()  ==  Token.LABEL  &&  n.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  if  (n.getType()  ==  Token.LABEL  &&  n.getType()!=  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.STRING)    {    if  (n.getType()  ==  Token.LABEL  &&  n.getType()!=  Token.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
160	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  If  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  If  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.STRING)    {    If  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
161	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	28	9	replace
162	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	28	9	replace
163	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
164	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
167	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
168	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isVarDeclaration(n)||  n.getType()!=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isVarDeclaration(n)||  n.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isVarDeclaration(n)||  n.getType()!=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
169	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  ';'  expected	66	None	add
170	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isVarDeclaration(n)||  n.getType()  >=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isVarDeclaration(n)||  n.getType()  >=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isVarDeclaration(n)||  n.getType()  >=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
171	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if  (parent.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	47	13	replace
172	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if  (parent.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	47	13	replace
173	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isExpressionNode(n)||  parent.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isExpressionNode(parent)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	112	13	replace
174	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  parent.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isExpressionNode(n)||  parent.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isExpressionNode(parent)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	112	13	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
176	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
179	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (n.getType()!=    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	39	13	replace
180	[BUG]  [BUGGY]  if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (n.getType()!=    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	39	13	replace
181	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.LABEL);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.LABEL);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.LABEL);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.LABEL);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.LABEL);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.LABEL);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
185	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if  (n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {	  if    (parent.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	95	13	replace
186	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if  (n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {	  if    (parent.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	95	13	replace
187	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.STRING)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	32	13	replace
188	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.STRING)  {  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.STRING)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	32	13	replace
189	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  n);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  n);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.NAME);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()!=  Token.NAME);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getFirstChild());  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getFirstChild());  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeLabels(n);  [CE]  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeLabels(n);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeLabels(n);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    	non-compiled	[CE]  	87	None	replace
195	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.NAME)    {    if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
196	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.NAME)    {    if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
197	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(n.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(n.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.NAME)    {    if(n.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
198	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(n.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(n.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.NAME)    {    if(n.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
199	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(N.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(N.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.NAME)    {    if(N.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
200	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.LABEL)  {	  if    (parent.getType()    ==    Token.LABEL)    {    if    (parent.getType()!=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	73	13	replace
201	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.LABEL)  {  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.LABEL)  {	  if    (parent.getType()    ==    Token.LABEL)    {    if    (parent.getType()!=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	73	13	replace
202	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.LABEL)    {    if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
203	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
204	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  if  (n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  if  (n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.LABEL)    {    if  (n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
205	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  if  (n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  if  (n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.LABEL)    {    if  (n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
206	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isName(n)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
207	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isName(n)||  n.getType()!=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isName(n)||  n.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isName(n)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isName(n)||  n.getType()!=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
208	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isName(n)||    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  ';'  expected	103	None	add
209	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isName(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isName(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isName(n)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isName(n)||  parent.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
210	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
211	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
212	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(parent)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
213	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()!=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(parent)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isStatementBlock(parent)||  n.getType()!=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
214	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
215	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CALL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.CALL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CALL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
220	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(n.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	8	1	replace
221	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.FUNCTION)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	8	1	replace
222	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()!=  Token.LABEL  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(n.getType()!=  Token.LABEL  &&  parent.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	8	13	replace
223	[BUG]  [BUGGY]  if(n.getType()!=  Token.LABEL  &&  parent.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()!=  Token.LABEL  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()!=  Token.LABEL  &&  parent.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	8	13	replace
224	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.NAME);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  >=  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
225	[BUG]  [BUGGY]  Presconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Presconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Presconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
226	[BUG]  [BUGGY]  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    n    =    parent.getParent();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
227	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    n    =    parent.getParent();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
230	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
231	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.FUNCTION)    {    if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
232	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.FUNCTION)    {    if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
233	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.FUNCTION)    {    if(n.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
234	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(n.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(n.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.FUNCTION)    {    if(n.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
235	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(N.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(N.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.FUNCTION)    {    if(N.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
236	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(parent)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isExpressionNode(parent)||  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isExpressionNode(parent)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isExpressionNode(parent)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isExpressionNode(parent)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isExpressionNode(parent)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	111	None	add
237	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(parent)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isExpressionNode(parent)||  n.getType()!=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isExpressionNode(parent)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isExpressionNode(parent)||  n.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isExpressionNode(parent)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isExpressionNode(parent)||  n.getType()!=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	111	None	add
238	[BUG]  [BUGGY]  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    parent.getParent();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
239	[BUG]  [BUGGY]  Node  n  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    parent.getParent();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
240	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeDeclarations);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeDeclarations);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeDeclarations);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
241	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeNames);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeNames);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeNames);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
242	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
243	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeArguments(n));  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeArguments(n));  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeArguments(n));	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
244	[BUG]  [BUGGY]  Node  parent  =  t.getLastChild();  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  t.getLastChild();  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  parent  =  t.getLastChild();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
245	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
246	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  if(NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  if(NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if(NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
247	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
248	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  if(NodeUtil.isStatementBlock(n)||  parent.getType()  >=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  if(NodeUtil.isStatementBlock(n)||  parent.getType()  >=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if(NodeUtil.isStatementBlock(n)||  parent.getType()  >=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
249	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild().getNext();  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  parent.getFirstChild().getNext();  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  parent.getFirstChild().getNext();	  Node    n    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
250	[BUG]  [BUGGY]  Node  n  =  n.getLastChild().getNext();  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getLastChild().getNext();  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  n.getLastChild().getNext();	  Node    n    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
251	[BUG]  [BUGGY]  Node  n  =  t.getFirstChild().getNext();  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  t.getFirstChild().getNext();  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  t.getFirstChild().getNext();	  Node    n    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
252	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    parent.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
253	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    parent.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
254	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (n.getType()!=    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	58	13	replace
255	[BUG]  [BUGGY]  if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (n.getType()!=    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	58	13	replace
256	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isExpressionNode(n)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
257	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isExpressionNode(n)||  n.getType()!=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isExpressionNode(n)||  n.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isExpressionNode(n)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isExpressionNode(n)||  n.getType()!=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
258	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isExpressionNode(n)||    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  ';'  expected	62	None	add
259	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isExpressionNode(n)||  n.getType()  >=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isExpressionNode(n)||  n.getType()  >=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isExpressionNode(n)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isExpressionNode(n)||  n.getType()  >=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
260	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.BLOCK);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
261	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.BLOCK);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
262	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.BLOCK);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
263	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.BLOCK);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
264	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isExpressionNode(n)&&  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isExpressionNode(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	63	1	replace
265	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  n.getType()  ==  Token.LABEL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isExpressionNode(n)&&  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isExpressionNode(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	63	1	replace
266	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    n.getLastChild();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
267	[BUG]  [BUGGY]  Node  n  =  parent.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  parent.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  parent.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    n.getLastChild();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
268	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    n.getLastChild();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
269	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
270	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
271	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
272	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
273	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (n.getType()!=    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	30	13	replace
274	[BUG]  [BUGGY]  if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (n.getType()!=    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	30	13	replace
275	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (parent.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	78	13	replace
276	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (parent.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	78	13	replace
277	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  &&  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(parent.getType()  ==  Token.LABEL  &&  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (parent.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	78	13	replace
278	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  &&  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  &&  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  &&  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (parent.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	78	13	replace
279	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if  (parent.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	51	13	replace
280	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.NAME)  {  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if  (parent.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	51	13	replace
281	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	92	13	add
282	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	92	13	add
283	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	92	13	add
284	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.LABEL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	92	13	add
285	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	92	13	add
286	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	92	13	add
287	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.  [CE]  <identifier>  expected  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.	  	non-compiled	[CE]  <identifier>  expected	92	None	add
288	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	92	13	add
289	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	92	13	add
290	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	92	13	add
291	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	92	13	add
292	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.NAME)    {    if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
293	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.NAME)    {    if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
294	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  if  (parent.getType()!=  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  if  (parent.getType()!=  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.NAME)    {    if  (parent.getType()!=  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
295	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  parent);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  parent);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  parent);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
296	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
297	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
298	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isName(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isName(n)||  parent.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isName(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	104	13	replace
299	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  parent.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isName(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isName(n)||  parent.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isName(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	104	13	replace
300	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isName(n)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isName(n)&&  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isName(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	104	1	replace
301	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  n.getType()  ==  Token.LABEL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isName(n)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isName(n)&&  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isName(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	104	1	replace
302	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isName(parent)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isName(parent)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isName(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	104	13	replace
303	[BUG]  [BUGGY]  if(NodeUtil.isName(parent)||  n.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isName(parent)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isName(parent)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isName(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	104	13	replace
304	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.NAME)    {    if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
305	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  if  (n.getType()!=  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  if  (n.getType()!=  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.NAME)    {    if  (n.getType()!=  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
306	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  if  (n.getType()  ==  Token.LABEL  &&  n.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  if  (n.getType()  ==  Token.LABEL  &&  n.getType()!=  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.NAME)    {    if  (n.getType()  ==  Token.LABEL  &&  n.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
307	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  If  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  If  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.NAME)    {    If  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
308	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    parent.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
309	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
310	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
311	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(NodeUtil.isStatementBlock(parent)||  NodeUtil.isStatementBlock(parent))  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(NodeUtil.isStatementBlock(parent)||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(NodeUtil.isStatementBlock(parent)||  NodeUtil.isStatementBlock(parent))  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (N.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
312	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isName(n)||  n.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isName(n)||  n.getType()!=  Token.LABEL)  {	  if(NodeUtil.isName(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	104	13	replace
313	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  n.getType()!=  Token.LABEL)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isName(n)||  n.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isName(n)||  n.getType()!=  Token.LABEL)  {	  if(NodeUtil.isName(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	104	13	replace
314	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.LABEL);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
315	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isExpressionNode(parent)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isExpressionNode(parent)&&  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isExpressionNode(parent)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	112	13	replace
316	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(parent)&&  n.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isExpressionNode(parent)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isExpressionNode(parent)&&  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isExpressionNode(parent)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	112	13	replace
317	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
318	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
319	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
320	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  if  (parent.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  if  (parent.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.NAME)    {    if  (parent.getType()  ==  Token.LABEL  &&  parent.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
321	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
322	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	61	13	replace
323	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	61	13	replace
324	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isExpressionNode(parent)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isExpressionNode(parent)||  parent.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	61	13	replace
325	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(parent)||  parent.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isExpressionNode(parent)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isExpressionNode(parent)||  parent.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	61	13	replace
326	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getParent();  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getParent();  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getParent();	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    parent.getParent();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
327	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    n    =    parent.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
328	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
329	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
330	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  t.getModule()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  t.getModule()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  t.getModule()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
331	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
332	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FU  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FU  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FU	  	non-compiled	[CE]  ')'  expected	99	None	add
333	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  If  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  If  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.STRING)    {    If  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	94	None	add
334	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
335	[BUG]  [BUGGY]  if(parent!=  null)  {  if  (parent.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent!=  null)  {  if  (parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent!=  null)  {  if  (parent.getType()  ==  Token.LABEL)  {	  if    (parent.getType()    ==    Token.LABEL)    {    if    (parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
336	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.LABEL)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (N.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
337	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(NodeUtil.isStatementBlock(parent)||  NodeUtil.isStatementBlock(parent))  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(NodeUtil.isStatementBlock(parent)||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(NodeUtil.isStatementBlock(parent)||  NodeUtil.isStatementBlock(parent))  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (N.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
338	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
339	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	9	13	add
340	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	9	13	add
341	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LIST);  [CE]  cannot  find  symbol  LIST  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LIST);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LIST);	  	non-compiled	[CE]  cannot  find  symbol  LIST	9	None	add
342	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  If(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  If(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.FUNCTION)    {    If(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
343	[BUG]  [BUGGY]  if(parent!=  null)  {  if  (parent.getType()!=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent!=  null)  {  if  (parent.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent!=  null)  {  if  (parent.getType()!=  Token.LABEL)  {	  if    (parent.getType()    ==    Token.LABEL)    {    if    (parent.getType()!=    Token.LABEL)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
344	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL)  {  if  (parent.getType()!=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL)  {  if  (parent.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL)  {  if  (parent.getType()!=  Token.LABEL)  {	  if    (parent.getType()    ==    Token.LABEL)    {    if    (parent.getType()!=    Token.LABEL)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
345	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
346	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.GETPROP);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
347	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n,  parent);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n,  parent);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n,  parent);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    parent);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
348	[BUG]  [BUGGY]  if(NodeUtil.isDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
349	[BUG]  [BUGGY]  if(NodeUtil.isStatementDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
350	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getParent();  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getParent();  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getParent();	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    n    =    parent.getParent();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
351	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (n.getType()!=    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
352	[BUG]  [BUGGY]  if(parent.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (n.getType()!=    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
353	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isName(n)||    n.getType()    ==    Token.LABEL)    {    NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  not  a  statement	103	None	add
354	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  If  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  If  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.LABEL)    {    If  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
355	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >>  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	15	None	add
356	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	15	13	add
357	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	15	13	add
358	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	15	13	add
359	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	15	13	add
360	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
361	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETPROP);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
362	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
363	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.STRING)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.STRING)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.STRING)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
364	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	92	13	add
365	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	92	13	add
366	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
367	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (parent.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
368	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isExpressionNode(n)||    n.getType()    ==    Token.LABEL)    {    NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  not  a  statement	62	None	add
369	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  If  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  If  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.NAME)    {    If  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	81	None	add
370	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	21	None	add
371	[BUG]  [BUGGY]  Node  n  =  parent.getParentNode();  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  parent.getParentNode();  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  parent.getParentNode();	  Node    parent    =    n.getParentNode();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
372	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  If  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  If  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.STRING)  {  If  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    If    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	97	None	replace
373	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  If  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  If  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  If  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    If    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	97	None	replace
374	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  arguments);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  arguments);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME,  arguments);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
375	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()!=    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
376	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
377	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
378	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.FUNCTION)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.FUNCTION)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.FUNCTION)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
379	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.STRING)  {  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (parent.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
380	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (parent.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	59	13	replace
381	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.STRING)  {  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (parent.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	59	13	replace
382	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()!=    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
383	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.STRING)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.STRING)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.STRING)  {  if(n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()!=    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
384	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (parent.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	78	13	replace
385	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (parent.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	78	13	replace
386	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  &&  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if  (parent.getType()  ==  Token.LABEL  &&  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (parent.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	78	13	replace
387	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  &&  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  &&  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if  (parent.getType()  ==  Token.LABEL  &&  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (parent.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	78	13	replace
388	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  if  (parent.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  if  (parent.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.FUNCTION)    {    if  (parent.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
389	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.SCRIPT);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.SCRIPT);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.SCRIPT);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
390	[BUG]  [BUGGY]  Préconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Préconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Préconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
391	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild().getParent();  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getFirstChild().getParent();  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  n.getFirstChild().getParent();	  Node    n    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
392	[BUG]  [BUGGY]  Node  n  =  node.getFirstChild().getNext();  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  node.getFirstChild().getNext();  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  node.getFirstChild().getNext();	  Node    n    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
393	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
394	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
395	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
396	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
397	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  not  a  statement	66	None	add
398	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (n.getType()!=    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
399	[BUG]  [BUGGY]  if(parent.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (n.getType()!=    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
400	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(parent.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	8	13	replace
401	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	8	13	replace
402	[BUG]  [BUGGY]  if(parent!=  null)  {  If  (parent.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent!=  null)  {  If  (parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent!=  null)  {  If  (parent.getType()  ==  Token.LABEL)  {	  if    (parent.getType()    ==    Token.LABEL)    {    If    (parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	74	None	replace
403	[BUG]  [BUGGY]  if(parent  ==  null)  {  If  (parent.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent  ==  null)  {  If  (parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent  ==  null)  {  If  (parent.getType()  ==  Token.LABEL)  {	  if    (parent.getType()    ==    Token.LABEL)    {    If    (parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	74	None	replace
404	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  If  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  If  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.FUNCTION)    {    If  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	48	None	add
405	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  If  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  If  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.NAME)    {    If  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	79	None	add
406	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
407	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
408	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
409	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
410	[BUG]  [BUGGY]  Préconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Préconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Préconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
411	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if  (parent.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (n.getType()!=    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	58	13	replace
412	[BUG]  [BUGGY]  if  (parent.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (parent.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if  (parent.getType()!=  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (n.getType()!=    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	58	13	replace
413	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (parent.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	31	13	replace
414	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (parent.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	31	13	replace
415	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (parent.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	31	13	replace
416	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (parent.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	31	13	replace
417	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    ((    n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  RuntimeException  	110	13	replace
418	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    ((    n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  RuntimeException  	110	13	replace
419	[BUG]  [BUGGY]  Node  parent  =  n.getImmediateParentNode();  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getImmediateParentNode();  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  parent  =  n.getImmediateParentNode();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
420	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (n.getType()!=    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	39	13	replace
421	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.NAME)  {  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (n.getType()!=    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	39	13	replace
422	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	96	13	replace
423	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.STRING)  {  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	96	13	replace
424	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()!=    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	38	13	replace
425	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.NAME)  {  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()!=    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	38	13	replace
426	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.LABEL)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()!=    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	38	13	replace
427	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.LABEL)  {  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.LABEL)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()!=    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	38	13	replace
428	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
429	[BUG]  [BUGGY]  if(NodeUtil.isReferenceName(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isReferenceName(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isReferenceName(n)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isName(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
430	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementString(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementString(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementString(n)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
431	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  if  (N.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  if  (N.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.LABEL)    {    if  (N.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
432	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()!=    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	57	13	replace
433	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.STRING)  {  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()!=    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	57	13	replace
434	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(parent.getType()!=  Token.LABEL)  {	  if    (parent.getType()    ==    Token.LABEL)    {    if    (parent.getType()!=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	73	13	replace
435	[BUG]  [BUGGY]  if(parent.getType()!=  Token.LABEL)  {  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()!=  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()!=  Token.LABEL)  {	  if    (parent.getType()    ==    Token.LABEL)    {    if    (parent.getType()!=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	73	13	replace
436	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  &&  parent.getFirstChild()  ==  n)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(parent.getType()  ==  Token.LABEL  &&  parent.getFirstChild()  ==  n)  {	  if    (parent.getType()    ==    Token.LABEL)    {    if    (parent.getType()!=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	73	13	replace
437	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  &&  parent.getFirstChild()  ==  n)  {  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  &&  parent.getFirstChild()  ==  n)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  &&  parent.getFirstChild()  ==  n)  {	  if    (parent.getType()    ==    Token.LABEL)    {    if    (parent.getType()!=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	73	13	replace
438	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementName(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementName(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementName(n)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
439	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
440	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	83	13	replace
441	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	83	13	replace
442	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	83	13	replace
443	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.NAME)  {  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	83	13	replace
444	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
445	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  If  (parent.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  If  (parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  If  (parent.getType()  ==  Token.LABEL)  {	  if    (parent.getType()    ==    Token.LABEL)    {    If    (parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	74	None	replace
446	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	47	13	replace
447	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	47	13	replace
448	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
449	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	9	13	add
450	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.LABEL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	9	13	add
451	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	9	13	add
452	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	9	13	add
453	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.CALL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
454	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  if  (parent.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  if  (parent.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.STRING)    {    if  (parent.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
455	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  t.getModule());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  t.getModule());  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME,  t.getModule());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
456	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  t.getModule()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  t.getModule()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  t.getModule()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
457	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(t.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(t.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(t.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
458	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	92	13	add
459	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	92	13	add
460	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.LAME);  [CE]  cannot  find  symbol  LAME  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.LAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.LAME);	  	non-compiled	[CE]  cannot  find  symbol  LAME	92	None	add
461	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	69	13	replace
462	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	69	13	replace
463	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	69	13	replace
464	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    &&    n.getType()    ==    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	69	13	replace
465	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.LABEL);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
466	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.BLOCK);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	15	13	add
467	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.BLOCK);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	15	13	add
468	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.ARRAY);  [CE]  cannot  find  symbol  ARRAY  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.ARRAY);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.ARRAY);	  	non-compiled	[CE]  cannot  find  symbol  ARRAY	15	None	add
469	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	15	13	add
470	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.LABEL);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	15	13	add
471	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.LAME);  [CE]  cannot  find  symbol  LAME  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.LAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.LAME);	  	non-compiled	[CE]  cannot  find  symbol  LAME	15	None	add
472	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.LABEL);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.LABEL);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.LABEL);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
473	[BUG]  [BUGGY]  Node  n  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    n    =    parent.getParent();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
474	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
475	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.NAME)  {	  if    (parent.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	80	13	replace
476	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.NAME)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.NAME)  {	  if    (parent.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	80	13	replace
477	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    n    =    n.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
478	[BUG]  [BUGGY]  Node  parent  =  t,  n.getParent();  [CE]  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  t,  n.getParent();  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  parent  =  t,  n.getParent();	  Node    parent    =    t.getParent();    	non-compiled	[CE]  	44	None	replace
479	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	21	13	add
480	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	                Preconditions.checkState(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	21	13	add
481	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
482	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isName(n)&|  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isName(n)&|  n.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isName(n)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isName(n)&|  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
483	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
484	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  if(NodeUtil.isStatementBlock(n)&|  parent.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  if(NodeUtil.isStatementBlock(n)&|  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if(NodeUtil.isStatementBlock(n)&|  parent.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
485	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.SCRIPT);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.SCRIPT);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.SCRIPT);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
486	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.STRING)  {  If  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.STRING)  {  If  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.STRING)  {  If  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    If    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	97	None	replace
487	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()!=    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	29	13	replace
488	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()!=    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	29	13	replace
489	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()!=  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(n.getType()!=  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()!=    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	29	13	replace
490	[BUG]  [BUGGY]  if(n.getType()!=  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()!=  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()!=  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (n.getType()    ==    Token.LABEL    ||    n.getType()!=    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	29	13	replace
491	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	85	13	replace
492	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	85	13	replace
493	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	85	13	replace
494	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if    (NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	85	13	replace
495	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
496	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
497	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(n.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.FUNCTION)  {	  if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	8	13	replace
498	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]      normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL  ||  parent.getType()!=  Token.FUNCTION)  {	  if(n.getType()    ==    Token.LABEL    ||    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	8	13	replace
499	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.EMPTY);	          Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
500	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeValues);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeValues);  [BUGGY]      if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeValues);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
