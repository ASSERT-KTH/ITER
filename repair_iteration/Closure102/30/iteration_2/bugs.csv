bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
5	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {	  if    (parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	18	13	replace
6	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {	  if    (parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	18	13	replace
7	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	18	13	replace
8	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(n.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	18	13	replace
9	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	19	13	add
10	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	19	13	add
11	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	19	None	add
12	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	19	None	add
13	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	19	None	add
14	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	19	None	add
15	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	19	13	add
16	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	19	13	add
17	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  arguments);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  arguments);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  arguments);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
21	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	21	13	add
22	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	21	13	add
23	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	21	None	add
24	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	21	None	add
25	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	21	None	add
26	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]            RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	21	None	add
27	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]              RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	21	None	add
28	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
29	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  if  (n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  if  (n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if  (n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
30	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  if  (n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  if  (n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if  (n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
31	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  if  (parent.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  if  (parent.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if  (parent.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
32	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
33	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()!=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()!=  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isStatementBlock(n)||  n.getType()!=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
34	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
35	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  >=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  if(NodeUtil.isStatementBlock(n)||  n.getType()  >=  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    if(NodeUtil.isStatementBlock(n)||  n.getType()  >=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
36	[BUG]  [BUGGY]  Node  n  =  t.getLastChild();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  n  =  t.getLastChild();  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  t.getLastChild();	      Node    n    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
37	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
38	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  if  (n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  if  (n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.NAME)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if  (n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
39	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  if  (n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  if  (n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if  (n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
40	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  if  (parent.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  if  (parent.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if  (parent.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
41	[BUG]  [BUGGY]  Node  parent  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  parent  =  n.getLastChild();  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  parent  =  n.getLastChild();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
42	[BUG]  [BUGGY]  Node  parent  =  n.getNext();  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  parent  =  n.getNext();  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  parent  =  n.getNext();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
43	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  parent  =  n.getFirstChild();  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  parent  =  n.getFirstChild();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
44	[BUG]  [BUGGY]  Node  parent  =  t.getParent();  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  parent  =  t.getParent();  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  parent  =  t.getParent();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
45	[BUG]  [BUGGY]  Node  n  =  t.getParent();  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  n  =  t.getParent();  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  t.getParent();	      Node    n    =    parent.getParent();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
46	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	10	1	replace
47	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	10	1	replace
48	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	10	13	replace
49	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	10	13	replace
50	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	8	1	replace
51	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.NAME)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	8	1	replace
52	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	8	12	replace
53	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if  (n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	8	12	replace
54	[BUG]  [BUGGY]  Node  n  =  t.getFirstChild();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  n  =  t.getFirstChild();  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  t.getFirstChild();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
55	[BUG]  [BUGGY]  Node  n  =  n.getNext();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  n  =  n.getNext();  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  n.getNext();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
56	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
57	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  if  (n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  if  (n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.STRING)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if  (n.getType()  ==  Token.LABEL  ||  n.getType()!=  Token.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
58	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  if  (n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  if  (n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if  (n.getType()!=  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
59	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  if  (parent.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  if  (parent.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if  (parent.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
60	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	16	13	replace
61	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	16	13	replace
62	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	16	10	replace
63	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isExpressionNode(n)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	16	10	replace
64	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	16	13	replace
65	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	16	13	replace
66	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	16	5	replace
67	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	16	5	replace
68	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	12	1	replace
69	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if  (n.getType()  ==  Token.LABEL  &&  n.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	12	1	replace
70	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	12	7	replace
71	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if  (n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.LABEL)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	12	7	replace
72	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL)  {  if  (parent.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (parent.getType()  ==  Token.LABEL)  {  if  (parent.getType()  ==  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL)    {    if  (parent.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
73	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL)  {  if  (parent.getType()!=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (parent.getType()  ==  Token.LABEL)  {  if  (parent.getType()!=  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL)    {    if  (parent.getType()!=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
74	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL)  {  If  (parent.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (parent.getType()  ==  Token.LABEL)  {  If  (parent.getType()  ==  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (parent.getType()    ==    Token.LABEL)    {    If  (parent.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  ';'  expected	17	None	add
75	[BUG]  [BUGGY]  Node  n  =  t.getNext();  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  n  =  t.getNext();  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  t.getNext();	      Node    n    =    parent.getNext();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
76	[BUG]  [BUGGY]  Node  parent  =  n.getParentNode();  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  parent  =  n.getParentNode();  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  parent  =  n.getParentNode();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
77	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	18	13	replace
78	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	18	13	replace
79	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {	  if    (parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	18	13	replace
80	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if  (parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.NAME)  {	  if    (parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	18	13	replace
81	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {	  if    (parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	18	13	replace
82	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.NAME)  {	  if    (parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	18	13	replace
83	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  if  (NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  if  (NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.NAME)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if  (NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
84	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  if  (N.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  if  (N.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.NAME)    {    if  (N.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
85	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  if  (NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  if  (NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if  (NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
86	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  if  (N.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  if  (N.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if  (N.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
87	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL);  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.LABEL);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
90	[BUG]  [BUGGY]  Node  n  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  n  =  node.getLastChild();  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  node.getLastChild();	      Node    n    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
91	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	19	None	add
92	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	19	13	add
93	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	19	13	add
94	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	12	13	replace
95	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if  (parent.getType()  ==  Token.LABEL  ||  parent.getType()  ==  Token.STRING)  {	  if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    	compilable	  [FE]  RuntimeException  	12	13	replace
96	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  if  (NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  if  (NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.STRING)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    if  (NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
97	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  If  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  If  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.STRING)    {    If  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
98	[BUG]  [BUGGY]  Node  n  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  n  =  node.getFirstChild();  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  node.getFirstChild();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
99	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	21	13	add
100	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	21	13	add
101	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
103	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	16	12	replace
104	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	16	12	replace
105	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild().getNext();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  n  =  n.getFirstChild().getNext();  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Node  n  =  n.getFirstChild().getNext();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.BLOCK);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.SCRIPT);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.SCRIPT);  [BUGGY]    if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.SCRIPT);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
110	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  if  ((  n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if  (n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION)  {  if  ((  n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION))  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if    (n.getType()    ==    Token.LABEL    ||    n.getType()    ==    Token.FUNCTION)    {    if  ((  n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.FUNCTION))  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
111	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(NodeUtil.isExpressionNode(parent)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	if(NodeUtil.isExpressionNode(parent)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	16	13	replace
112	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(parent)||  n.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(NodeUtil.isExpressionNode(parent)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	if(NodeUtil.isExpressionNode(parent)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isStatementBlock(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	16	13	replace
