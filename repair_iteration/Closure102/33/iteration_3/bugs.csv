bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  arguments);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Context.traverse(compiler,  n,  arguments);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Context.traverse(compiler,  n,  arguments);	  NodeTraversal.traverse(compiler,    n,    arguments);    	non-compiled	[CE]  not  a  statement	48	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  arguments,  null);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  arguments,  null);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  arguments,  null);	  NodeTraversal.traverse(compiler,    n,    arguments);    	non-compiled	[CE]  not  a  statement	48	None	replace
3	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclarations(parent)&&  NodeUtil.isStatementBlock(parent))  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclarations(parent)&&  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclarations(parent)&&  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isVarDeclarations(parent)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  not  a  statement	57	None	replace
4	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclarations(parent)||  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclarations(parent)||  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclarations(parent)||  NodeUtil.isFunctionDeclaration(parent))  {	  if(NodeUtil.isVarDeclarations(parent)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  not  a  statement	57	None	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  true);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  true);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  true);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    false);    	non-compiled	[CE]  not  a  statement	67	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  false);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  false);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  false);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    false);    	non-compiled	[CE]  not  a  statement	67	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  ScopeTicklingCallback(),  false);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  ScopeTicklingCallback(),  false);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  null,  new  ScopeTicklingCallback(),  false);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    false);    	non-compiled	[CE]  not  a  statement	67	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  false,  arguments);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  false,  arguments);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  false,  arguments);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    false);    	non-compiled	[CE]  not  a  statement	67	None	replace
9	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isGetProp(parent))  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isGetProp(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isGetProp(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isGetProp(parent))    {    	non-compiled	[CE]  not  a  statement	60	None	replace
10	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isGetProp(parent))  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isGetProp(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isGetProp(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isGetProp(parent))    {    	non-compiled	[CE]  not  a  statement	60	None	replace
11	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isGetProp(n))  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isGetProp(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isGetProp(n))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isGetProp(parent))    {    	non-compiled	[CE]  not  a  statement	60	None	replace
12	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isGetProp(n,  parent))  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isGetProp(n,  parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isGetProp(n,  parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isGetProp(parent))    {    	non-compiled	[CE]  not  a  statement	60	None	replace
13	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(parent))  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(parent))  {	  if(NodeUtil.isName(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
14	[BUG]  [BUGGY]  if(NodeUtil.isName(parent)||  NodeUtil.isStatementBlock(n))  {  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(parent)||  NodeUtil.isStatementBlock(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(parent)||  NodeUtil.isStatementBlock(n))  {	  if(NodeUtil.isName(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
15	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isStatementBlock(parent))  {  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(n)&&  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isName(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback());  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback());  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    arguments,    new    ScopeTicklingCallback());    	non-compiled	[CE]  not  a  statement	50	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  getVarDeclarations(),  new  ScopeTicklingCallback());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  getVarDeclarations(),  new  ScopeTicklingCallback());  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  getVarDeclarations(),  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    arguments,    new    ScopeTicklingCallback());    	non-compiled	[CE]  not  a  statement	50	None	replace
18	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  arguments);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  arguments);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  arguments);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  not  a  statement	66	None	replace
19	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  argument);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  argument);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  argument);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  not  a  statement	66	None	replace
20	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  null);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  null);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  null);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  not  a  statement	66	None	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  this);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  this);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  this);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  not  a  statement	66	None	replace
22	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  null);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  null);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  this,  arguments,  null);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  not  a  statement	46	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  expectedConst);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  expectedConst);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  this,  arguments,  expectedConst);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  not  a  statement	46	None	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  parent);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  parent);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  this,  arguments,  parent);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  not  a  statement	46	None	replace
25	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argumentMap);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argumentMap);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  this,  argumentMap);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  not  a  statement	46	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  false);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  false);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  this,  arguments,  false);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  not  a  statement	46	None	replace
27	[BUG]  [BUGGY]  Node  parent  =  arguments.getNext();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  parent  =  arguments.getNext();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  parent  =  arguments.getNext();	  Node    parent    =    n.getNext();    	non-compiled	[CE]  not  a  statement	20	None	replace
28	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclarations(parent)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclarations(parent)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclarations(parent)||  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
29	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclarations(n)&&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclarations(n)&&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclarations(n)&&  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
30	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
31	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclarations(n))  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclarations(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclarations(n))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
32	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclarations(parent)||  NodeUtil.isVarDeclarations(n))  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclarations(parent)||  NodeUtil.isVarDeclarations(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclarations(parent)||  NodeUtil.isVarDeclarations(n))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isVarDeclarations(parent))    {    	non-compiled	[CE]  not  a  statement	76	None	replace
33	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclarations(parent))  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclarations(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isVarDeclarations(parent))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isVarDeclarations(parent))    {    	non-compiled	[CE]  not  a  statement	76	None	replace
34	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclarations(n)&&  NodeUtil.isVarDeclarations(parent))  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclarations(n)&&  NodeUtil.isVarDeclarations(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclarations(n)&&  NodeUtil.isVarDeclarations(parent))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isVarDeclarations(parent))    {    	non-compiled	[CE]  not  a  statement	76	None	replace
35	[BUG]  [BUGGY]  Node  v  =  parent.getNext();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  v  =  parent.getNext();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  v  =  parent.getNext();	  Node    v    =    n.getNext();    	non-compiled	[CE]  not  a  statement	27	None	replace
36	[BUG]  [BUGGY]  Node  v  =  n.getParent();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  v  =  n.getParent();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  v  =  n.getParent();	  Node    v    =    n.getNext();    	non-compiled	[CE]  not  a  statement	27	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument,  null);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument,  null);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  this,  argument,  null);	  NodeTraversal.traverse(compiler,    n,    this,    argument);    	non-compiled	[CE]  not  a  statement	47	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  this,  null);	  NodeTraversal.traverse(compiler,    n,    this,    argument);    	non-compiled	[CE]  not  a  statement	47	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  this,  parent);	  NodeTraversal.traverse(compiler,    n,    this,    argument);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument,  false);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument,  false);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  this,  argument,  false);	  NodeTraversal.traverse(compiler,    n,    this,    argument);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
41	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclarations(parent)&&  NodeUtil.isStatementBlock(n))  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclarations(parent)&&  NodeUtil.isStatementBlock(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclarations(parent)&&  NodeUtil.isStatementBlock(n))  {	  if(NodeUtil.isVarDeclarations(n)&&    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
42	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isStatementBlock(parent))  {  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isVarDeclarations(n)&&    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
43	[BUG]  [BUGGY]  Node  parent  =  arguments.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  parent  =  arguments.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  parent  =  arguments.getFirstChild();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
44	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  n.getType()  ==  Token.VAR;  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  n.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isFunctionDeclaration(n)&&  n.getType()  ==  Token.VAR;	  NodeUtil.isFunctionDeclaration(n)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
45	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(parent)||  n.getType()  ==  Token.VAR;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isFunctionDeclaration(parent)||  n.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isFunctionDeclaration(parent)||  n.getType()  ==  Token.VAR;	  NodeUtil.isFunctionDeclaration(n)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
46	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.VAR;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.VAR;	  NodeUtil.isFunctionDeclaration(n)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
47	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isFunctionDeclaration(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
48	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
49	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
50	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(parent))  {  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
51	[BUG]  [BUGGY]  if(NodeUtil.isName(parent)&&  NodeUtil.isStatementBlock(parent))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(parent)&&  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(parent)&&  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isName(parent)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
52	[BUG]  [BUGGY]  if(NodeUtil.isName(parent)||  NodeUtil.isVarDeclaration(parent))  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(parent)||  NodeUtil.isVarDeclaration(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(parent)||  NodeUtil.isVarDeclaration(parent))  {	  if(NodeUtil.isName(parent)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
53	[BUG]  [BUGGY]  if(NodeUtil.isName(parent)||  NodeUtil.isVarDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(parent)||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(parent)||  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isName(n)||    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
54	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isVarDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(n)&&  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isName(n)||    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
55	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.NAME)  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.NAME)  {	  if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
56	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(n)||  n.getType()  ==  Token.NAME)  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(n)||  n.getType()  ==  Token.NAME)  {	  if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
57	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.NAME)  {	  if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
58	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  n.getType()  ==  Token.NAME)  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(parent)||  n.getType()  ==  Token.NAME)  {	  if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
59	[BUG]  [BUGGY]  Node  n  =  arguments.getLastChild();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  n  =  arguments.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  n  =  arguments.getLastChild();	  Node    n    =    parent.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
60	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.VAR);	  NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
61	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(parent)||  parent.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isVarDeclaration(parent)||  parent.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclaration(parent)||  parent.getType()  ==  Token.VAR);	  NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
62	[BUG]  [BUGGY]  Node  parent  =  n.removeLastChild();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  parent  =  n.removeLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  parent  =  n.removeLastChild();	  Node    parent    =    n.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
63	[BUG]  [BUGGY]  NodeUtil.isVarDeclarations(n)&&  parent.getType()  ==  Token.VAR;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isVarDeclarations(n)&&  parent.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclarations(n)&&  parent.getType()  ==  Token.VAR;	  NodeUtil.isVarDeclarations(n)||    parent.getType()    ==    Token.VAR;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
64	[BUG]  [BUGGY]  NodeUtil.isVarDeclarations(parent)||  parent.getType()  ==  Token.VAR;  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isVarDeclarations(parent)||  parent.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclarations(parent)||  parent.getType()  ==  Token.VAR;	  NodeUtil.isVarDeclarations(n)||    parent.getType()    ==    Token.VAR;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
65	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isStatementBlock(parent))  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isVarDeclaration(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
66	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  NodeUtil.isStatementBlock(parent))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isVarDeclaration(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
67	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  NodeUtil.isStatementBlock(parent))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isVarDeclaration(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
68	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isVarDeclaration(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
69	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isVarDeclaration(parent)||  NodeUtil.isStatementBlock(parent))  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isVarDeclaration(parent)||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isVarDeclaration(parent)||  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isVarDeclaration(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
70	[BUG]  [BUGGY]  Node  var  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  var  =  node.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  var  =  node.getFirstChild();	  Node    var    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
71	[BUG]  [BUGGY]  NodeUtil.isVarDeclarations(parent)&&  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isVarDeclarations(parent)&&  n.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclarations(parent)&&  n.getType()  ==  Token.VAR);	  NodeUtil.isVarDeclarations(n)&&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
72	[BUG]  [BUGGY]  NodeUtil.isNamedVarDeclarations(n)&&  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isNamedVarDeclarations(n)&&  n.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isNamedVarDeclarations(n)&&  n.getType()  ==  Token.VAR);	  NodeUtil.isVarDeclarations(n)&&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
73	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclarations(n)&&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclarations(n)&&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclarations(n)&&  NodeUtil.isFunctionDeclaration(parent))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
74	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclarations(parent))  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclarations(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclarations(parent))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
75	[BUG]  [BUGGY]  NodeUtil.isName(n)&&  n.getType()  ==  Token.VAR;  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isName(n)&&  n.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isName(n)&&  n.getType()  ==  Token.VAR;	  NodeUtil.isName(n)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
76	[BUG]  [BUGGY]  NodeUtil.isName(parent)||  n.getType()  ==  Token.VAR;  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isName(parent)||  n.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isName(parent)||  n.getType()  ==  Token.VAR;	  NodeUtil.isName(n)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
77	[BUG]  [BUGGY]  NodeUtil.isVar(n)||  n.getType()  ==  Token.VAR;  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isVar(n)||  n.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVar(n)||  n.getType()  ==  Token.VAR;	  NodeUtil.isName(n)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
78	[BUG]  [BUGGY]  NodeUtil.isName(n)||  parent.getType()  ==  Token.VAR;  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isName(n)||  parent.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isName(n)||  parent.getType()  ==  Token.VAR;	  NodeUtil.isName(n)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
79	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isExpressionNode(parent))  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isExpressionNode(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isExpressionNode(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isExpressionNode(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
80	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isExpressionNode(n))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isExpressionNode(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
81	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isExpressionNode(parent))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isExpressionNode(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isExpressionNode(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isExpressionNode(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
82	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isExpressionNode(parent)||  parent.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isExpressionNode(parent)||  parent.getType()  ==  Token.VAR)  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isExpressionNode(parent)||  parent.getType()  ==  Token.VAR)  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isExpressionNode(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
83	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isName(parent))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isName(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isName(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isName(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
84	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isName(parent)&&  arguments.length()  >  0)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isName(parent)&&  arguments.length()  >  0)  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isName(parent)&&  arguments.length()  >  0)  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isName(parent))    {    	non-compiled	[CE]  	77	None	replace
85	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(parent)&&  n.getType()  ==  Token.VAR);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isVarDeclaration(parent)&&  n.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclaration(parent)&&  n.getType()  ==  Token.VAR);	  NodeUtil.isVarDeclaration(parent)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	16	None	replace
86	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(parent)||  parent.getType()  ==  Token.VAR;  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isVarDeclaration(parent)||  parent.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclaration(parent)||  parent.getType()  ==  Token.VAR;	  NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.VAR;    	non-compiled	[CE]  	25	None	replace
87	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.VAR;  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.VAR;	  NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.VAR;    	non-compiled	[CE]  	25	None	replace
88	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.VAR)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.VAR)  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.VAR)  {	  if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	40	None	replace
89	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	40	None	replace
90	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	40	None	replace
91	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	40	None	replace
92	[BUG]  [BUGGY]  Node  n  =  parent.getNext();  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  n  =  parent.getNext();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  n  =  parent.getNext();	  Node    n    =    parent.getParent();    	non-compiled	[CE]  	56	None	replace
93	[BUG]  [BUGGY]  Node  n  =  n.getNext();  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  n  =  n.getNext();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  n  =  n.getNext();	  Node    n    =    parent.getParent();    	non-compiled	[CE]  	56	None	replace
94	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(parent)&&  NodeUtil.isStatementBlock(parent))  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(parent)&&  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(parent)&&  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isVarDeclaration(parent)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  	59	None	replace
95	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(parent)&&  NodeUtil.isStatementBlock(n))  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(parent)&&  NodeUtil.isStatementBlock(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(parent)&&  NodeUtil.isStatementBlock(n))  {	  if(NodeUtil.isVarDeclaration(n)&&    NodeUtil.isStatementBlock(n))    {    	non-compiled	[CE]  	45	None	replace
96	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isStatementBlock(n))  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isStatementBlock(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isStatementBlock(n))  {	  if(NodeUtil.isVarDeclaration(n)&&    NodeUtil.isStatementBlock(n))    {    	non-compiled	[CE]  	45	None	replace
97	[BUG]  [BUGGY]  NodeUtil.isName(n)&&  n.getType()  ==  Token.VAR);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isName(n)&&  n.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isName(n)&&  n.getType()  ==  Token.VAR);	  NodeUtil.isName(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	13	None	replace
98	[BUG]  [BUGGY]  NodeUtil.isName(parent)||  n.getType()  ==  Token.VAR);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isName(parent)||  n.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isName(parent)||  n.getType()  ==  Token.VAR);	  NodeUtil.isName(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	13	None	replace
99	[BUG]  [BUGGY]  NodeUtil.isVar(n)||  n.getType()  ==  Token.VAR);  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isVar(n)||  n.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVar(n)||  n.getType()  ==  Token.VAR);	  NodeUtil.isName(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	13	None	replace
100	[BUG]  [BUGGY]  NodeUtil.isName(n)||  parent.getType()  ==  Token.VAR);  [CE]  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isName(n)||  parent.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isName(n)||  parent.getType()  ==  Token.VAR);	  NodeUtil.isName(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	13	None	replace
101	[BUG]  [BUGGY]  Node  v  =  parent.removeFirstChild();  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  v  =  parent.removeFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  v  =  parent.removeFirstChild();	  Node    v    =    n.removeFirstChild();    	non-compiled	[CE]  	69	None	replace
102	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  null);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  null);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  null);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    arguments);    	non-compiled	[CE]  	51	None	replace
103	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  parent);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  parent);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  parent);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    arguments);    	non-compiled	[CE]  	51	None	replace
104	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  this);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  this);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  this);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    arguments);    	non-compiled	[CE]  	51	None	replace
105	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isVarDeclaration(parent))  {  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isVarDeclaration(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isVarDeclaration(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isVarDeclaration(parent))    {    	non-compiled	[CE]  	74	None	replace
106	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isVarDeclaration(n))  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isVarDeclaration(parent))    {    	non-compiled	[CE]  	74	None	replace
107	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isNamedVarDeclaration(parent))  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isNamedVarDeclaration(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isNamedVarDeclaration(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isVarDeclaration(parent))    {    	non-compiled	[CE]  	74	None	replace
108	[BUG]  [BUGGY]  Node  v  =  node.getLastChild();  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  v  =  node.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  v  =  node.getLastChild();	  Node    v    =    parent.getLastChild();    	non-compiled	[CE]  	1	None	replace
109	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  null);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  parent,  null);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  parent,  null);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  	49	None	replace
110	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  argument);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  argument);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  argument);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
111	[BUG]  [BUGGY]  Node  n  =  this.arguments.getFirstChild();  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  n  =  this.arguments.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  n  =  this.arguments.getFirstChild();	  Node    n    =    arguments.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
112	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations().getFirstChild();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  n  =  getVarDeclarations().getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  n  =  getVarDeclarations().getFirstChild();	  Node    n    =    arguments.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
113	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  n.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isFunctionDeclaration(n)&&  n.getType()  ==  Token.VAR);	  NodeUtil.isVarDeclaration(n)&&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
114	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(parent)&&  n.getType()  ==  Token.VAR;  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isVarDeclaration(parent)&&  n.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclaration(parent)&&  n.getType()  ==  Token.VAR;	  NodeUtil.isVarDeclaration(n)&&    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
115	[BUG]  [BUGGY]  NodeUtil.isNamedVarDeclaration(n)&&  n.getType()  ==  Token.VAR;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isNamedVarDeclaration(n)&&  n.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isNamedVarDeclaration(n)&&  n.getType()  ==  Token.VAR;	  NodeUtil.isVarDeclaration(n)&&    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
116	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isStatementBlock(n))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isStatementBlock(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(n)&&  NodeUtil.isStatementBlock(n))  {	  if(NodeUtil.isVarDeclarations(n)&&    NodeUtil.isStatementBlock(n))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
117	[BUG]  [BUGGY]  Node  var  =  parent.getLastChild();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  var  =  parent.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  var  =  parent.getLastChild();	  Node    var    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
118	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isVarDeclaration(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
119	[BUG]  [BUGGY]  if(!NodeUtil.isVarDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(!NodeUtil.isVarDeclaration(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(!NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isVarDeclaration(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
120	[BUG]  [BUGGY]  Node  n  =  this.parent.getLastChild();  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  n  =  this.parent.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  n  =  this.parent.getLastChild();	  Node    n    =    this.parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
121	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isVarDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
122	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
123	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n))  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
124	[BUG]  [BUGGY]  NodeUtil.isNamedVarDeclarations(n)||  n.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isNamedVarDeclarations(n)||  n.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isNamedVarDeclarations(n)||  n.getType()  ==  Token.VAR;	  NodeUtil.isVarDeclarations(parent)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
125	[BUG]  [BUGGY]  Node  var  =  n.getLastChild().getNext();  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  var  =  n.getLastChild().getNext();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  var  =  n.getLastChild().getNext();	  Node    var    =    n.getFirstChild().getNext();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
126	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild().getNext();  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  var  =  parent.getFirstChild().getNext();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  var  =  parent.getFirstChild().getNext();	  Node    var    =    n.getFirstChild().getNext();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
127	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild().getParent();  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  var  =  n.getFirstChild().getParent();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  var  =  n.getFirstChild().getParent();	  Node    var    =    n.getFirstChild().getNext();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
128	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild().getString();  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  var  =  n.getFirstChild().getString();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  var  =  n.getFirstChild().getString();	  Node    var    =    n.getFirstChild().getNext();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
129	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isStatementBlock(parent))  {  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isVarDeclaration(n)&&    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
130	[BUG]  [BUGGY]  Node  n  =  t.getLastChild();  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  n  =  t.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  n  =  t.getLastChild();	  Node    n    =    t.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
131	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isNamedFunction(parent))  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isNamedFunction(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isNamedFunction(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isNamedFunction(n))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
132	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isNamedFunction(n))  {  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isNamedFunction(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isNamedFunction(n))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isNamedFunction(n))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
133	[BUG]  [BUGGY]  if(NodeUtil.isNamedFunction(n)||  NodeUtil.isVarDeclaration(n))  {  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isNamedFunction(n)||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isNamedFunction(n)||  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isNamedFunction(n))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
134	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isNamedFunction(n))  {  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isNamedFunction(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isNamedFunction(n))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isNamedFunction(n))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
135	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunction(parent))  {  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunction(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunction(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isNamedFunction(n))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
136	[BUG]  [BUGGY]  NodeUtil.isVarDeclarations(n)&&  parent.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isVarDeclarations(n)&&  parent.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclarations(n)&&  parent.getType()  ==  Token.VAR);	  NodeUtil.isVarDeclarations(n)||    parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
137	[BUG]  [BUGGY]  NodeUtil.isVarDeclarations(parent)||  parent.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isVarDeclarations(parent)||  parent.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclarations(parent)||  parent.getType()  ==  Token.VAR);	  NodeUtil.isVarDeclarations(n)||    parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
138	[BUG]  [BUGGY]  NodeUtil.isNamedFunctionDeclaration(n)&&  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isNamedFunctionDeclaration(n)&&  n.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isNamedFunctionDeclaration(n)&&  n.getType()  ==  Token.VAR);	  NodeUtil.isNamedFunctionDeclaration(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
139	[BUG]  [BUGGY]  NodeUtil.isNamedFunctionDeclaration(n)||  parent.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isNamedFunctionDeclaration(n)||  parent.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isNamedFunctionDeclaration(n)||  parent.getType()  ==  Token.VAR);	  NodeUtil.isNamedFunctionDeclaration(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
140	[BUG]  [BUGGY]  NodeUtil.isNamedFunctionDeclaration(parent)||  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isNamedFunctionDeclaration(parent)||  n.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isNamedFunctionDeclaration(parent)||  n.getType()  ==  Token.VAR);	  NodeUtil.isNamedFunctionDeclaration(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
141	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  arguments);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  arguments);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  arguments);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  <identifier>  expected	52	None	replace
142	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  new  ScopeTicklingCallback());  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  new  ScopeTicklingCallback());  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  arguments,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  <identifier>  expected	52	None	replace
143	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  <identifier>  expected	52	None	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  <identifier>  expected	52	None	replace
145	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(parent)||  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isFunctionDeclaration(parent)||  n.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isFunctionDeclaration(parent)||  n.getType()  ==  Token.VAR);	  NodeUtil.isFunctionDeclaration(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
146	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.VAR);	  NodeUtil.isFunctionDeclaration(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
147	[BUG]  [BUGGY]  NodeUtil.isVarDeclarations(parent)&&  n.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isVarDeclarations(parent)&&  n.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclarations(parent)&&  n.getType()  ==  Token.VAR;	  NodeUtil.isVarDeclarations(n)&&    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
148	[BUG]  [BUGGY]  NodeUtil.isNamedVarDeclarations(n)&&  n.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isNamedVarDeclarations(n)&&  n.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isNamedVarDeclarations(n)&&  n.getType()  ==  Token.VAR;	  NodeUtil.isVarDeclarations(n)&&    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
149	[BUG]  [BUGGY]  Node  var  =  arguments.getLastChild();  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  var  =  arguments.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  var  =  arguments.getLastChild();	  Node    var    =    arguments.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
150	[BUG]  [BUGGY]  Node  var  =  arguments!=  null?  arguments.getFirstChild()  :  n;  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  var  =  arguments!=  null?  arguments.getFirstChild()  :  n;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  var  =  arguments!=  null?  arguments.getFirstChild()  :  n;	  Node    var    =    arguments.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
151	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  arguments);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
152	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argument);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argument);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argument);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
153	[BUG]  [BUGGY]  Node  var  =  n.getfirstChild();  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  var  =  n.getfirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  var  =  n.getfirstChild();	  Node    var    =    parent.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
154	[BUG]  [BUGGY]  NodeUtil.isVar(parent)||  n.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isVar(parent)||  n.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVar(parent)||  n.getType()  ==  Token.VAR;	  NodeUtil.isName(n)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  <identifier>  expected	52	None	replace
156	[BUG]  [BUGGY]  Node  n  =  node.getFirstChild();  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  n  =  node.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  n  =  node.getFirstChild();	  Node    n    =    t.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
157	[BUG]  [BUGGY]  Node  n  =  parent.getfirstChild();  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  n  =  parent.getfirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  n  =  parent.getfirstChild();	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
158	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isName(parent))  {  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isName(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isName(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isName(parent))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
159	[BUG]  [BUGGY]  Node  parent  =  n.getImmediateParent();  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  parent  =  n.getImmediateParent();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  parent  =  n.getImmediateParent();	  Node    parent    =    n.getPreviousParent();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
160	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclarations(parent)||  NodeUtil.isStatementBlock(n))  {  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclarations(parent)||  NodeUtil.isStatementBlock(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isVarDeclarations(parent)||  NodeUtil.isStatementBlock(n))  {	  if(NodeUtil.isVarDeclarations(parent)||    NodeUtil.isStatementBlock(n))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
161	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isFunctionDeclaration(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
162	[BUG]  [BUGGY]  Node  n  =  this.parent.getNext();  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  n  =  this.parent.getNext();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  n  =  this.parent.getNext();	  Node    n    =    parent.getParent();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
163	[BUG]  [BUGGY]  Node  parent  =  n.getPreviousChild();  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  parent  =  n.getPreviousChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  parent  =  n.getPreviousChild();	  Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
164	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  arguments);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  arguments);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  null,  arguments);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parser);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  parser);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  parser);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
166	[BUG]  [BUGGY]  Node  parent  =  n.getImmediateParentNode();  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  parent  =  n.getImmediateParentNode();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  parent  =  n.getImmediateParentNode();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
167	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  NON_GLOBAL_NAMES_UNIQUE);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  NON_GLOBAL_NAMES_UNIQUE);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  NON_GLOBAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    n,    arguments);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
168	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  NON_GLOBAL_DEFINE_TARGETS);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  NON_GLOBAL_DEFINE_TARGETS);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  NON_GLOBAL_DEFINE_TARGETS);	  NodeTraversal.traverse(compiler,    n,    arguments);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
169	[BUG]  [BUGGY]  Node  n  =  node.getLastChild();  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  n  =  node.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  n  =  node.getLastChild();	  Node    n    =    parent.getLastChild();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
170	[BUG]  [BUGGY]  if(NodeUtil.isName(parent)||  NodeUtil.isVarDeclarations(n))  {  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(parent)||  NodeUtil.isVarDeclarations(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(parent)||  NodeUtil.isVarDeclarations(n))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isVarDeclarations(parent))    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
171	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclarations(n)||  NodeUtil.isName(parent))  {  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclarations(n)||  NodeUtil.isName(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclarations(n)||  NodeUtil.isName(parent))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isVarDeclarations(parent))    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
172	[BUG]  [BUGGY]  if(NodeUtil.isVar(n)||  NodeUtil.isStatementBlock(parent))  {  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVar(n)||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVar(n)||  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isName(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
173	[BUG]  [BUGGY]  if(NodeUtil.isVar(parent)||  NodeUtil.isStatementBlock(parent))  {  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVar(parent)||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVar(parent)||  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isName(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
174	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(parent)||  n.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
175	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isExpressionNode(parent))  {  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isExpressionNode(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isExpressionNode(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isExpressionNode(parent))    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
176	[BUG]  [BUGGY]  NodeUtil.isVar(parent)||  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isVar(parent)||  n.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVar(parent)||  n.getType()  ==  Token.VAR);	  NodeUtil.isName(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
177	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isName(parent)||  NodeUtil.isStatementBlock(parent))  {  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isName(parent)||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isName(parent)||  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isName(parent)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
178	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild().getLastChild();  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  var  =  n.getFirstChild().getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  var  =  n.getFirstChild().getLastChild();	  Node    var    =    n.getFirstChild().getNext();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
179	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argumentMap);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
180	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(parent)||  NodeUtil.isStatementBlock(n))  {  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(parent)||  NodeUtil.isStatementBlock(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(parent)||  NodeUtil.isStatementBlock(n))  {	  if(NodeUtil.isVarDeclaration(parent)||    NodeUtil.isStatementBlock(n))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
181	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  extractForInitializer(n,  null,  null));  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  extractForInitializer(n,  null,  null));  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  this,  extractForInitializer(n,  null,  null));	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
182	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  extractForInitializer(n,  parent);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  extractForInitializer(n,  parent);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  this,  extractForInitializer(n,  parent);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
183	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isName(n))  {  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isName(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isName(n))  {	  if(NodeUtil.isName(n)||    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
184	[BUG]  [BUGGY]  Node  var  =  arguments!=  null?  arguments.getLastChild()  :  n;  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  var  =  arguments!=  null?  arguments.getLastChild()  :  n;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  var  =  arguments!=  null?  arguments.getLastChild()  :  n;	  Node    var    =    arguments.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
185	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument,  expectedConst);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument,  expectedConst);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  this,  argument,  expectedConst);	  NodeTraversal.traverse(compiler,    n,    this,    argument);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
186	[BUG]  [BUGGY]  NodeUtil.isNamedFunctionDeclaration(n)&&  n.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isNamedFunctionDeclaration(n)&&  n.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isNamedFunctionDeclaration(n)&&  n.getType()  ==  Token.VAR;	  NodeUtil.isVarDeclaration(n)&&    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
187	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  arguments);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  arguments);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  arguments);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    arguments);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
188	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isVarDeclaration(parent))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isVarDeclaration(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isVarDeclaration(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isVarDeclaration(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
189	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isGetProp(parent))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isGetProp(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isGetProp(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isGetProp(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
190	[BUG]  [BUGGY]  if(NodeUtil.isName(n))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(n))  {	  if(NodeUtil.isVarDeclaration(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
191	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(parent)||  NodeUtil.isStatementBlock(parent))  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(parent)||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(parent)||  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isVarDeclaration(parent)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
192	[BUG]  [BUGGY]  Node  v  =  n.getfirstChild();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  v  =  n.getfirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  v  =  n.getfirstChild();	  Node    v    =    parent.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
193	[BUG]  [BUGGY]  Node  v  =  n.getlastChild();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  v  =  n.getlastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  v  =  n.getlastChild();	  Node    v    =    parent.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
194	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    false);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
195	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isName(n)||  NodeUtil.isStatementBlock(parent))  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isName(n)||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isName(n)||  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isVarDeclaration(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  	71	None	replace
196	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isNamedFunction(n)||  NodeUtil.isStatementBlock(parent))  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isNamedFunction(n)||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isNamedFunction(n)||  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isVarDeclaration(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
197	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isNamedFunction(parent))  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isNamedFunction(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isNamedFunction(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isNamedFunction(n))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
198	[BUG]  [BUGGY]  Node  n  =  parents.getFirstChild();  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  n  =  parents.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  n  =  parents.getFirstChild();	  Node    n    =    arguments.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
199	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  getVarDeclarations());  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  getVarDeclarations());  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  getVarDeclarations());	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
200	[BUG]  [BUGGY]  Node  parent  =  n.getOwnerNode();  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  parent  =  n.getOwnerNode();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  parent  =  n.getOwnerNode();	  Node    parent    =    n.getParentNode();    	non-compiled	[CE]  	62	None	replace
201	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  extractForInitializer(n,  parent,  arguments);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  extractForInitializer(n,  parent,  arguments);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  this,  extractForInitializer(n,  parent,  arguments);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  	46	None	replace
202	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  extractForVarDeclarations(n);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  extractForVarDeclarations(n);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  this,  extractForVarDeclarations(n);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  	46	None	replace
203	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(parent)&&  parent.getType()  ==  Token.VAR;  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isVarDeclaration(parent)&&  parent.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclaration(parent)&&  parent.getType()  ==  Token.VAR;	  NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.VAR;    	non-compiled	[CE]  	25	None	replace
204	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.NAME  ||!NodeUtil.mayHaveSideEffects(n))  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.NAME  ||!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.NAME  ||!NodeUtil.mayHaveSideEffects(n))  {	  if(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	41	None	replace
205	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isVarDeclaration(parent))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isVarDeclaration(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(n)&&  NodeUtil.isVarDeclaration(parent))  {	  if(NodeUtil.isVarDeclaration(n)&&    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
206	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.mayHaveSideEffects(n))  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.mayHaveSideEffects(n))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
207	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isAssignmentOp(n))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isAssignmentOp(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isAssignmentOp(n))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
208	[BUG]  [BUGGY]  if(NodeUtil.isNamedVarDeclaration(n)||  NodeUtil.isNamedFunction(parent))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isNamedVarDeclaration(n)||  NodeUtil.isNamedFunction(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isNamedVarDeclaration(n)||  NodeUtil.isNamedFunction(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isNamedFunction(n))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
209	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  null);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  null);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  null);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
210	[BUG]  [BUGGY]  Node  var  =  n.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  var  =  n.removeFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  var  =  n.removeFirstChild();	  Node    var    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
211	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isVarDeclaration(parent)||  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isVarDeclaration(parent)||  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isVarDeclaration(parent)||  NodeUtil.isFunctionDeclaration(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isVarDeclaration(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
212	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclarations(parent)||  NodeUtil.isStatementBlock(parent))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclarations(parent)||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isVarDeclarations(parent)||  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isVarDeclarations(parent)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
213	[BUG]  [BUGGY]  NodeUtil.isNamedFunctionDeclaration(n)||  n.getType()  ==  Token.VAR;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isNamedFunctionDeclaration(n)||  n.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isNamedFunctionDeclaration(n)||  n.getType()  ==  Token.VAR;	  NodeUtil.isVarDeclaration(parent)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
214	[BUG]  [BUGGY]  NodeUtil.isNamedVarDeclaration(n)||  n.getType()  ==  Token.VAR;  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isNamedVarDeclaration(n)||  n.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isNamedVarDeclaration(n)||  n.getType()  ==  Token.VAR;	  NodeUtil.isVarDeclaration(parent)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
215	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  expectedConst);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  expectedConst);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  expectedConst);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    arguments);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
216	[BUG]  [BUGGY]  Node  v  =  getVarDeclarations(n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  v  =  getVarDeclarations(n.getFirstChild());  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  v  =  getVarDeclarations(n.getFirstChild());	  Node    v    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
217	[BUG]  [BUGGY]  Node  v  =  arguments.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  v  =  arguments.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  v  =  arguments.getFirstChild();	  Node    v    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
218	[BUG]  [BUGGY]  NodeUtil.isNamedVarDeclarations(n)||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isNamedVarDeclarations(n)||  n.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isNamedVarDeclarations(n)||  n.getType()  ==  Token.VAR);	  NodeUtil.isVarDeclarations(parent)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
219	[BUG]  [BUGGY]  NodeUtil.isNamedVarDeclaration(n)||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isNamedVarDeclaration(n)||  n.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isNamedVarDeclaration(n)||  n.getType()  ==  Token.VAR);	  NodeUtil.isVarDeclaration(parent)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  false,  null);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  false,  null);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  false,  null);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    false);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
221	[BUG]  [BUGGY]  Node  var  =  arguments  ==  null?  arguments.getFirstChild()  :  n;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  var  =  arguments  ==  null?  arguments.getFirstChild()  :  n;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  var  =  arguments  ==  null?  arguments.getFirstChild()  :  n;	  Node    var    =    arguments.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
222	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(parent)&&  parent.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isVarDeclaration(parent)&&  parent.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclaration(parent)&&  parent.getType()  ==  Token.VAR);	  NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
223	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
224	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isNamedFunctionDeclaration(n)||  NodeUtil.isStatementBlock(parent))  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isNamedFunctionDeclaration(n)||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isNamedFunctionDeclaration(n)||  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isVarDeclaration(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
225	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isGetProp(n)||  NodeUtil.isStatementBlock(parent))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isGetProp(n)||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isGetProp(n)||  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isVarDeclaration(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
226	[BUG]  [BUGGY]  NodeUtil.isVarDeclarations(parent)&&  parent.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isVarDeclarations(parent)&&  parent.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclarations(parent)&&  parent.getType()  ==  Token.VAR);	  NodeUtil.isVarDeclarations(n)||    parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
227	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expectedConst);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expectedConst);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  expectedConst);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
228	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isVarDeclarations(parent))  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isVarDeclarations(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(n)&&  NodeUtil.isVarDeclarations(parent))  {	  if(NodeUtil.isVarDeclarations(n)&&    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
229	[BUG]  [BUGGY]  NodeUtil.isNamedFunctionDeclaration(n)||  n.getType()  ==  Token.VAR,  arguments);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isNamedFunctionDeclaration(n)||  n.getType()  ==  Token.VAR,  arguments);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isNamedFunctionDeclaration(n)||  n.getType()  ==  Token.VAR,  arguments);	  NodeUtil.isNamedFunctionDeclaration(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
230	[BUG]  [BUGGY]  NodeUtil.isVarDeclarations(parent)&&  parent.getType()  ==  Token.VAR;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isVarDeclarations(parent)&&  parent.getType()  ==  Token.VAR;  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclarations(parent)&&  parent.getType()  ==  Token.VAR;	  NodeUtil.isVarDeclarations(n)||    parent.getType()    ==    Token.VAR;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
231	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.VAR,  arguments);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.VAR,  arguments);  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.VAR,  arguments);	  NodeUtil.isFunctionDeclaration(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
232	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclarations(parent)||  NodeUtil.isVarDeclarations(parent))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclarations(parent)||  NodeUtil.isVarDeclarations(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclarations(parent)||  NodeUtil.isVarDeclarations(parent))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isVarDeclarations(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
233	[BUG]  [BUGGY]  if(NodeUtil.isVar(n)||  NodeUtil.isStatementBlock(n))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVar(n)||  NodeUtil.isStatementBlock(n))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVar(n)||  NodeUtil.isStatementBlock(n))  {	  if(NodeUtil.isName(n)||    NodeUtil.isStatementBlock(n))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
234	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(0));  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(0));  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(0));	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
235	[BUG]  [BUGGY]  Node  n  =  parent.removeFirstChild();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  n  =  parent.removeFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  n  =  parent.removeFirstChild();	  Node    n    =    parent.getParent();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
236	[BUG]  [BUGGY]  Node  n  =  getFirstChild();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  Node  n  =  getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  n  =  getFirstChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
237	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isExpressionNode(parent)||  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isExpressionNode(parent)||  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isExpressionNode(parent)||  NodeUtil.isFunctionDeclaration(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isExpressionNode(parent))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
