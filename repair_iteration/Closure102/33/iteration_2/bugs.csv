bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  v  =  parent.getLastChild();  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  v  =  parent.getLastChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  v  =  parent.getLastChild();	      Node    v    =    n.getLastChild();    	non-compiled	[CE]  	16	None	replace
2	[BUG]  [BUGGY]  Node  v  =  parent.getFirstChild();  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  v  =  parent.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  v  =  parent.getFirstChild();	      Node    v    =    n.getLastChild();    	non-compiled	[CE]  	16	None	replace
3	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  n  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  n  =  n.getFirstChild();	      Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  	15	None	replace
4	[BUG]  [BUGGY]  Node  n  =  parent.getLastChild();  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  n  =  parent.getLastChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  n  =  parent.getLastChild();	      Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  	15	None	replace
5	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  n  =  n.getLastChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  n  =  n.getLastChild();	      Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  	15	None	replace
6	[BUG]  [BUGGY]  Node  n  =  t.getFirstChild();  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  n  =  t.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  n  =  t.getFirstChild();	      Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  	15	None	replace
7	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclarations(n)||  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclarations(n)||  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclarations(n)||  NodeUtil.isFunctionDeclaration(parent))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  	10	None	replace
8	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclarations(n)&&  NodeUtil.isStatementBlock(parent))  {  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclarations(n)&&  NodeUtil.isStatementBlock(parent))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclarations(n)&&  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  	10	None	replace
9	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclarations(parent)||  NodeUtil.isStatementBlock(n))  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclarations(parent)||  NodeUtil.isStatementBlock(n))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclarations(parent)||  NodeUtil.isStatementBlock(n))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  	10	None	replace
10	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isStatementBlock(parent))  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  	10	None	replace
11	[BUG]  [BUGGY]  NodeUtil.isVarDeclarations(n)&&  n.getType()  ==  Token.VAR);  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeUtil.isVarDeclarations(n)&&  n.getType()  ==  Token.VAR);  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclarations(n)&&  n.getType()  ==  Token.VAR);	      NodeUtil.isVarDeclarations(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	3	None	replace
12	[BUG]  [BUGGY]  NodeUtil.isVarDeclarations(parent)||  n.getType()  ==  Token.VAR);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeUtil.isVarDeclarations(parent)||  n.getType()  ==  Token.VAR);  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclarations(parent)||  n.getType()  ==  Token.VAR);	      NodeUtil.isVarDeclarations(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	3	None	replace
13	[BUG]  [BUGGY]  NodeUtil.isName(n)||  n.getType()  ==  Token.VAR);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeUtil.isName(n)||  n.getType()  ==  Token.VAR);  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isName(n)||  n.getType()  ==  Token.VAR);	      NodeUtil.isVarDeclarations(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	3	None	replace
14	[BUG]  [BUGGY]  NodeUtil.isVarDeclarations(n)||  parent.getType()  ==  Token.VAR);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeUtil.isVarDeclarations(n)||  parent.getType()  ==  Token.VAR);  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclarations(n)||  parent.getType()  ==  Token.VAR);	      NodeUtil.isVarDeclarations(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	3	None	replace
15	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.VAR);  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.VAR);  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.VAR);	      NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	12	None	replace
16	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(parent)||  n.getType()  ==  Token.VAR);  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeUtil.isVarDeclaration(parent)||  n.getType()  ==  Token.VAR);  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclaration(parent)||  n.getType()  ==  Token.VAR);	      NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	12	None	replace
17	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.VAR);  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.VAR);  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.VAR);	      NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	12	None	replace
18	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.VAR);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.VAR);  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.VAR);	      NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	12	None	replace
19	[BUG]  [BUGGY]  Node  parent  =  n.getLastChild();  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  parent  =  n.getLastChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  parent  =  n.getLastChild();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  	4	None	replace
20	[BUG]  [BUGGY]  Node  parent  =  n.getNext();  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  parent  =  n.getNext();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  parent  =  n.getNext();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  	4	None	replace
21	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild();  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  parent  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  parent  =  n.getFirstChild();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  	4	None	replace
22	[BUG]  [BUGGY]  Node  parent  =  n.getPreviousParent();  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  parent  =  n.getPreviousParent();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  parent  =  n.getPreviousParent();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  	4	None	replace
23	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.VAR;  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.VAR;  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.VAR;	      NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  	14	None	replace
24	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(parent)||  n.getType()  ==  Token.VAR;  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeUtil.isVarDeclaration(parent)||  n.getType()  ==  Token.VAR;  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclaration(parent)||  n.getType()  ==  Token.VAR;	      NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  	14	None	replace
25	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.VAR;  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.VAR;  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.VAR;	      NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  	14	None	replace
26	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.VAR;  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.VAR;  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.VAR;	      NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  	14	None	replace
27	[BUG]  [BUGGY]  Node  v  =  n.getNext();  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  v  =  n.getNext();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  v  =  n.getNext();	      Node    v    =    n.getFirstChild();    	non-compiled	[CE]  	5	None	replace
28	[BUG]  [BUGGY]  NodeUtil.isVarDeclarations(n)&&  n.getType()  ==  Token.VAR;  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeUtil.isVarDeclarations(n)&&  n.getType()  ==  Token.VAR;  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclarations(n)&&  n.getType()  ==  Token.VAR;	      NodeUtil.isVarDeclarations(n)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  	6	None	replace
29	[BUG]  [BUGGY]  NodeUtil.isVarDeclarations(parent)||  n.getType()  ==  Token.VAR;  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeUtil.isVarDeclarations(parent)||  n.getType()  ==  Token.VAR;  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclarations(parent)||  n.getType()  ==  Token.VAR;	      NodeUtil.isVarDeclarations(n)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  	6	None	replace
30	[BUG]  [BUGGY]  NodeUtil.isVarDeclarations(n)||  parent.getType()  ==  Token.VAR;  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeUtil.isVarDeclarations(n)||  parent.getType()  ==  Token.VAR;  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isVarDeclarations(n)||  parent.getType()  ==  Token.VAR;	      NodeUtil.isVarDeclarations(n)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  	6	None	replace
31	[BUG]  [BUGGY]  NodeUtil.isName(n)||  n.getType()  ==  Token.VAR;  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeUtil.isName(n)||  n.getType()  ==  Token.VAR;  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isName(n)||  n.getType()  ==  Token.VAR;	      NodeUtil.isVarDeclarations(n)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  	6	None	replace
32	[BUG]  [BUGGY]  Node  var  =  n.getLastChild();  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  var  =  n.getLastChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  var  =  n.getLastChild();	      Node    var    =    n.getFirstChild();    	non-compiled	[CE]  	13	None	replace
33	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild();  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  var  =  parent.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  var  =  parent.getFirstChild();	      Node    var    =    n.getFirstChild();    	non-compiled	[CE]  	13	None	replace
34	[BUG]  [BUGGY]  Node  var  =  arguments.getFirstChild();  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  var  =  arguments.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  var  =  arguments.getFirstChild();	      Node    var    =    n.getFirstChild();    	non-compiled	[CE]  	13	None	replace
35	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  	9	None	replace
36	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isStatementBlock(parent))  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isStatementBlock(parent))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  	9	None	replace
37	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isStatementBlock(n))  {  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isStatementBlock(n))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isStatementBlock(n))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  	9	None	replace
38	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  	11	None	replace
39	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(parent))  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclaration(parent))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(parent))  {	  if(NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  	11	None	replace
40	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  	11	None	replace
41	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.NAME)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.NAME)  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.NAME)  {	  if(NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  	11	None	replace
42	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclarations(n)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclarations(n)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclarations(n)||  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isStatementBlock(n))    {    	non-compiled	[CE]  	8	None	replace
43	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclarations(n)&&  NodeUtil.isStatementBlock(n))  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclarations(n)&&  NodeUtil.isStatementBlock(n))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclarations(n)&&  NodeUtil.isStatementBlock(n))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isStatementBlock(n))    {    	non-compiled	[CE]  	8	None	replace
44	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isStatementBlock(n))  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isStatementBlock(n))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isStatementBlock(n))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isStatementBlock(n))    {    	non-compiled	[CE]  	8	None	replace
45	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isStatementBlock(n))  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isStatementBlock(n))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isStatementBlock(n))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isStatementBlock(n))    {    	non-compiled	[CE]  	7	None	replace
46	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments);  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments);  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  this,  arguments);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	2	None	replace
47	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument);  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument);  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  this,  argument);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	2	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  arguments);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  arguments);  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  arguments);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	2	None	replace
49	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  null);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	2	None	replace
50	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  arguments,  new  ScopeTicklingCallback());  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  arguments,  new  ScopeTicklingCallback());  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  arguments,  new  ScopeTicklingCallback());	      NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  	1	None	replace
51	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments);  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments);  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments);	      NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  	1	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());	      NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  	1	None	replace
53	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  parent);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	2	None	replace
54	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild().getNext();  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  var  =  n.getFirstChild().getNext();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  var  =  n.getFirstChild().getNext();	      Node    var    =    n.getFirstChild();    	non-compiled	[CE]  	13	None	replace
55	[BUG]  [BUGGY]  Node  n  =  arguments.getFirstChild();  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  n  =  arguments.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  n  =  arguments.getFirstChild();	      Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  	15	None	replace
56	[BUG]  [BUGGY]  Node  n  =  parent.getParent();  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  n  =  parent.getParent();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  n  =  parent.getParent();	      Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  	15	None	replace
57	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclarations(parent)||  NodeUtil.isStatementBlock(parent))  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclarations(parent)||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclarations(parent)||  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isStatementBlock(n))    {    	non-compiled	[CE]  	8	None	replace
58	[BUG]  [BUGGY]  if(NodeUtil.isName(parent)||  NodeUtil.isStatementBlock(parent))  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isName(parent)||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(parent)||  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
59	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isStatementBlock(parent))  {  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(parent)||  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isStatementBlock(n))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
60	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isGetProp(parent))  {  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isGetProp(parent))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isGetProp(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
61	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  ScopeTicklingCallback());  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  ScopeTicklingCallback());  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  null,  new  ScopeTicklingCallback());	      NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  <identifier>  expected	1	None	replace
62	[BUG]  [BUGGY]  Node  parent  =  n.getParentNode();  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  parent  =  n.getParentNode();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  parent  =  n.getParentNode();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
63	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n))  {  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
64	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isNamedFunction(n))  {  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isNamedFunction(n))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isNamedFunction(n))  {	  if(NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
65	[BUG]  [BUGGY]  Node  n  =  this.parent.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  n  =  this.parent.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  n  =  this.parent.getFirstChild();	      Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this);  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this);  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this);	      NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  false);  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  false);  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  false);	      NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
68	[BUG]  [BUGGY]  NodeUtil.isNamedFunctionDeclaration(n)||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  NodeUtil.isNamedFunctionDeclaration(n)||  n.getType()  ==  Token.VAR);  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	NodeUtil.isNamedFunctionDeclaration(n)||  n.getType()  ==  Token.VAR);	      NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
69	[BUG]  [BUGGY]  Node  v  =  n.removeFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  v  =  n.removeFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  v  =  n.removeFirstChild();	      Node    v    =    n.getLastChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
70	[BUG]  [BUGGY]  Node  v  =  node.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  v  =  node.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  v  =  node.getFirstChild();	      Node    v    =    n.getLastChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
71	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  NodeUtil.isStatementBlock(parent))  {  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  NodeUtil.isStatementBlock(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isStatementBlock(n))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
72	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isExpressionNode(parent))  {  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isExpressionNode(parent))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isExpressionNode(parent))  {	  if(NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
73	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isVarDeclaration(n))  {  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
74	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isVarDeclaration(parent))  {  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isVarDeclaration(parent))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isVarDeclaration(parent))  {	  if(NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
75	[BUG]  [BUGGY]  Node  parent  =  n.removeFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  Node  parent  =  n.removeFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	Node  parent  =  n.removeFirstChild();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
76	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclarations(n)||  NodeUtil.isVarDeclarations(parent))  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclarations(n)||  NodeUtil.isVarDeclarations(parent))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclarations(n)||  NodeUtil.isVarDeclarations(parent))  {	  if(NodeUtil.isVarDeclarations(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
77	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isName(parent))  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isName(parent))  {  [BUGGY]    splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isName(parent))  {	  if(NodeUtil.isVarDeclaration(n)||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  not  a  statement	9	None	replace
