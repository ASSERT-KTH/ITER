bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] if (assertOnChange && !c.hasChildren()) { [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void splitVarDeclarations(Node n) { for (Node next, c = n.getFirstChild(); c != null; c = next) { next = c.getNext(); if (c.getType() == Token.VAR) { [BUGGY] if (assertOnChange && !c.hasChildren()) { [BUGGY] throw new IllegalStateException("Empty VAR node."); } while (c.getFirstChild() != c.getLastChild()) { Node name = c.getFirstChild(); c.removeChild(name); Node newVar = new Node(Token.VAR, name, n.getLineno(), n.getCharno()); n.addChildBefore(newVar, c); reportCodeChange("VAR with multiple children"); } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] splitVarDeclarations [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node c n name newVar next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.4472135954999579	358	358	1	replace	
2	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void splitVarDeclarations(Node n) { for (Node next, c = n.getFirstChild(); c != null; c = next) { next = c.getNext(); if (c.getType() == Token.VAR) { [BUGGY] [BUGGY] if (assertOnChange && !c.hasChildren()) { throw new IllegalStateException("Empty VAR node."); } while (c.getFirstChild() != c.getLastChild()) { Node name = c.getFirstChild(); c.removeChild(name); Node newVar = new Node(Token.VAR, name, n.getLineno(), n.getCharno()); n.addChildBefore(newVar, c); reportCodeChange("VAR with multiple children"); } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] splitVarDeclarations [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node c n name newVar next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.4472135954999579	358	358	1	add	
3	[BUG] [BUGGY] while (c.getFirstChild() != c.getLastChild()) { [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void splitVarDeclarations(Node n) { for (Node next, c = n.getFirstChild(); c != null; c = next) { next = c.getNext(); if (c.getType() == Token.VAR) { if (assertOnChange && !c.hasChildren()) { throw new IllegalStateException("Empty VAR node."); } [BUGGY] while (c.getFirstChild() != c.getLastChild()) { [BUGGY] Node name = c.getFirstChild(); c.removeChild(name); Node newVar = new Node(Token.VAR, name, n.getLineno(), n.getCharno()); n.addChildBefore(newVar, c); reportCodeChange("VAR with multiple children"); } } } } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] splitVarDeclarations [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node c n name newVar next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.4472135954999579	362	362	1	replace	
4	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void splitVarDeclarations(Node n) { for (Node next, c = n.getFirstChild(); c != null; c = next) { next = c.getNext(); if (c.getType() == Token.VAR) { if (assertOnChange && !c.hasChildren()) { throw new IllegalStateException("Empty VAR node."); } [BUGGY] [BUGGY] while (c.getFirstChild() != c.getLastChild()) { Node name = c.getFirstChild(); c.removeChild(name); Node newVar = new Node(Token.VAR, name, n.getLineno(), n.getCharno()); n.addChildBefore(newVar, c); reportCodeChange("VAR with multiple children"); } } } } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] splitVarDeclarations [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node c n name newVar next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.4472135954999579	362	362	1	add	
5	[BUG] [BUGGY] Node next = current.getNext(); [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT]  while (current != null && NodeUtil.isFunctionDeclaration(current)) { previous = current; current = current.getNext(); }  Node insertAfter = previous; while (current != null) {  [BUGGY] Node next = current.getNext(); [BUGGY] if (NodeUtil.isFunctionDeclaration(current)) {  Preconditions.checkNotNull(previous); functionBody.removeChildAfter(previous);   insertAfter = addToFront(functionBody, current, insertAfter); compiler.reportCodeChange(); } else { [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.4472135954999579	393	393	1	replace	
6	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT]  while (current != null && NodeUtil.isFunctionDeclaration(current)) { previous = current; current = current.getNext(); }  Node insertAfter = previous; while (current != null) {  [BUGGY] [BUGGY] Node next = current.getNext(); if (NodeUtil.isFunctionDeclaration(current)) {  Preconditions.checkNotNull(previous); functionBody.removeChildAfter(previous);   insertAfter = addToFront(functionBody, current, insertAfter); compiler.reportCodeChange(); } else { [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.4472135954999579	393	393	1	add	
7	[BUG] [BUGGY] if (NodeUtil.isFunctionDeclaration(current)) { [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] while (current != null && NodeUtil.isFunctionDeclaration(current)) { previous = current; current = current.getNext(); }  Node insertAfter = previous; while (current != null) {  Node next = current.getNext(); [BUGGY] if (NodeUtil.isFunctionDeclaration(current)) { [BUGGY]  Preconditions.checkNotNull(previous); functionBody.removeChildAfter(previous);   insertAfter = addToFront(functionBody, current, insertAfter); compiler.reportCodeChange(); } else {  [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.4472135954999579	394	394	1	replace	
8	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] while (current != null && NodeUtil.isFunctionDeclaration(current)) { previous = current; current = current.getNext(); }  Node insertAfter = previous; while (current != null) {  Node next = current.getNext(); [BUGGY] [BUGGY] if (NodeUtil.isFunctionDeclaration(current)) {  Preconditions.checkNotNull(previous); functionBody.removeChildAfter(previous);   insertAfter = addToFront(functionBody, current, insertAfter); compiler.reportCodeChange(); } else {  [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.4472135954999579	394	394	1	add	
9	[BUG] [BUGGY] previous = current; [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT]  Preconditions.checkNotNull(previous); functionBody.removeChildAfter(previous);   insertAfter = addToFront(functionBody, current, insertAfter); compiler.reportCodeChange(); } else {  [BUGGY] previous = current; [BUGGY] } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.4472135954999579	405	405	1	replace	
10	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT]  Preconditions.checkNotNull(previous); functionBody.removeChildAfter(previous);   insertAfter = addToFront(functionBody, current, insertAfter); compiler.reportCodeChange(); } else {  [BUGGY] [BUGGY] previous = current; } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.4472135954999579	405	405	1	add	
11	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] functionBody.removeChildAfter(previous);   insertAfter = addToFront(functionBody, current, insertAfter); compiler.reportCodeChange(); } else {  previous = current; } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.4472135954999579	407	407	1	replace	
12	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] functionBody.removeChildAfter(previous);   insertAfter = addToFront(functionBody, current, insertAfter); compiler.reportCodeChange(); } else {  previous = current; } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.4472135954999579	407	407	1	add	
13	[BUG] [BUGGY] } [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT]   insertAfter = addToFront(functionBody, current, insertAfter); compiler.reportCodeChange(); } else {  previous = current; } current = next; [BUGGY] } [BUGGY] } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.4472135954999579	408	408	1	replace	
14	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT]   insertAfter = addToFront(functionBody, current, insertAfter); compiler.reportCodeChange(); } else {  previous = current; } current = next; [BUGGY] [BUGGY] } } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.4472135954999579	408	408	1	add	
15	[BUG] [BUGGY] moveNamedFunctions(n.getLastChild()); [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] extractForInitializer(n, null, null); }   if (NodeUtil.isStatementBlock(n)) { splitVarDeclarations(n); } if (n.getType() == Token.FUNCTION) { [BUGGY] moveNamedFunctions(n.getLastChild()); [BUGGY] } } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] doStatementNormalizations [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap NodeTraversal t Node n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.3333333333333333	269	269	1	replace	
16	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] extractForInitializer(n, null, null); }   if (NodeUtil.isStatementBlock(n)) { splitVarDeclarations(n); } if (n.getType() == Token.FUNCTION) { [BUGGY] [BUGGY] moveNamedFunctions(n.getLastChild()); } } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] doStatementNormalizations [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap NodeTraversal t Node n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.3333333333333333	269	269	1	add	
17	[BUG] [BUGGY] Preconditions.checkState( functionBody.getParent().getType() == Token.FUNCTION); [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void moveNamedFunctions(Node functionBody) { [BUGGY] Preconditions.checkState(  functionBody.getParent().getType() == Token.FUNCTION); [BUGGY] functionBody.getParent().getType() == Token.FUNCTION); Node previous = null; Node current = functionBody.getFirstChild();   while (current != null && NodeUtil.isFunctionDeclaration(current)) { previous = current; current = current.getNext(); }  [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.3333333333333333	378	379	1	replace	
18	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void moveNamedFunctions(Node functionBody) { [BUGGY] [BUGGY] Preconditions.checkState(  functionBody.getParent().getType() == Token.FUNCTION); functionBody.getParent().getType() == Token.FUNCTION); Node previous = null; Node current = functionBody.getFirstChild();   while (current != null && NodeUtil.isFunctionDeclaration(current)) { previous = current; current = current.getNext(); }  [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.3333333333333333	378	379	1	add	
19	[BUG] [BUGGY] Node previous = null; [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void moveNamedFunctions(Node functionBody) { Preconditions.checkState( functionBody.getParent().getType() == Token.FUNCTION); [BUGGY] Node previous = null; [BUGGY] Node current = functionBody.getFirstChild();   while (current != null && NodeUtil.isFunctionDeclaration(current)) { previous = current; current = current.getNext(); }  Node insertAfter = previous; [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.3333333333333333	380	380	1	replace	
20	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void moveNamedFunctions(Node functionBody) { Preconditions.checkState( functionBody.getParent().getType() == Token.FUNCTION); [BUGGY] [BUGGY] Node previous = null; Node current = functionBody.getFirstChild();   while (current != null && NodeUtil.isFunctionDeclaration(current)) { previous = current; current = current.getNext(); }  Node insertAfter = previous; [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.3333333333333333	380	380	1	add	
21	[BUG] [BUGGY] Node current = functionBody.getFirstChild(); [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void moveNamedFunctions(Node functionBody) { Preconditions.checkState( functionBody.getParent().getType() == Token.FUNCTION); Node previous = null; [BUGGY] Node current = functionBody.getFirstChild(); [BUGGY]   while (current != null && NodeUtil.isFunctionDeclaration(current)) { previous = current; current = current.getNext(); }  Node insertAfter = previous; while (current != null) { [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.3333333333333333	381	381	1	replace	
22	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void moveNamedFunctions(Node functionBody) { Preconditions.checkState( functionBody.getParent().getType() == Token.FUNCTION); Node previous = null; [BUGGY] [BUGGY] Node current = functionBody.getFirstChild();   while (current != null && NodeUtil.isFunctionDeclaration(current)) { previous = current; current = current.getNext(); }  Node insertAfter = previous; while (current != null) { [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.3333333333333333	381	381	1	add	
23	[BUG] [BUGGY] while (current != null && NodeUtil.isFunctionDeclaration(current)) { [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void moveNamedFunctions(Node functionBody) { Preconditions.checkState( functionBody.getParent().getType() == Token.FUNCTION); Node previous = null; Node current = functionBody.getFirstChild();   [BUGGY] while (current != null && NodeUtil.isFunctionDeclaration(current)) { [BUGGY] previous = current; current = current.getNext(); }  Node insertAfter = previous; while (current != null) {  Node next = current.getNext(); if (NodeUtil.isFunctionDeclaration(current)) { [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.3333333333333333	384	384	1	replace	
24	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void moveNamedFunctions(Node functionBody) { Preconditions.checkState( functionBody.getParent().getType() == Token.FUNCTION); Node previous = null; Node current = functionBody.getFirstChild();   [BUGGY] [BUGGY] while (current != null && NodeUtil.isFunctionDeclaration(current)) { previous = current; current = current.getNext(); }  Node insertAfter = previous; while (current != null) {  Node next = current.getNext(); if (NodeUtil.isFunctionDeclaration(current)) { [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.3333333333333333	384	384	1	add	
25	[BUG] [BUGGY] Node insertAfter = previous; [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] Node previous = null; Node current = functionBody.getFirstChild();   while (current != null && NodeUtil.isFunctionDeclaration(current)) { previous = current; current = current.getNext(); }  [BUGGY] Node insertAfter = previous; [BUGGY] while (current != null) {  Node next = current.getNext(); if (NodeUtil.isFunctionDeclaration(current)) {  Preconditions.checkNotNull(previous); functionBody.removeChildAfter(previous);    [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.3333333333333333	390	390	1	replace	
26	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] Node previous = null; Node current = functionBody.getFirstChild();   while (current != null && NodeUtil.isFunctionDeclaration(current)) { previous = current; current = current.getNext(); }  [BUGGY] [BUGGY] Node insertAfter = previous; while (current != null) {  Node next = current.getNext(); if (NodeUtil.isFunctionDeclaration(current)) {  Preconditions.checkNotNull(previous); functionBody.removeChildAfter(previous);    [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.3333333333333333	390	390	1	add	
27	[BUG] [BUGGY] while (current != null) { [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] Node current = functionBody.getFirstChild();   while (current != null && NodeUtil.isFunctionDeclaration(current)) { previous = current; current = current.getNext(); }  Node insertAfter = previous; [BUGGY] while (current != null) { [BUGGY]  Node next = current.getNext(); if (NodeUtil.isFunctionDeclaration(current)) {  Preconditions.checkNotNull(previous); functionBody.removeChildAfter(previous);   insertAfter = addToFront(functionBody, current, insertAfter); [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.3333333333333333	391	391	1	replace	
28	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] Node current = functionBody.getFirstChild();   while (current != null && NodeUtil.isFunctionDeclaration(current)) { previous = current; current = current.getNext(); }  Node insertAfter = previous; [BUGGY] [BUGGY] while (current != null) {  Node next = current.getNext(); if (NodeUtil.isFunctionDeclaration(current)) {  Preconditions.checkNotNull(previous); functionBody.removeChildAfter(previous);   insertAfter = addToFront(functionBody, current, insertAfter); [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.3333333333333333	391	391	1	add	
29	[BUG] [BUGGY] } [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT]   insertAfter = addToFront(functionBody, current, insertAfter); compiler.reportCodeChange(); } else {  previous = current; } current = next; } [BUGGY] } [BUGGY]  [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.3333333333333333	409	409	1	replace	
30	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT]   insertAfter = addToFront(functionBody, current, insertAfter); compiler.reportCodeChange(); } else {  previous = current; } current = next; } [BUGGY] [BUGGY] } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] moveNamedFunctions [RETURN_TYPE] void  Node functionBody [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node current functionBody insertAfter next previous  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.3333333333333333	409	409	1	add	
31	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] static final boolean MAKE_LOCAL_NAMES_UNIQUE = true; [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [VARIABLES] 	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	73	73	1	replace	
32	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] static final boolean MAKE_LOCAL_NAMES_UNIQUE = true; [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [VARIABLES] 	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	73	73	1	add	
33	[BUG] [BUGGY] this.compiler = compiler; [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] Normalize(AbstractCompiler compiler, boolean assertOnChange) { [BUGGY] this.compiler = compiler; [BUGGY] this.assertOnChange = assertOnChange; } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)  AbstractCompiler compiler boolean assertOnChange [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations Map constantMap  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	74	74	1	replace	
34	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] Normalize(AbstractCompiler compiler, boolean assertOnChange) { [BUGGY] [BUGGY] this.compiler = compiler; this.assertOnChange = assertOnChange; } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)  AbstractCompiler compiler boolean assertOnChange [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations Map constantMap  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	74	74	1	add	
35	[BUG] [BUGGY] this.assertOnChange = assertOnChange; [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] Normalize(AbstractCompiler compiler, boolean assertOnChange) { this.compiler = compiler; [BUGGY] this.assertOnChange = assertOnChange; [BUGGY] } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)  AbstractCompiler compiler boolean assertOnChange [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations Map constantMap  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	75	75	1	replace	
36	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] Normalize(AbstractCompiler compiler, boolean assertOnChange) { this.compiler = compiler; [BUGGY] [BUGGY] this.assertOnChange = assertOnChange; } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)  AbstractCompiler compiler boolean assertOnChange [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations Map constantMap  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	75	75	1	add	
37	[BUG] [BUGGY] } [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] Normalize(AbstractCompiler compiler, boolean assertOnChange) { this.compiler = compiler; this.assertOnChange = assertOnChange; [BUGGY] } [BUGGY]  [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)  AbstractCompiler compiler boolean assertOnChange [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations Map constantMap  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	76	76	1	replace	
38	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] Normalize(AbstractCompiler compiler, boolean assertOnChange) { this.compiler = compiler; this.assertOnChange = assertOnChange; [BUGGY] [BUGGY] } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)  AbstractCompiler compiler boolean assertOnChange [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations Map constantMap  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	76	76	1	add	
39	[BUG] [BUGGY] NodeTraversal.traverse(compiler, root, this); [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] public void process(Node externs, Node root) { [BUGGY] NodeTraversal.traverse(compiler, root, this); [BUGGY] if (MAKE_LOCAL_NAMES_UNIQUE) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); NodeTraversal t = new NodeTraversal(compiler, renamer); t.traverseRoots(externs, root); } removeDuplicateDeclarations(root); new PropogateConstantAnnotations(compiler, assertOnChange) .process(externs, root); } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler MakeDeclaredNamesUnique renamer boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Map constantMap NodeTraversal t Node externs root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	88	88	1	replace	
40	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] public void process(Node externs, Node root) { [BUGGY] [BUGGY] NodeTraversal.traverse(compiler, root, this); if (MAKE_LOCAL_NAMES_UNIQUE) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); NodeTraversal t = new NodeTraversal(compiler, renamer); t.traverseRoots(externs, root); } removeDuplicateDeclarations(root); new PropogateConstantAnnotations(compiler, assertOnChange) .process(externs, root); } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler MakeDeclaredNamesUnique renamer boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Map constantMap NodeTraversal t Node externs root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	88	88	1	add	
41	[BUG] [BUGGY] MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] public void process(Node externs, Node root) { NodeTraversal.traverse(compiler, root, this); if (MAKE_LOCAL_NAMES_UNIQUE) { [BUGGY] MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); [BUGGY] NodeTraversal t = new NodeTraversal(compiler, renamer); t.traverseRoots(externs, root); } removeDuplicateDeclarations(root); new PropogateConstantAnnotations(compiler, assertOnChange) .process(externs, root); } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler MakeDeclaredNamesUnique renamer boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Map constantMap NodeTraversal t Node externs root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	replace	
42	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] public void process(Node externs, Node root) { NodeTraversal.traverse(compiler, root, this); if (MAKE_LOCAL_NAMES_UNIQUE) { [BUGGY] [BUGGY] MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); NodeTraversal t = new NodeTraversal(compiler, renamer); t.traverseRoots(externs, root); } removeDuplicateDeclarations(root); new PropogateConstantAnnotations(compiler, assertOnChange) .process(externs, root); } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler MakeDeclaredNamesUnique renamer boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Map constantMap NodeTraversal t Node externs root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	add	
43	[BUG] [BUGGY] NodeTraversal t = new NodeTraversal(compiler, renamer); [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] public void process(Node externs, Node root) { NodeTraversal.traverse(compiler, root, this); if (MAKE_LOCAL_NAMES_UNIQUE) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); [BUGGY] NodeTraversal t = new NodeTraversal(compiler, renamer); [BUGGY] t.traverseRoots(externs, root); } removeDuplicateDeclarations(root); new PropogateConstantAnnotations(compiler, assertOnChange) .process(externs, root); } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler MakeDeclaredNamesUnique renamer boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Map constantMap NodeTraversal t Node externs root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	
44	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] public void process(Node externs, Node root) { NodeTraversal.traverse(compiler, root, this); if (MAKE_LOCAL_NAMES_UNIQUE) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); [BUGGY] [BUGGY] NodeTraversal t = new NodeTraversal(compiler, renamer); t.traverseRoots(externs, root); } removeDuplicateDeclarations(root); new PropogateConstantAnnotations(compiler, assertOnChange) .process(externs, root); } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler MakeDeclaredNamesUnique renamer boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Map constantMap NodeTraversal t Node externs root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	add	
45	[BUG] [BUGGY] t.traverseRoots(externs, root); [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] public void process(Node externs, Node root) { NodeTraversal.traverse(compiler, root, this); if (MAKE_LOCAL_NAMES_UNIQUE) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); NodeTraversal t = new NodeTraversal(compiler, renamer); [BUGGY] t.traverseRoots(externs, root); [BUGGY] } removeDuplicateDeclarations(root); new PropogateConstantAnnotations(compiler, assertOnChange) .process(externs, root); } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler MakeDeclaredNamesUnique renamer boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Map constantMap NodeTraversal t Node externs root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	
46	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] public void process(Node externs, Node root) { NodeTraversal.traverse(compiler, root, this); if (MAKE_LOCAL_NAMES_UNIQUE) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); NodeTraversal t = new NodeTraversal(compiler, renamer); [BUGGY] [BUGGY] t.traverseRoots(externs, root); } removeDuplicateDeclarations(root); new PropogateConstantAnnotations(compiler, assertOnChange) .process(externs, root); } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler MakeDeclaredNamesUnique renamer boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Map constantMap NodeTraversal t Node externs root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	
47	[BUG] [BUGGY] removeDuplicateDeclarations(root); [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] public void process(Node externs, Node root) { NodeTraversal.traverse(compiler, root, this); if (MAKE_LOCAL_NAMES_UNIQUE) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); NodeTraversal t = new NodeTraversal(compiler, renamer); t.traverseRoots(externs, root); } [BUGGY] removeDuplicateDeclarations(root); [BUGGY] new PropogateConstantAnnotations(compiler, assertOnChange) .process(externs, root); } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler MakeDeclaredNamesUnique renamer boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Map constantMap NodeTraversal t Node externs root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	94	94	1	replace	
48	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] public void process(Node externs, Node root) { NodeTraversal.traverse(compiler, root, this); if (MAKE_LOCAL_NAMES_UNIQUE) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); NodeTraversal t = new NodeTraversal(compiler, renamer); t.traverseRoots(externs, root); } [BUGGY] [BUGGY] removeDuplicateDeclarations(root); new PropogateConstantAnnotations(compiler, assertOnChange) .process(externs, root); } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler MakeDeclaredNamesUnique renamer boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Map constantMap NodeTraversal t Node externs root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	94	94	1	add	
49	[BUG] [BUGGY] new PropogateConstantAnnotations(compiler, assertOnChange) .process(externs, root); [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] public void process(Node externs, Node root) { NodeTraversal.traverse(compiler, root, this); if (MAKE_LOCAL_NAMES_UNIQUE) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); NodeTraversal t = new NodeTraversal(compiler, renamer); t.traverseRoots(externs, root); } removeDuplicateDeclarations(root); [BUGGY] new PropogateConstantAnnotations(compiler, assertOnChange)  .process(externs, root); [BUGGY] .process(externs, root); } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler MakeDeclaredNamesUnique renamer boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Map constantMap NodeTraversal t Node externs root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	
50	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] public void process(Node externs, Node root) { NodeTraversal.traverse(compiler, root, this); if (MAKE_LOCAL_NAMES_UNIQUE) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); NodeTraversal t = new NodeTraversal(compiler, renamer); t.traverseRoots(externs, root); } removeDuplicateDeclarations(root); [BUGGY] [BUGGY] new PropogateConstantAnnotations(compiler, assertOnChange)  .process(externs, root); .process(externs, root); } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler MakeDeclaredNamesUnique renamer boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Map constantMap NodeTraversal t Node externs root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	
51	[BUG] [BUGGY] } [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] public void process(Node externs, Node root) { NodeTraversal.traverse(compiler, root, this); if (MAKE_LOCAL_NAMES_UNIQUE) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); NodeTraversal t = new NodeTraversal(compiler, renamer); t.traverseRoots(externs, root); } removeDuplicateDeclarations(root); new PropogateConstantAnnotations(compiler, assertOnChange) .process(externs, root); [BUGGY] } [BUGGY]  [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler MakeDeclaredNamesUnique renamer boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Map constantMap NodeTraversal t Node externs root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	97	97	1	replace	
52	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] public void process(Node externs, Node root) { NodeTraversal.traverse(compiler, root, this); if (MAKE_LOCAL_NAMES_UNIQUE) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); NodeTraversal t = new NodeTraversal(compiler, renamer); t.traverseRoots(externs, root); } removeDuplicateDeclarations(root); new PropogateConstantAnnotations(compiler, assertOnChange) .process(externs, root); [BUGGY] [BUGGY] } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler MakeDeclaredNamesUnique renamer boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Map constantMap NodeTraversal t Node externs root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	97	97	1	add	
53	[BUG] [BUGGY] doStatementNormalizations(t, n, parent); [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { [BUGGY] doStatementNormalizations(t, n, parent); [BUGGY]  return true; } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Map constantMap NodeTraversal t Node n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	
54	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { [BUGGY] [BUGGY] doStatementNormalizations(t, n, parent); return true; } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Map constantMap NodeTraversal t Node n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	
55	[BUG] [BUGGY] return true; [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { doStatementNormalizations(t, n, parent); [BUGGY] return true; [BUGGY] } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Map constantMap NodeTraversal t Node n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	103	103	1	replace	
56	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { doStatementNormalizations(t, n, parent); [BUGGY] [BUGGY] return true; } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Map constantMap NodeTraversal t Node n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	103	103	1	add	
57	[BUG] [BUGGY] switch (n.getType()) { [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { [BUGGY] switch (n.getType()) { [BUGGY] case Token.WHILE: if (CONVERT_WHILE_TO_FOR) { Node expr = n.getFirstChild(); n.setType(Token.FOR); n.addChildBefore(new Node(Token.EMPTY), expr); n.addChildAfter(new Node(Token.EMPTY), expr); reportCodeChange("WHILE node"); } break; } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap NodeTraversal t Node expr n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	
58	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { [BUGGY] [BUGGY] switch (n.getType()) { case Token.WHILE: if (CONVERT_WHILE_TO_FOR) { Node expr = n.getFirstChild(); n.setType(Token.FOR); n.addChildBefore(new Node(Token.EMPTY), expr); n.addChildAfter(new Node(Token.EMPTY), expr); reportCodeChange("WHILE node"); } break; } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap NodeTraversal t Node expr n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	add	
60	[BUG] [BUGGY] if (n.getType() == Token.LABEL) { [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void doStatementNormalizations(NodeTraversal t, Node n, Node parent) { [BUGGY] if (n.getType() == Token.LABEL) { [BUGGY] normalizeLabels(n); }   if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) { extractForInitializer(n, null, null); }   [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] doStatementNormalizations [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap NodeTraversal t Node n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	replace	
61	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void doStatementNormalizations(NodeTraversal t, Node n, Node parent) { [BUGGY] [BUGGY] if (n.getType() == Token.LABEL) { normalizeLabels(n); }   if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) { extractForInitializer(n, null, null); }   [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] doStatementNormalizations [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap NodeTraversal t Node n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	252	252	1	add	
62	[BUG] [BUGGY] if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) { [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void doStatementNormalizations(NodeTraversal t, Node n, Node parent) { if (n.getType() == Token.LABEL) { normalizeLabels(n); }   [BUGGY] if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) { [BUGGY] extractForInitializer(n, null, null); }   if (NodeUtil.isStatementBlock(n)) { splitVarDeclarations(n); } if (n.getType() == Token.FUNCTION) { [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] doStatementNormalizations [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap NodeTraversal t Node n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	
63	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void doStatementNormalizations(NodeTraversal t, Node n, Node parent) { if (n.getType() == Token.LABEL) { normalizeLabels(n); }   [BUGGY] [BUGGY] if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) { extractForInitializer(n, null, null); }   if (NodeUtil.isStatementBlock(n)) { splitVarDeclarations(n); } if (n.getType() == Token.FUNCTION) { [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] doStatementNormalizations [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap NodeTraversal t Node n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	
64	[BUG] [BUGGY] extractForInitializer(n, null, null); [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void doStatementNormalizations(NodeTraversal t, Node n, Node parent) { if (n.getType() == Token.LABEL) { normalizeLabels(n); }   if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) { [BUGGY] extractForInitializer(n, null, null); [BUGGY] }   if (NodeUtil.isStatementBlock(n)) { splitVarDeclarations(n); } if (n.getType() == Token.FUNCTION) { moveNamedFunctions(n.getLastChild()); [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] doStatementNormalizations [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap NodeTraversal t Node n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	
65	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void doStatementNormalizations(NodeTraversal t, Node n, Node parent) { if (n.getType() == Token.LABEL) { normalizeLabels(n); }   if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) { [BUGGY] [BUGGY] extractForInitializer(n, null, null); }   if (NodeUtil.isStatementBlock(n)) { splitVarDeclarations(n); } if (n.getType() == Token.FUNCTION) { moveNamedFunctions(n.getLastChild()); [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] doStatementNormalizations [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap NodeTraversal t Node n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	
66	[BUG] [BUGGY] if (NodeUtil.isStatementBlock(n)) { [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] }   if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) { extractForInitializer(n, null, null); }   [BUGGY] if (NodeUtil.isStatementBlock(n)) { [BUGGY] splitVarDeclarations(n); } if (n.getType() == Token.FUNCTION) { moveNamedFunctions(n.getLastChild()); } } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] doStatementNormalizations [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap NodeTraversal t Node n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	replace	
67	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] }   if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) { extractForInitializer(n, null, null); }   [BUGGY] [BUGGY] if (NodeUtil.isStatementBlock(n)) { splitVarDeclarations(n); } if (n.getType() == Token.FUNCTION) { moveNamedFunctions(n.getLastChild()); } } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] doStatementNormalizations [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap NodeTraversal t Node n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	264	264	1	add	
68	[BUG] [BUGGY] splitVarDeclarations(n); [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT]   if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) { extractForInitializer(n, null, null); }   if (NodeUtil.isStatementBlock(n)) { [BUGGY] splitVarDeclarations(n); [BUGGY] } if (n.getType() == Token.FUNCTION) { moveNamedFunctions(n.getLastChild()); } } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] doStatementNormalizations [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap NodeTraversal t Node n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	
69	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT]   if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) { extractForInitializer(n, null, null); }   if (NodeUtil.isStatementBlock(n)) { [BUGGY] [BUGGY] splitVarDeclarations(n); } if (n.getType() == Token.FUNCTION) { moveNamedFunctions(n.getLastChild()); } } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] doStatementNormalizations [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap NodeTraversal t Node n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	add	
70	[BUG] [BUGGY] if (n.getType() == Token.FUNCTION) { [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) { extractForInitializer(n, null, null); }   if (NodeUtil.isStatementBlock(n)) { splitVarDeclarations(n); } [BUGGY] if (n.getType() == Token.FUNCTION) { [BUGGY] moveNamedFunctions(n.getLastChild()); } } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] doStatementNormalizations [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap NodeTraversal t Node n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	268	268	1	replace	
71	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) { extractForInitializer(n, null, null); }   if (NodeUtil.isStatementBlock(n)) { splitVarDeclarations(n); } [BUGGY] [BUGGY] if (n.getType() == Token.FUNCTION) { moveNamedFunctions(n.getLastChild()); } } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] doStatementNormalizations [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap NodeTraversal t Node n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	268	268	1	add	
72	[BUG] [BUGGY] } [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT]   if (NodeUtil.isStatementBlock(n)) { splitVarDeclarations(n); } if (n.getType() == Token.FUNCTION) { moveNamedFunctions(n.getLastChild()); } [BUGGY] } [BUGGY]  [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] doStatementNormalizations [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap NodeTraversal t Node n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	271	271	1	replace	
73	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT]   if (NodeUtil.isStatementBlock(n)) { splitVarDeclarations(n); } if (n.getType() == Token.FUNCTION) { moveNamedFunctions(n.getLastChild()); } [BUGGY] [BUGGY] } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] doStatementNormalizations [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap NodeTraversal t Node n parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	271	271	1	add	
74	[BUG] [BUGGY] for (Node next, c = n.getFirstChild(); c != null; c = next) { [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] Node n, Node before, Node beforeParent) { [BUGGY] for (Node next, c = n.getFirstChild(); c != null; c = next) { [BUGGY] next = c.getNext(); Node insertBefore = (before == null) ? c : before; Node insertBeforeParent = (before == null) ? n : beforeParent; switch (c.getType()) { case Token.LABEL: extractForInitializer(c, insertBefore, insertBeforeParent); break; case Token.FOR: if (!NodeUtil.isForIn(c) && c.getFirstChild().getType() != Token.EMPTY) { [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] extractForInitializer [RETURN_TYPE] void  Node n Node before Node beforeParent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node before beforeParent c init insertBefore insertBeforeParent n newStatement next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	
75	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] Node n, Node before, Node beforeParent) { [BUGGY] [BUGGY] for (Node next, c = n.getFirstChild(); c != null; c = next) { next = c.getNext(); Node insertBefore = (before == null) ? c : before; Node insertBeforeParent = (before == null) ? n : beforeParent; switch (c.getType()) { case Token.LABEL: extractForInitializer(c, insertBefore, insertBeforeParent); break; case Token.FOR: if (!NodeUtil.isForIn(c) && c.getFirstChild().getType() != Token.EMPTY) { [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] extractForInitializer [RETURN_TYPE] void  Node n Node before Node beforeParent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node before beforeParent c init insertBefore insertBeforeParent n newStatement next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	add	
76	[BUG] [BUGGY] next = c.getNext(); [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] Node n, Node before, Node beforeParent) { for (Node next, c = n.getFirstChild(); c != null; c = next) { [BUGGY] next = c.getNext(); [BUGGY] Node insertBefore = (before == null) ? c : before; Node insertBeforeParent = (before == null) ? n : beforeParent; switch (c.getType()) { case Token.LABEL: extractForInitializer(c, insertBefore, insertBeforeParent); break; case Token.FOR: if (!NodeUtil.isForIn(c) && c.getFirstChild().getType() != Token.EMPTY) { Node init = c.getFirstChild(); [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] extractForInitializer [RETURN_TYPE] void  Node n Node before Node beforeParent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node before beforeParent c init insertBefore insertBeforeParent n newStatement next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	315	315	1	replace	
77	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] Node n, Node before, Node beforeParent) { for (Node next, c = n.getFirstChild(); c != null; c = next) { [BUGGY] [BUGGY] next = c.getNext(); Node insertBefore = (before == null) ? c : before; Node insertBeforeParent = (before == null) ? n : beforeParent; switch (c.getType()) { case Token.LABEL: extractForInitializer(c, insertBefore, insertBeforeParent); break; case Token.FOR: if (!NodeUtil.isForIn(c) && c.getFirstChild().getType() != Token.EMPTY) { Node init = c.getFirstChild(); [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] extractForInitializer [RETURN_TYPE] void  Node n Node before Node beforeParent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node before beforeParent c init insertBefore insertBeforeParent n newStatement next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	315	315	1	add	
78	[BUG] [BUGGY] Node insertBefore = (before == null) ? c : before; [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] Node n, Node before, Node beforeParent) { for (Node next, c = n.getFirstChild(); c != null; c = next) { next = c.getNext(); [BUGGY] Node insertBefore = (before == null) ? c : before; [BUGGY] Node insertBeforeParent = (before == null) ? n : beforeParent; switch (c.getType()) { case Token.LABEL: extractForInitializer(c, insertBefore, insertBeforeParent); break; case Token.FOR: if (!NodeUtil.isForIn(c) && c.getFirstChild().getType() != Token.EMPTY) { Node init = c.getFirstChild(); c.replaceChild(init, new Node(Token.EMPTY)); [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] extractForInitializer [RETURN_TYPE] void  Node n Node before Node beforeParent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node before beforeParent c init insertBefore insertBeforeParent n newStatement next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	316	316	1	replace	
79	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] Node n, Node before, Node beforeParent) { for (Node next, c = n.getFirstChild(); c != null; c = next) { next = c.getNext(); [BUGGY] [BUGGY] Node insertBefore = (before == null) ? c : before; Node insertBeforeParent = (before == null) ? n : beforeParent; switch (c.getType()) { case Token.LABEL: extractForInitializer(c, insertBefore, insertBeforeParent); break; case Token.FOR: if (!NodeUtil.isForIn(c) && c.getFirstChild().getType() != Token.EMPTY) { Node init = c.getFirstChild(); c.replaceChild(init, new Node(Token.EMPTY)); [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] extractForInitializer [RETURN_TYPE] void  Node n Node before Node beforeParent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node before beforeParent c init insertBefore insertBeforeParent n newStatement next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	316	316	1	add	
80	[BUG] [BUGGY] Node insertBeforeParent = (before == null) ? n : beforeParent; [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] Node n, Node before, Node beforeParent) { for (Node next, c = n.getFirstChild(); c != null; c = next) { next = c.getNext(); Node insertBefore = (before == null) ? c : before; [BUGGY] Node insertBeforeParent = (before == null) ? n : beforeParent; [BUGGY] switch (c.getType()) { case Token.LABEL: extractForInitializer(c, insertBefore, insertBeforeParent); break; case Token.FOR: if (!NodeUtil.isForIn(c) && c.getFirstChild().getType() != Token.EMPTY) { Node init = c.getFirstChild(); c.replaceChild(init, new Node(Token.EMPTY));  [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] extractForInitializer [RETURN_TYPE] void  Node n Node before Node beforeParent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node before beforeParent c init insertBefore insertBeforeParent n newStatement next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	317	317	1	replace	
81	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] Node n, Node before, Node beforeParent) { for (Node next, c = n.getFirstChild(); c != null; c = next) { next = c.getNext(); Node insertBefore = (before == null) ? c : before; [BUGGY] [BUGGY] Node insertBeforeParent = (before == null) ? n : beforeParent; switch (c.getType()) { case Token.LABEL: extractForInitializer(c, insertBefore, insertBeforeParent); break; case Token.FOR: if (!NodeUtil.isForIn(c) && c.getFirstChild().getType() != Token.EMPTY) { Node init = c.getFirstChild(); c.replaceChild(init, new Node(Token.EMPTY));  [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] extractForInitializer [RETURN_TYPE] void  Node n Node before Node beforeParent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node before beforeParent c init insertBefore insertBeforeParent n newStatement next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	317	317	1	add	
82	[BUG] [BUGGY] switch (c.getType()) { [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] Node n, Node before, Node beforeParent) { for (Node next, c = n.getFirstChild(); c != null; c = next) { next = c.getNext(); Node insertBefore = (before == null) ? c : before; Node insertBeforeParent = (before == null) ? n : beforeParent; [BUGGY] switch (c.getType()) { [BUGGY] case Token.LABEL: extractForInitializer(c, insertBefore, insertBeforeParent); break; case Token.FOR: if (!NodeUtil.isForIn(c) && c.getFirstChild().getType() != Token.EMPTY) { Node init = c.getFirstChild(); c.replaceChild(init, new Node(Token.EMPTY)); Node newStatement; [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] extractForInitializer [RETURN_TYPE] void  Node n Node before Node beforeParent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node before beforeParent c init insertBefore insertBeforeParent n newStatement next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	318	318	1	replace	
83	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] Node n, Node before, Node beforeParent) { for (Node next, c = n.getFirstChild(); c != null; c = next) { next = c.getNext(); Node insertBefore = (before == null) ? c : before; Node insertBeforeParent = (before == null) ? n : beforeParent; [BUGGY] [BUGGY] switch (c.getType()) { case Token.LABEL: extractForInitializer(c, insertBefore, insertBeforeParent); break; case Token.FOR: if (!NodeUtil.isForIn(c) && c.getFirstChild().getType() != Token.EMPTY) { Node init = c.getFirstChild(); c.replaceChild(init, new Node(Token.EMPTY)); Node newStatement; [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] extractForInitializer [RETURN_TYPE] void  Node n Node before Node beforeParent [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node before beforeParent c init insertBefore insertBeforeParent n newStatement next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	318	318	1	add	
85	[BUG] [BUGGY] for (Node next, c = n.getFirstChild(); c != null; c = next) { [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void splitVarDeclarations(Node n) { [BUGGY] for (Node next, c = n.getFirstChild(); c != null; c = next) { [BUGGY] next = c.getNext(); if (c.getType() == Token.VAR) { if (assertOnChange && !c.hasChildren()) { throw new IllegalStateException("Empty VAR node."); } while (c.getFirstChild() != c.getLastChild()) { Node name = c.getFirstChild(); c.removeChild(name); Node newVar = new Node(Token.VAR, name, n.getLineno(), n.getCharno()); [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] splitVarDeclarations [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node c n name newVar next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	
86	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void splitVarDeclarations(Node n) { [BUGGY] [BUGGY] for (Node next, c = n.getFirstChild(); c != null; c = next) { next = c.getNext(); if (c.getType() == Token.VAR) { if (assertOnChange && !c.hasChildren()) { throw new IllegalStateException("Empty VAR node."); } while (c.getFirstChild() != c.getLastChild()) { Node name = c.getFirstChild(); c.removeChild(name); Node newVar = new Node(Token.VAR, name, n.getLineno(), n.getCharno()); [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] splitVarDeclarations [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node c n name newVar next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	add	
87	[BUG] [BUGGY] next = c.getNext(); [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void splitVarDeclarations(Node n) { for (Node next, c = n.getFirstChild(); c != null; c = next) { [BUGGY] next = c.getNext(); [BUGGY] if (c.getType() == Token.VAR) { if (assertOnChange && !c.hasChildren()) { throw new IllegalStateException("Empty VAR node."); } while (c.getFirstChild() != c.getLastChild()) { Node name = c.getFirstChild(); c.removeChild(name); Node newVar = new Node(Token.VAR, name, n.getLineno(), n.getCharno()); n.addChildBefore(newVar, c); [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] splitVarDeclarations [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node c n name newVar next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	
88	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void splitVarDeclarations(Node n) { for (Node next, c = n.getFirstChild(); c != null; c = next) { [BUGGY] [BUGGY] next = c.getNext(); if (c.getType() == Token.VAR) { if (assertOnChange && !c.hasChildren()) { throw new IllegalStateException("Empty VAR node."); } while (c.getFirstChild() != c.getLastChild()) { Node name = c.getFirstChild(); c.removeChild(name); Node newVar = new Node(Token.VAR, name, n.getLineno(), n.getCharno()); n.addChildBefore(newVar, c); [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] splitVarDeclarations [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node c n name newVar next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	add	
89	[BUG] [BUGGY] if (c.getType() == Token.VAR) { [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void splitVarDeclarations(Node n) { for (Node next, c = n.getFirstChild(); c != null; c = next) { next = c.getNext(); [BUGGY] if (c.getType() == Token.VAR) { [BUGGY] if (assertOnChange && !c.hasChildren()) { throw new IllegalStateException("Empty VAR node."); } while (c.getFirstChild() != c.getLastChild()) { Node name = c.getFirstChild(); c.removeChild(name); Node newVar = new Node(Token.VAR, name, n.getLineno(), n.getCharno()); n.addChildBefore(newVar, c); reportCodeChange("VAR with multiple children"); [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] splitVarDeclarations [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node c n name newVar next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	357	357	1	replace	
90	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void splitVarDeclarations(Node n) { for (Node next, c = n.getFirstChild(); c != null; c = next) { next = c.getNext(); [BUGGY] [BUGGY] if (c.getType() == Token.VAR) { if (assertOnChange && !c.hasChildren()) { throw new IllegalStateException("Empty VAR node."); } while (c.getFirstChild() != c.getLastChild()) { Node name = c.getFirstChild(); c.removeChild(name); Node newVar = new Node(Token.VAR, name, n.getLineno(), n.getCharno()); n.addChildBefore(newVar, c); reportCodeChange("VAR with multiple children"); [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] splitVarDeclarations [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Map constantMap Node c n name newVar next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	357	357	1	add	
92	[BUG] [BUGGY] Callback tickler = new ScopeTicklingCallback(); [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void removeDuplicateDeclarations(Node root) { [BUGGY] Callback tickler = new ScopeTicklingCallback(); [BUGGY] ScopeCreator scopeCreator =new SyntacticScopeCreator( compiler, new DuplicateDeclarationHandler()); NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator); t.traverse(root); } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void  Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Callback tickler NodeTraversal t Node root ScopeCreator scopeCreator Map constantMap  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	429	429	1	replace	
93	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void removeDuplicateDeclarations(Node root) { [BUGGY] [BUGGY] Callback tickler = new ScopeTicklingCallback(); ScopeCreator scopeCreator =new SyntacticScopeCreator( compiler, new DuplicateDeclarationHandler()); NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator); t.traverse(root); } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void  Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Callback tickler NodeTraversal t Node root ScopeCreator scopeCreator Map constantMap  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	429	429	1	add	
94	[BUG] [BUGGY] ScopeCreator scopeCreator =new SyntacticScopeCreator( compiler, new DuplicateDeclarationHandler()); [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void removeDuplicateDeclarations(Node root) { Callback tickler = new ScopeTicklingCallback(); [BUGGY] ScopeCreator scopeCreator =new SyntacticScopeCreator(  compiler, new DuplicateDeclarationHandler()); [BUGGY] compiler, new DuplicateDeclarationHandler()); NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator); t.traverse(root); } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void  Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Callback tickler NodeTraversal t Node root ScopeCreator scopeCreator Map constantMap  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	430	431	1	replace	
95	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void removeDuplicateDeclarations(Node root) { Callback tickler = new ScopeTicklingCallback(); [BUGGY] [BUGGY] ScopeCreator scopeCreator =new SyntacticScopeCreator(  compiler, new DuplicateDeclarationHandler()); compiler, new DuplicateDeclarationHandler()); NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator); t.traverse(root); } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void  Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Callback tickler NodeTraversal t Node root ScopeCreator scopeCreator Map constantMap  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	430	431	1	add	
96	[BUG] [BUGGY] NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator); [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void removeDuplicateDeclarations(Node root) { Callback tickler = new ScopeTicklingCallback(); ScopeCreator scopeCreator =new SyntacticScopeCreator( compiler, new DuplicateDeclarationHandler()); [BUGGY] NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator); [BUGGY] t.traverse(root); } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void  Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Callback tickler NodeTraversal t Node root ScopeCreator scopeCreator Map constantMap  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	432	432	1	replace	
97	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void removeDuplicateDeclarations(Node root) { Callback tickler = new ScopeTicklingCallback(); ScopeCreator scopeCreator =new SyntacticScopeCreator( compiler, new DuplicateDeclarationHandler()); [BUGGY] [BUGGY] NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator); t.traverse(root); } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void  Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Callback tickler NodeTraversal t Node root ScopeCreator scopeCreator Map constantMap  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	432	432	1	add	
98	[BUG] [BUGGY] t.traverse(root); [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void removeDuplicateDeclarations(Node root) { Callback tickler = new ScopeTicklingCallback(); ScopeCreator scopeCreator =new SyntacticScopeCreator( compiler, new DuplicateDeclarationHandler()); NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator); [BUGGY] t.traverse(root); [BUGGY] } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void  Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Callback tickler NodeTraversal t Node root ScopeCreator scopeCreator Map constantMap  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	433	433	1	replace	
99	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){arguments=Array.prototype.slice.call(arguments [CONTEXT] private void removeDuplicateDeclarations(Node root) { Callback tickler = new ScopeTicklingCallback(); ScopeCreator scopeCreator =new SyntacticScopeCreator( compiler, new DuplicateDeclarationHandler()); NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator); [BUGGY] [BUGGY] t.traverse(root); } [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void  Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst Callback tickler NodeTraversal t Node root ScopeCreator scopeCreator Map constantMap  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	433	433	1	add	
