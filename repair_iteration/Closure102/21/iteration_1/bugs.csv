bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler);  [CE]  no  suitable  constructor  found  for  MakeDeclaredNamesUnique(AbstractCompiler)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler);	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  	non-compiled	[CE]  no  suitable  constructor  found  for  MakeDeclaredNamesUnique(AbstractCompiler)	41	None	replace
2	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE();  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE();  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE();	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  	non-compiled	[CE]  cannot  find  symbol	41	None	replace
3	[BUG]  [BUGGY]  Node  renamer  =  new  MakeDeclaredNamesUnique();  [CE]  incompatible  types  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  Node  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	replace	Node  renamer  =  new  MakeDeclaredNamesUnique();	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  	non-compiled	[CE]  incompatible  types	41	None	replace
4	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  renamer  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	replace	  	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  	non-compiled	[CE]  cannot  find  symbol  renamer	41	None	replace
5	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	add	    NodeTraversal.traverse(compiler,  root,  this);		compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	42	1	add
6	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	replace	    NodeTraversal.traverse(compiler,  root,  this);		compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	42	1	add
7	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	replace	    NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);		non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	42	None	add
8	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  root);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	replace	    NodeTraversal.traverse(compiler,  root);		non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node)	42	None	add
9	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	add	    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());		compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	42	1	add
10	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	replace	    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());		compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	42	1	add
11	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	add	    NodeTraversal.traverse(compiler,  externs,  this);		compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	42	1	add
12	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	replace	    NodeTraversal.traverse(compiler,  externs,  this);		compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	42	1	add
13	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  root,  false);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	replace	    NodeTraversal.traverse(compiler,  root,  false);		non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	42	None	add
14	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  root);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	replace	    NodeTraversal.traverse(compiler,  externs,  root);		non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	42	None	add
15	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	add	    NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());		compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	42	1	add
16	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	replace	    NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());		compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	42	1	add
17	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(conVERT_WHILE_TO_FOR);  [CE]  cannot  find  symbol  conVERT_WHILE_TO_FOR  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(conVERT_WHILE_TO_FOR);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(conVERT_WHILE_TO_FOR);	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  	non-compiled	[CE]  cannot  find  symbol  conVERT_WHILE_TO_FOR	41	None	replace
18	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs);  [CE]  no  suitable  constructor  found  for  MakeDeclaredNamesUnique(Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs);	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  	non-compiled	[CE]  no  suitable  constructor  found  for  MakeDeclaredNamesUnique(Node)	41	None	replace
19	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  constructor  found  for  MakeDeclaredNamesUnique(AbstractCompiler,boolean)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE);	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  	non-compiled	[CE]  no  suitable  constructor  found  for  MakeDeclaredNamesUnique(AbstractCompiler,boolean)	41	None	replace
20	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root);  [CE]  cannot  find  symbol  t  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	90	90	1	replace	    NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root);		non-compiled	[CE]  cannot  find  symbol  t	42	None	add
