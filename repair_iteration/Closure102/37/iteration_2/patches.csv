bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(c.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkArgument(n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
4	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.LABEL);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.LABEL);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.LABEL);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
5	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  beforeParent.getFirstChild().getType()  ==  Token.LABEL);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  beforeParent.getFirstChild().getType()  ==  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  beforeParent.getFirstChild().getType()  ==  Token.LABEL);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.LABEL);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
6	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.LABEL);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.LABEL);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.LABEL);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
7	[BUG]  [BUGGY]  for(Node  c,  before  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  before  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  before  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c,    before    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
8	[BUG]  [BUGGY]  For(Node  c,  before  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  c,  before  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  c,  before  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c,    before    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
9	[BUG]  [BUGGY]  for(Node  c,  before  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  before  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  before  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {	  for(Node    c,    before    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
10	[BUG]  [BUGGY]  Node  before  =  n.getPrevious();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  before  =  n.getPrevious();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  before  =  n.getPrevious();	  Node    before    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
11	[BUG]  [BUGGY]  Node  before  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  before  =  n.getParent();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  before  =  n.getParent();	  Node    before    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
12	[BUG]  [BUGGY]  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.in)  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.in)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.in)  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.in)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
13	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.in)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
14	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.parent)  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.parent)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.parent)  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.in)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
15	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.child)  {  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.child)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.child)  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.in)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
16	[BUG]  [BUGGY]  For(Node  c,  before,  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  c,  before,  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  c,  before,  c!=  null;  c  =  c.getNext())  {	  For(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
17	[BUG]  [BUGGY]  For(Node  next,  c  =  n.getFirstChild();  c!=  null;  c  =  next.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  next,  c  =  n.getFirstChild();  c!=  null;  c  =  next.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  next,  c  =  n.getFirstChild();  c!=  null;  c  =  next.getNext())  {	  For(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
18	[BUG]  [BUGGY]  For(Node  c,  c  =  before.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  c,  c  =  before.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  c,  c  =  before.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  For(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
19	[BUG]  [BUGGY]  Node  c  =  before.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  c  =  before.removeFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  c  =  before.removeFirstChild();	  Node    c    =    n.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
20	[BUG]  [BUGGY]  Node  c  =  beforeParent.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  c  =  beforeParent.removeFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  c  =  beforeParent.removeFirstChild();	  Node    c    =    n.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
21	[BUG]  [BUGGY]  Node  before  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  before  =  c.getLastChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  before  =  c.getLastChild();	  Node    before    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
22	[BUG]  [BUGGY]  Node  before  =  c.getNext();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  before  =  c.getNext();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  before  =  c.getNext();	  Node    before    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
23	[BUG]  [BUGGY]  Node  next  =  beforeParent.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  next  =  beforeParent.removeFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  next  =  beforeParent.removeFirstChild();	  Node    next    =    n.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
24	[BUG]  [BUGGY]  Node  next  =  before.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  next  =  before.removeFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  next  =  before.removeFirstChild();	  Node    next    =    n.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
25	[BUG]  [BUGGY]  Node  first  =  n.getPrevious();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  first  =  n.getPrevious();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  first  =  n.getPrevious();	  Node    first    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
26	[BUG]  [BUGGY]  Node  first  =  c.getNext();  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  first  =  c.getNext();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  first  =  c.getNext();	  Node    first    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
27	[BUG]  [BUGGY]  Node  first  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  first  =  c.getLastChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  first  =  c.getLastChild();	  Node    first    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
28	[BUG]  [BUGGY]  Node  first  =  beforeParent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  first  =  beforeParent.getFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  first  =  beforeParent.getFirstChild();	  Node    first    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
29	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext());  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext());	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
30	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree());  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree());	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
31	[BUG]  [BUGGY]  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c);  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c);	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
32	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getLastChild());  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getLastChild());	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
33	[BUG]  [BUGGY]  for(Node  c,  n  =  beforeParent.getLastChild();  c!=  null;  c  =  c)  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  n  =  beforeParent.getLastChild();  c!=  null;  c  =  c)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  n  =  beforeParent.getLastChild();  c!=  null;  c  =  c)  {	  for(Node    c,    n    =    beforeParent.getFirstChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  before,  beforeParent);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  before,  beforeParent);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  before,  beforeParent);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    before);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  before);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  before);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  before);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    before);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  before,  before);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  before,  before);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  before,  before);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    before);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  before,  c);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  before,  c);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  before,  c);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    before);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION,  before,  beforeParent);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION,  before,  beforeParent);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION,  before,  beforeParent);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    before);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
39	[BUG]  [BUGGY]  Node  c  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  c  =  n.getParent();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  c  =  n.getParent();	  Node    c    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  Node  c  =  beforeParent.getNext();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  c  =  beforeParent.getNext();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  c  =  beforeParent.getNext();	  Node    c    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
41	[BUG]  [BUGGY]  for(Node  c,  before  =  n.getLastChild();  c!=  null;  c  =  c)  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  before  =  n.getLastChild();  c!=  null;  c  =  c)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  before  =  n.getLastChild();  c!=  null;  c  =  c)  {	  for(Node    c,    before    =    n.getFirstChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
42	[BUG]  [BUGGY]  for(Node  c,  before  =  n.getFirstChild();  c!=  null;  c  =  c);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  before  =  n.getFirstChild();  c!=  null;  c  =  c);  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  before  =  n.getFirstChild();  c!=  null;  c  =  c);	  for(Node    c,    before    =    n.getFirstChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
43	[BUG]  [BUGGY]  for(Node  c,  before  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  before  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  before  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {	  for(Node    c,    before    =    n.getFirstChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
44	[BUG]  [BUGGY]  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.trim())  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.trim())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.trim())  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.trim())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
45	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.trim())  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.trim())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.trim())  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.trim())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
46	[BUG]  [BUGGY]  for(Node  c  =  before.getFirstChild();  c!=  null;  c  =  c.trim())  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  before.getFirstChild();  c!=  null;  c  =  c.trim())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  before.getFirstChild();  c!=  null;  c  =  c.trim())  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.trim())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
47	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.trim())  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.trim())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.trim())  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.trim())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
48	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  before,  beforeParent);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  before,  beforeParent);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  before,  beforeParent);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    before);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
49	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  before,  c);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  before,  c);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  before,  c);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    before);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
50	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  before);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  before);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  before);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    before);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
51	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  before,  before);  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  before,  before);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  before,  before);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    before);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
52	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
53	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.NAME);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
54	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  beforeParent.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  beforeParent.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  beforeParent.getFirstChild().getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
55	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
56	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()!=  Token.LABEL);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()!=  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()!=  Token.LABEL);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()!=    Token.LABEL);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
57	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  beforeParent.getFirstChild().getType()!=  Token.LABEL);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  beforeParent.getFirstChild().getType()!=  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  beforeParent.getFirstChild().getType()!=  Token.LABEL);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()!=    Token.LABEL);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
58	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext(),  before)  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext(),  before)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext(),  before)  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c,    before)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
59	[BUG]  [BUGGY]  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c,  before)  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c,  before)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c,  before)  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c,    before)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
60	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext()),  before)  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext()),  before)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext()),  before)  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c,    before)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  before,  arguments);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  before,  arguments);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  before,  arguments);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  beforeParent);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  beforeParent);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  beforeParent);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME);	  Preconditions.checkState(before.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(before.getType()  ==  Token.NAME,  before);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(before.getType()  ==  Token.NAME,  before);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(before.getType()  ==  Token.NAME,  before);	  Preconditions.checkState(before.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(before.getType()  ==  Token.NAME,  arguments);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(before.getType()  ==  Token.NAME,  arguments);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(before.getType()  ==  Token.NAME,  arguments);	  Preconditions.checkState(before.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
66	[BUG]  [BUGGY]  for(Node  c  =  first.getFirstChild();  c!=  null;  c  =  n.getNext())  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  first.getFirstChild();  c!=  null;  c  =  n.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  first.getFirstChild();  c!=  null;  c  =  n.getNext())  {	  for(Node    c    =    first.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(before.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(before.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(before.getType()!=  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(before.getType()!=  Token.FUNCTION);	  Preconditions.checkState(before.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(before.getType()  ==  Token.FUNCTION  ||  before.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(before.getType()  ==  Token.FUNCTION  ||  before.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(before.getType()  ==  Token.FUNCTION  ||  before.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(before.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
70	[BUG]  [BUGGY]  for(Node  next  =  n.getFirstChild();  c!=  null;  c  =  next.getNext())  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  next  =  n.getFirstChild();  c!=  null;  c  =  next.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  next  =  n.getFirstChild();  c!=  null;  c  =  next.getNext())  {	  for(Node    c,    n    =    beforeParent.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
71	[BUG]  [BUGGY]  For(Node  next  =  n.getFirstChild();  c!=  null;  c  =  next.getNext())  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  next  =  n.getFirstChild();  c!=  null;  c  =  next.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  next  =  n.getFirstChild();  c!=  null;  c  =  next.getNext())  {	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
72	[BUG]  [BUGGY]  For(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
73	[BUG]  [BUGGY]  For(Node  c  =  before.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  c  =  before.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  c  =  before.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
74	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
75	[BUG]  [BUGGY]  Node  c  =  before.getLastChild();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  c  =  before.getLastChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  c  =  before.getLastChild();	  Node    c    =    before.getFirstChild();    	non-compiled	[CE]  not  a  statement	2	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.FUNCTION);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(c.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	45	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  >=  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	45	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	45	None	replace
79	[BUG]  [BUGGY]  For(Node  c,  n  =  before.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  c,  n  =  before.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  c,  n  =  before.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  For(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  not  a  statement	70	None	replace
80	[BUG]  [BUGGY]  For(Node  next,  n  =  c.getFirstChild();  c!=  null;  c  =  next.getNext())  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  next,  n  =  c.getFirstChild();  c!=  null;  c  =  next.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  next,  n  =  c.getFirstChild();  c!=  null;  c  =  next.getNext())  {	  For(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  not  a  statement	70	None	replace
81	[BUG]  [BUGGY]  For(Node  next,  n  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  next,  n  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  next,  n  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  For(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  not  a  statement	70	None	replace
82	[BUG]  [BUGGY]  For(Node  next,  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  next,  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  next,  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  For(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  not  a  statement	70	None	replace
83	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION,  before,  beforeParent);  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION,  before,  beforeParent);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION,  before,  beforeParent);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    beforeParent);    	non-compiled	[CE]  not  a  statement	42	None	replace
84	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  beforeParent.getType()  ==  Token.EMPTY);  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  beforeParent.getType()  ==  Token.EMPTY);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  beforeParent.getType()  ==  Token.EMPTY);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    beforeParent);    	non-compiled	[CE]  not  a  statement	42	None	replace
85	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  beforeParent.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  beforeParent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  beforeParent.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    beforeParent);    	non-compiled	[CE]  not  a  statement	42	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION,  n.getFirstChild());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION,  n.getFirstChild());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    c.getFirstChild());    	non-compiled	[CE]  not  a  statement	47	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION,  before.getFirstChild());  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION,  before.getFirstChild());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION,  before.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    c.getFirstChild());    	non-compiled	[CE]  not  a  statement	47	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  before,  c.getFirstChild());  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  before,  c.getFirstChild());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  before,  c.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    c.getFirstChild());    	non-compiled	[CE]  not  a  statement	47	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  c.getLastChild());  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  c.getLastChild());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  c.getLastChild());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    c.getFirstChild());    	non-compiled	[CE]  not  a  statement	47	None	replace
90	[BUG]  [BUGGY]  for(Node  c,  first  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  first  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  first  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c,    c    =    first.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  not  a  statement	76	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n);    	non-compiled	[CE]  not  a  statement	65	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild().getType()  ==  Token.LABEL);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild().getType()  ==  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild().getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild().getType()    ==    Token.LABEL);    	non-compiled	[CE]  not  a  statement	53	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  beforeParent.getFirstChild().getType()  ==  Token.LABEL);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  beforeParent.getFirstChild().getType()  ==  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  beforeParent.getFirstChild().getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild().getType()    ==    Token.LABEL);    	non-compiled	[CE]  not  a  statement	53	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getFirstChild().getType()  ==  Token.LABEL);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getFirstChild().getType()  ==  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getFirstChild().getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild().getType()    ==    Token.LABEL);    	non-compiled	[CE]  not  a  statement	53	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()!=  Token.LABEL);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()!=  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()!=  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild().getType()    ==    Token.LABEL);    	non-compiled	[CE]  not  a  statement	53	None	replace
96	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION,  n);  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION,  n);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION,  n);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    c);    	non-compiled	[CE]  not  a  statement	43	None	replace
97	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION,  before);  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION,  before);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION,  before);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    c);    	non-compiled	[CE]  not  a  statement	43	None	replace
98	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  c,  before);  [CE]  not  a  statement  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  c,  before);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  c,  before);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    c);    	non-compiled	[CE]  not  a  statement	43	None	replace
99	[BUG]  [BUGGY]  Node  before  =  c.getPreviousChild();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  before  =  c.getPreviousChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  before  =  c.getPreviousChild();	  Node    before    =    n.getPreviousChild();    	non-compiled	[CE]  not  a  statement	20	None	replace
100	[BUG]  [BUGGY]  for(Node  c,  n  =  before.getLastChild();  c!=  null;  c  =  c.getNext())  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  n  =  before.getLastChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  n  =  before.getLastChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c,    n    =    before.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  not  a  statement	11	None	replace
101	[BUG]  [BUGGY]  for(Node  next,  n  =  before.getFirstChild();  c!=  null;  c  =  next.getNext())  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  next,  n  =  before.getFirstChild();  c!=  null;  c  =  next.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  next,  n  =  before.getFirstChild();  c!=  null;  c  =  next.getNext())  {	  for(Node    c,    n    =    before.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  not  a  statement	11	None	replace
102	[BUG]  [BUGGY]  Node  first  =  c.removeFirstChild();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  first  =  c.removeFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  first  =  c.removeFirstChild();	  Node    first    =    n.removeFirstChild();    	non-compiled	[CE]  not  a  statement	66	None	replace
103	[BUG]  [BUGGY]  Node  first  =  before.removeFirstChild();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  first  =  before.removeFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  first  =  before.removeFirstChild();	  Node    first    =    n.removeFirstChild();    	non-compiled	[CE]  not  a  statement	66	None	replace
104	[BUG]  [BUGGY]  for(Node  c  =  before.getLastChild();  c!=  null;  c  =  c.getNext())  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  before.getLastChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  before.getLastChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    n.getLastChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  not  a  statement	28	None	replace
105	[BUG]  [BUGGY]  for(Node  c  =  first.getLastChild();  c!=  null;  c  =  c.getNext())  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  first.getLastChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  first.getLastChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    n.getLastChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  not  a  statement	28	None	replace
106	[BUG]  [BUGGY]  for(Node  c,  n  =  before.getLastChild();  c!=  null;  c  =  c)  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  n  =  before.getLastChild();  c!=  null;  c  =  c)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  n  =  before.getLastChild();  c!=  null;  c  =  c)  {	  for(Node    c,    n    =    n.getLastChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  not  a  statement	21	None	replace
107	[BUG]  [BUGGY]  For(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c)  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c)  {	  for(Node    c,    n    =    n.getLastChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  not  a  statement	21	None	replace
108	[BUG]  [BUGGY]  for(Node  next,  n  =  n.getFirstChild();  c!=  null;  c  =  c)  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  next,  n  =  n.getFirstChild();  c!=  null;  c  =  c)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  next,  n  =  n.getFirstChild();  c!=  null;  c  =  c)  {	  for(Node    c,    n    =    n.getLastChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  not  a  statement	21	None	replace
109	[BUG]  [BUGGY]  Node  before  =  c.removeFirstChild();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  before  =  c.removeFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  before  =  c.removeFirstChild();	  Node    before    =    n.removeFirstChild();    	non-compiled	[CE]  not  a  statement	62	None	replace
110	[BUG]  [BUGGY]  Node  before  =  n.removeLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  before  =  n.removeLastChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  before  =  n.removeLastChild();	  Node    before    =    n.removeFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
111	[BUG]  [BUGGY]  Context.checkState(c.getType()!=  Token.FUNCTION);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(c.getType()!=  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(c.getType()!=  Token.FUNCTION);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
112	[BUG]  [BUGGY]  Context.checkState(n.getType()  >=  Token.FUNCTION);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()  >=  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()  >=  Token.FUNCTION);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
113	[BUG]  [BUGGY]  Context.checkState(v.getType()!=  Token.FUNCTION);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(v.getType()!=  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(v.getType()!=  Token.FUNCTION);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
114	[BUG]  [BUGGY]  for(Node  c,  n  =  first.getLastChild();  c!=  null;  c  =  c.getNext())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  n  =  first.getLastChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  n  =  first.getLastChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c,    n    =    first.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
115	[BUG]  [BUGGY]  For(Node  c,  n  =  first.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  c,  n  =  first.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  c,  n  =  first.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c,    n    =    first.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
116	[BUG]  [BUGGY]  for(Node  next,  c  =  first.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  next,  c  =  first.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  next,  c  =  first.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c,    n    =    first.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
117	[BUG]  [BUGGY]  Node  first  =  before.getLastChild();  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  first  =  before.getLastChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  first  =  before.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  before.getFirstChild());  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  before.getFirstChild());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  before.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  before,  n.getFirstChild());  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  before,  n.getFirstChild());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  before,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  beforeParent.getFirstChild());  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  beforeParent.getFirstChild());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  beforeParent.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  c.getFirstChild());  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  c.getFirstChild());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  c.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
122	[BUG]  [BUGGY]  for(Node  c,  n  =  c.getLastChild();  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  n  =  c.getLastChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  n  =  c.getLastChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c,    n    =    c.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
123	[BUG]  [BUGGY]  For(Node  c,  n  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  c,  n  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  c,  n  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c,    n    =    c.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME,  before);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME,  before);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME,  before);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    c);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME,  n);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME,  n);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    c);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
126	[BUG]  [BUGGY]  for(Node  c,  n  =  first.getFirstChild();  c!=  null;  c  =  c)  {  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  n  =  first.getFirstChild();  c!=  null;  c  =  c)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  n  =  first.getFirstChild();  c!=  null;  c  =  c)  {	  for(Node    c,    n    =    before.getFirstChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
127	[BUG]  [BUGGY]  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.cloneTree())  {  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.cloneTree())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.cloneTree())  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.cloneTree())    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
128	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.cloneTree())    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
129	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.cloneTree())  {  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.cloneTree())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.cloneTree())  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.cloneTree())    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
130	[BUG]  [BUGGY]  for(Node  c  =  before.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  before.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  before.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.cloneTree())    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.NAME,  before);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.NAME,  before);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(c.getType()!=  Token.NAME,  before);	  Preconditions.checkState(n.getType()!=    Token.NAME,    before);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
132	[BUG]  [BUGGY]  for(Node  c,  n  =  beforeParent.getLastChild();  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  n  =  beforeParent.getLastChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  n  =  beforeParent.getLastChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c,    n    =    n.getLastChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
133	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c)  {  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c)  {	  for(Node    c    =    n.getLastChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
134	[BUG]  [BUGGY]  for(Node  c  =  before.getLastChild();  c!=  null;  c  =  c)  {  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  before.getLastChild();  c!=  null;  c  =  c)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  before.getLastChild();  c!=  null;  c  =  c)  {	  for(Node    c    =    n.getLastChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
135	[BUG]  [BUGGY]  Node  next  =  before.getNext()  -  1;  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  next  =  before.getNext()  -  1;  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  next  =  before.getNext()  -  1;	  Node    next    =    before.getNext();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
136	[BUG]  [BUGGY]  for(Node  c,  c  =  before.getLastChild();  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  c  =  before.getLastChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  c  =  before.getLastChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c,    c    =    n.getLastChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
137	[BUG]  [BUGGY]  for(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c.getNext());  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c.getNext());  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c.getNext());	  for(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
138	[BUG]  [BUGGY]  for(Node  c,  n  =  before.getFirstChild();  c!=  null;  c  =  c);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  n  =  before.getFirstChild();  c!=  null;  c  =  c);  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  n  =  before.getFirstChild();  c!=  null;  c  =  c);	  for(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
139	[BUG]  [BUGGY]  for(Node  c,  n  =  n.getLastChild();  c!=  null;  c  =  c);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  n  =  n.getLastChild();  c!=  null;  c  =  c);  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  n  =  n.getLastChild();  c!=  null;  c  =  c);	  for(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
140	[BUG]  [BUGGY]  for(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree());  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree());  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree());	  for(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
141	[BUG]  [BUGGY]  Node  c  =  beforeParent.getLastChild();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  c  =  beforeParent.getLastChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  c  =  beforeParent.getLastChild();	  Node    c    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
142	[BUG]  [BUGGY]  Node  c  =  first.getLastChild();  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  c  =  first.getLastChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  c  =  first.getLastChild();	  Node    c    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
143	[BUG]  [BUGGY]  for(Node  c,  n  =  before.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  n  =  before.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  n  =  before.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {	  for(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.cloneTree())    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
144	[BUG]  [BUGGY]  for(Node  c,  n  =  n.getLastChild();  c!=  null;  c  =  c.cloneTree())  {  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  n  =  n.getLastChild();  c!=  null;  c  =  c.cloneTree())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  n  =  n.getLastChild();  c!=  null;  c  =  c.cloneTree())  {	  for(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.cloneTree())    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
145	[BUG]  [BUGGY]  for(Node  c,  n  =  first.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  n  =  first.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  n  =  first.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {	  for(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.cloneTree())    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.NAME);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  beforeParent.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  beforeParent.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  beforeParent.getFirstChild().getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.LABEL);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.LABEL);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  beforeParent.getFirstChild().getType()  ==  Token.LABEL);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  beforeParent.getFirstChild().getType()  ==  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  beforeParent.getFirstChild().getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.LABEL);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.LABEL);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.LABEL);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.LABEL);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.LABEL);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
154	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION);	  Context.checkState(before.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
155	[BUG]  [BUGGY]  Context.checkState(before.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(before.getType()!=  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(before.getType()!=  Token.FUNCTION);	  Context.checkState(before.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
156	[BUG]  [BUGGY]  Context.checkState(v.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(v.getType()  ==  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(v.getType()  ==  Token.FUNCTION);	  Context.checkState(before.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
157	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  before,  beforeParent);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  before,  beforeParent);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  before,  beforeParent);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    before);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  before,  c);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  before,  c);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  before,  c);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    before);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(before.getType()!=  Token.NAME,  before);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(before.getType()!=  Token.NAME,  before);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(before.getType()!=  Token.NAME,  before);	  Preconditions.checkState(n.getType()!=    Token.NAME,    before);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkState(before.getType()!=  Token.NAME);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(before.getType()!=  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(before.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME,    before);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
161	[BUG]  [BUGGY]  Context.checkState(beforeParent.getType()!=  Token.FUNCTION);  [CE]  class,  interface,  or  enum  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(beforeParent.getType()!=  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(beforeParent.getType()!=  Token.FUNCTION);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
162	[BUG]  [BUGGY]  Context.checkState(first.getType()!=  Token.FUNCTION);  [CE]  class,  interface,  or  enum  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(first.getType()!=  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(first.getType()!=  Token.FUNCTION);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
163	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  before;  c  =  c.cloneTree())  {  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  before;  c  =  c.cloneTree())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getFirstChild();  c!=  before;  c  =  c.cloneTree())  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.cloneTree())    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
164	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.parent())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.parent())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.parent())  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.cloneTree())    {    	non-compiled	[CE]  	38	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  before,  before);  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  before,  before);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  before,  before);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    before);    	non-compiled	[CE]  	24	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  before,  beforeParent);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  before,  beforeParent);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME,  before,  beforeParent);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    before);    	non-compiled	[CE]  	24	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  	34	None	replace
168	[BUG]  [BUGGY]  for(Node  c,  n  =  first.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  n  =  first.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  n  =  first.getFirstChild();  c  ==  null;  c  =  c.getNext())  {	  for(Node    c,    n    =    first.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
169	[BUG]  [BUGGY]  Context.checkState(before.getType()  ==  Token.FUNCTION,  before);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(before.getType()  ==  Token.FUNCTION,  before);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(before.getType()  ==  Token.FUNCTION,  before);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    before);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
170	[BUG]  [BUGGY]  Node  c  =  before,  beforeParent.getFirstChild();  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  c  =  before,  beforeParent.getFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  c  =  before,  beforeParent.getFirstChild();	  Node    c    =    beforeParent.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
171	[BUG]  [BUGGY]  Node  c  =  first.getFirstChild();  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  c  =  first.getFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  c  =  first.getFirstChild();	  Node    c    =    beforeParent.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
172	[BUG]  [BUGGY]  Preconditions.checkState(beforeParent.getType()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(beforeParent.getType()!=  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(beforeParent.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(beforeParent.getType()!=  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(beforeParent.getType()!=  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(beforeParent.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
174	[BUG]  [BUGGY]  Node  next  =  before,  beforeParent.getNext();  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  next  =  before,  beforeParent.getNext();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  next  =  before,  beforeParent.getNext();	  Node    next    =    beforeParent.getNext();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
175	[BUG]  [BUGGY]  Node  next  =  first.getNext();  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  next  =  first.getNext();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  next  =  first.getNext();	  Node    next    =    beforeParent.getNext();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
176	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  before;  c  =  c.getNext())  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  before;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getFirstChild();  c!=  before;  c  =  c.getNext())  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c,    before)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
177	[BUG]  [BUGGY]  for(Node  c,  c  =  before.getLastChild();  c!=  null;  c  =  c)  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  c  =  before.getLastChild();  c!=  null;  c  =  c)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  c  =  before.getLastChild();  c!=  null;  c  =  c)  {	  for(Node    c,    c    =    n.getLastChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  not  a  statement	5	None	replace
178	[BUG]  [BUGGY]  For(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {	  For(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  not  a  statement	75	None	replace
179	[BUG]  [BUGGY]  For(Node  c,  c  =  first.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  c,  c  =  first.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  c,  c  =  first.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  For(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  ';'  expected	75	None	replace
180	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  before);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  before);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  before);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n);    	non-compiled	[CE]  ';'  expected	65	None	replace
181	[BUG]  [BUGGY]  Preconditions.checkState(before.getType()  ==  Token.FUNCTION,  before);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(before.getType()  ==  Token.FUNCTION,  before);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(before.getType()  ==  Token.FUNCTION,  before);	  Preconditions.checkState(before.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	55	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkState(before.getType()  ==  Token.FUNCTION  ||  before.getType()  ==  Token.LABEL);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(before.getType()  ==  Token.FUNCTION  ||  before.getType()  ==  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(before.getType()  ==  Token.FUNCTION  ||  before.getType()  ==  Token.LABEL);	  Preconditions.checkState(before.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	55	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	46	None	replace
184	[BUG]  [BUGGY]  Node  before  =  n.getAncestor(1);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  before  =  n.getAncestor(1);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  before  =  n.getAncestor(1);	  Node    before    =    n.getPreviousChild();    	non-compiled	[CE]  ';'  expected	20	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  before.getFirstChild().getType()  ==  Token.LABEL);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  before.getFirstChild().getType()  ==  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  before.getFirstChild().getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild().getType()    ==    Token.LABEL);    	non-compiled	[CE]  ';'  expected	53	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  before,  n.getFirstChild().getType()  ==  Token.LABEL);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  before,  n.getFirstChild().getType()  ==  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  before,  n.getFirstChild().getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild().getType()    ==    Token.LABEL);    	non-compiled	[CE]  ';'  expected	53	None	replace
187	[BUG]  [BUGGY]  Node  before  =  n.getNextChild();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  before  =  n.getNextChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  before  =  n.getNextChild();	  Node    before    =    n.getNext();    	non-compiled	[CE]  not  a  statement	19	None	replace
188	[BUG]  [BUGGY]  Node  first  =  n.removeLastChild();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  first  =  n.removeLastChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  first  =  n.removeLastChild();	  Node    first    =    n.removeFirstChild();    	non-compiled	[CE]  not  a  statement	66	None	replace
189	[BUG]  [BUGGY]  for(Node  c,  before  =  n.getFirstChild();  c!=  null;  c  =  c.getParent())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  before  =  n.getFirstChild();  c!=  null;  c  =  c.getParent())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  before  =  n.getFirstChild();  c!=  null;  c  =  c.getParent())  {	  for(Node    c,    before    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION,  before);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION,  before);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION,  before);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    c.getFirstChild());    	non-compiled	[CE]  not  a  statement	47	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION,  beforeParent.getFirstChild());  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION,  beforeParent.getFirstChild());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION,  beforeParent.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    c.getFirstChild());    	non-compiled	[CE]  not  a  statement	47	None	replace
192	[BUG]  [BUGGY]  Node  c  =  before.getNext();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  c  =  before.getNext();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  c  =  before.getNext();	  Node    c    =    n.getNext();    	non-compiled	[CE]  not  a  statement	4	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()  ==  Token.LABEL);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()  ==  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.LABEL);    	non-compiled	[CE]  not  a  statement	56	None	replace
194	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()!=  Token.LABEL);  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()!=  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()!=  Token.LABEL);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()!=    Token.LABEL);    	non-compiled	[CE]  not  a  statement	58	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(before.getType()  ==  Token.NAME,  c);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(before.getType()  ==  Token.NAME,  c);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(before.getType()  ==  Token.NAME,  c);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    c);    	non-compiled	[CE]  not  a  statement	26	None	replace
196	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  before;  c  =  c.getNext())  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  before;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  c  =  n.getFirstChild();  c!=  before;  c  =  c.getNext())  {	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  not  a  statement	29	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLastChild());  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLastChild());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLastChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  not  a  statement	63	None	replace
198	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()  ==  Token.LABEL);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()  ==  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()  ==  Token.LABEL);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.LABEL);    	non-compiled	[CE]  not  a  statement	79	None	replace
199	[BUG]  [BUGGY]  Context.checkState(before.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()!=  Token.LABEL);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(before.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()!=  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(before.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()!=  Token.LABEL);	  Context.checkState(before.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	57	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  before  =  n.getLastChild();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  before  =  n.getLastChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  before  =  n.getLastChild();	  Node    before    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	17	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY);  Node  before  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY);  Node  before  =  n.getLastChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.EMPTY);  Node  before  =  n.getLastChild();	  Node    before    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  before  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  before  =  n.getLastChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  before  =  n.getLastChild();	  Node    before    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
203	[BUG]  [BUGGY]  For(Node  c,  n  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  c,  n  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  c,  n  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {	  For(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
204	[BUG]  [BUGGY]  For(Node  c,  n  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  c,  n  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  c,  n  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {	  For(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  ';'  expected	70	None	replace
205	[BUG]  [BUGGY]  Node  first  =  before.getNext();  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  first  =  before.getNext();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  first  =  before.getNext();	  Node    first    =    n.getNext();    	non-compiled	[CE]  ';'  expected	67	None	replace
206	[BUG]  [BUGGY]  for(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c;  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c;  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c;	  for(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c);    	non-compiled	[CE]  ';'  expected	73	None	replace
207	[BUG]  [BUGGY]  for(Node  c  =  n;  c!=  null;  c  =  c.getNext())  {  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n;  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n;  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    before.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
208	[BUG]  [BUGGY]  Context.checkState(before.getType()  ==  Token.FUNCTION,  c);  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(before.getType()  ==  Token.FUNCTION,  c);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(before.getType()  ==  Token.FUNCTION,  c);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    c);    	non-compiled	[CE]  ';'  expected	43	None	replace
209	[BUG]  [BUGGY]  Node  next  =  before.getParent();  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  next  =  before.getParent();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  next  =  before.getParent();	  Node    next    =    n.getParent();    	non-compiled	[CE]  ';'  expected	78	None	replace
210	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  before;  c  =  c.trim())  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  before;  c  =  c.trim())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getFirstChild();  c!=  before;  c  =  c.trim())  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.trim())    {    	non-compiled	[CE]  ';'  expected	60	None	replace
211	[BUG]  [BUGGY]  for(Node  c,  n  =  firstChild.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  n  =  firstChild.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  n  =  firstChild.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c,    n    =    n.getLastChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  ';'  expected	12	None	replace
212	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  before;  c  =  c);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  before;  c  =  c);  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getFirstChild();  c!=  before;  c  =  c);	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c);    	non-compiled	[CE]  ';'  expected	39	None	replace
213	[BUG]  [BUGGY]  for(Node  c  =  before.getFirstChild();  c!=  null;  c  =  c)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  before.getFirstChild();  c!=  null;  c  =  c)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  before.getFirstChild();  c!=  null;  c  =  c)  {	  for(Node    c    =    n.getLastChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  ';'  expected	37	None	replace
214	[BUG]  [BUGGY]  for(Node  c  =  first.getLastChild();  c!=  null;  c  =  c)  {  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  first.getLastChild();  c!=  null;  c  =  c)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  first.getLastChild();  c!=  null;  c  =  c)  {	  for(Node    c    =    n.getLastChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
215	[BUG]  [BUGGY]  for(Node  c,  n  =  first.getLastChild();  c!=  null;  c  =  c)  {  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  n  =  first.getLastChild();  c!=  null;  c  =  c)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  n  =  first.getLastChild();  c!=  null;  c  =  c)  {	  for(Node    c,    n    =    n.getLastChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
216	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()  ==  Token.NAME);  [CE]  class,  interface,  or  enum  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
217	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION,  before);  [CE]  class,  interface,  or  enum  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION,  before);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION,  before);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    beforeParent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.LABEL);  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.LABEL);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
219	[BUG]  [BUGGY]  For(Node  c  =  first.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  c  =  first.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  c  =  first.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
220	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext()  ||  c.getType()  ==  Token.FUNCTION)  {  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext()  ||  c.getType()  ==  Token.FUNCTION)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext()  ||  c.getType()  ==  Token.FUNCTION)  {	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
221	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.clonePosition())  {  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.clonePosition())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.clonePosition())  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.cloneTree())    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
222	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.peek())  {  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.peek())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.peek())  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.cloneTree())    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
223	[BUG]  [BUGGY]  Node  next  =  n.getPrevious();  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  next  =  n.getPrevious();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  next  =  n.getPrevious();	  Node    next    =    n.getParent();    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
224	[BUG]  [BUGGY]  Node  c  =  first.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  c  =  first.removeFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  c  =  first.removeFirstChild();	  Node    c    =    n.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
225	[BUG]  [BUGGY]  For(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c)  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  For(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	For(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c)  {	  for(Node    c,    c    =    n.getLastChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
226	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.EMPTY);  [CE]  class,  interface,  or  enum  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.EMPTY);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.EMPTY);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
227	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.NAME);  [CE]  class,  interface,  or  enum  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.NAME);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
228	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.LABEL);  [CE]  class,  interface,  or  enum  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.LABEL);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
229	[BUG]  [BUGGY]  Node  before  =  n.insertFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  before  =  n.insertFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  before  =  n.insertFirstChild();	  Node    before    =    n.removeFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
230	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.trim());  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.trim());  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.trim());	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.trim())    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
231	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  n.getFirstChild());  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  n.getFirstChild());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
232	[BUG]  [BUGGY]  for(Node  c  =  n,  before.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n,  before.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n,  before.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    before.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
233	[BUG]  [BUGGY]  Node  next  =  node.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  next  =  node.getFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  next  =  node.getFirstChild();	  Node    next    =    beforeParent.getFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
234	[BUG]  [BUGGY]  Preconditions.checkState(before.getType()  ==  Token.NAME  ||  before.getType()  ==  Token.LABEL);  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(before.getType()  ==  Token.NAME  ||  before.getType()  ==  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(before.getType()  ==  Token.NAME  ||  before.getType()  ==  Token.LABEL);	  Preconditions.checkState(before.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
235	[BUG]  [BUGGY]  Node  first  =  n.getfirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  first  =  n.getfirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  first  =  n.getfirstChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
236	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  first  =  n.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  first  =  n.getFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  first  =  n.getFirstChild();	  Node    first    =    before.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
237	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  first  =  n.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  first  =  n.getFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  first  =  n.getFirstChild();	  Node    first    =    before.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
238	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  first  =  before.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  first  =  before.getFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  first  =  before.getFirstChild();	  Node    first    =    before.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
239	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  first  =  before.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  first  =  before.getFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  first  =  before.getFirstChild();	  Node    first    =    before.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
240	[BUG]  [BUGGY]  Node  c  =  node.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  c  =  node.getFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  c  =  node.getFirstChild();	  Node    c    =    beforeParent.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
241	[BUG]  [BUGGY]  for(Node  c,  before  =  n.getFirstChild();  c!=  null;  c  =  c.in)  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  before  =  n.getFirstChild();  c!=  null;  c  =  c.in)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  before  =  n.getFirstChild();  c!=  null;  c  =  c.in)  {	  for(Node    c,    before    =    n.getFirstChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
242	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  c);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  c);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME,  c);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    c);    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
243	[BUG]  [BUGGY]  Node  next  =  node.getLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  next  =  node.getLastChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  next  =  node.getLastChild();	  Node    next    =    before.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
244	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  before.getFirstChild());  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  before.getFirstChild());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  before.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    c.getFirstChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
245	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION,  before);  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION,  before);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION,  before);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    before);    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
246	[BUG]  [BUGGY]  Node  before  =  firstChild.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  before  =  firstChild.getFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  before  =  firstChild.getFirstChild();	  Node    before    =    n.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
247	[BUG]  [BUGGY]  Node  before  =  n.getfirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  before  =  n.getfirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  before  =  n.getfirstChild();	  Node    before    =    n.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
248	[BUG]  [BUGGY]  Preconditions.checkState(before.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()  ==  Token.LABEL);  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(before.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()  ==  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(before.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()  ==  Token.LABEL);	  Preconditions.checkState(before.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
249	[BUG]  [BUGGY]  Node  next  =  firstChild.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  next  =  firstChild.getFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  next  =  firstChild.getFirstChild();	  Node    next    =    n.getfirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
250	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.newStatement());  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.newStatement());  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.newStatement());	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c);    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
251	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.removeFirstChild());  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.removeFirstChild());  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.removeFirstChild());	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c);    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
252	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION,  c);  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION,  c);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION,  c);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    c);    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
253	[BUG]  [BUGGY]  Node  before  =  n.getOwnerChild();  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Node  before  =  n.getOwnerChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Node  before  =  n.getOwnerChild();	  Node    before    =    n.getPreviousChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
254	[BUG]  [BUGGY]  for(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  n.getNext());  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  n.getNext());  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  n.getNext());	  for(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c);    	non-compiled	[CE]  reached  end  of  file  while  parsing	73	None	replace
255	[BUG]  [BUGGY]  for(Node  c,  before  =  n.getFirstChild();  c!=  null;  c  =  first.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c,  before  =  n.getFirstChild();  c!=  null;  c  =  first.getNext())  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c,  before  =  n.getFirstChild();  c!=  null;  c  =  first.getNext())  {	  for(Node    c,    before    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
256	[BUG]  [BUGGY]  Context.checkState(before.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()!=  Token.EMPTY);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(before.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()!=  Token.EMPTY);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(before.getType()  ==  Token.FUNCTION  ||  before.getFirstChild().getType()!=  Token.EMPTY);	  Context.checkState(before.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
257	[BUG]  [BUGGY]  for(Node  c  =  first.getFirstChild();  c!=  null;  c  =  c)  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  first.getFirstChild();  c!=  null;  c  =  c)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  first.getFirstChild();  c!=  null;  c  =  c)  {	  for(Node    c    =    n.getLastChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
258	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  before,  n.getFirstChild());  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  before,  n.getFirstChild());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  before,  n.getFirstChild());	  Context.checkState(n.getType()    ==    Token.FUNCTION,    before);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(before!=  null);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(before!=  null);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(before!=  null);	  Node    before    =    c.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
260	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree(),  before)  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree(),  before)  {  [BUGGY]      next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree(),  before)  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c,    before)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	54	None	replace
261	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	replace
262	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	replace
263	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  arguments,  before);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  arguments,  before);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  arguments,  before);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
264	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  arguments);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME,  arguments);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
265	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.LABEL);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      Node  n,  Node  before,  Node  beforeParent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.LABEL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  Node  insertBefore  =  (before  ==  null)  ?  c  :  before;  Node  insertBeforeParent  =  (before  ==  null)  ?  n  :  beforeParent;  switch  (c.getType())  {  case  Token.LABEL:  extractForInitializer(c,  insertBefore,  insertBeforeParent);  break;  case  Token.FOR:  if  (!NodeUtil.isForIn(c)  &&  c.getFirstChild().getType()  !=  Token.EMPTY)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  extractForInitializer  [RETURN_TYPE]  void  Node  n  Node  before  Node  beforeParent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	314	314	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.LABEL);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild().getType()    ==    Token.LABEL);    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
