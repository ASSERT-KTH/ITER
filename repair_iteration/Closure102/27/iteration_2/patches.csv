bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  >=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  >=  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	12	13	replace
2	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  >=  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  >=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  >=  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	12	13	replace
3	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  >>  Token.FUNCTION);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  >>  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  >>  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	12	None	replace
4	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	171	13	replace
5	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	171	13	replace
6	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  preconditions	171	None	replace
7	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	171	13	replace
8	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	171	13	replace
9	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	171	13	replace
10	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	171	13	replace
11	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	171	13	replace
12	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	171	13	replace
13	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  >=  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	66	13	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  >=  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	66	13	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >>  Token.VAR);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  >>  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  >>  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	66	None	replace
16	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Node    n    =    n.getLastChild();    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	110	None	replace
17	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Node    n    =    n.getLastChild();    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	110	None	replace
18	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()!=  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Node    n    =    n.getLastChild();    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	110	None	replace
19	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  arguments,  null);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  arguments,  null);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  arguments,  null);	  doStatementNormalization(t,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	189	None	replace
20	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  argumentCount,  null);  [CE]  cannot  find  symbol  argumentCount  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  argumentCount,  null);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  argumentCount,  null);	  doStatementNormalization(t,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	189	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  parent.length  >  0);  [CE]  cannot  find  symbol  length  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  parent.length  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  parent.length  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    ||    arguments.length    >    0);    	non-compiled	[CE]  cannot  find  symbol  length	100	None	replace
22	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getString().length()  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getString().length()  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    ||    arguments.length    >    0);    	compilable	  [FE]  RuntimeException  	100	13	replace
23	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getString().length()  >  0);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getString().length()  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getString().length()  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    ||    arguments.length    >    0);    	compilable	  [FE]  RuntimeException  	100	13	replace
24	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    ||    arguments.length    >    0);    	compilable	  [FE]  RuntimeException  	100	12	replace
25	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  0);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    ||    arguments.length    >    0);    	compilable	  [FE]  RuntimeException  	100	12	replace
26	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  arguments.length  >  0);  [CE]  cannot  find  symbol  arguments  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  arguments.length  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  arguments.length  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    ||    arguments.length    >    0);    	non-compiled	[CE]  cannot  find  symbol  arguments	100	None	replace
27	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.hasChildren());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.hasChildren());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    ||    arguments.length    >    0);    	compilable	  [FE]  RuntimeException  	100	12	replace
28	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.hasChildren());  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.hasChildren());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.hasChildren());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    ||    arguments.length    >    0);    	compilable	  [FE]  RuntimeException  	100	12	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(arguments!=  null  &&  arguments.length  >  0)  {  NodeTraversal.traverse(compiler,  n,  this);  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(arguments!=  null  &&  arguments.length  >  0)  {  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(arguments!=  null  &&  arguments.length  >  0)  {  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments!=    null    &&    arguments.length    >    0)    {    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  ';'  expected	120	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(arguments!=  null  ||  arguments.length  >  0)  {  NodeTraversal.traverse(compiler,  n,  this);  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(arguments!=  null  ||  arguments.length  >  0)  {  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(arguments!=  null  ||  arguments.length  >  0)  {  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments!=    null    &&    arguments.length    >    0)    {    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  ';'  expected	120	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(arguments!=  null  ||  arguments.length  >  0)  {  NodeTraversal.traverse(compiler,  n,  this);  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(arguments!=  null  ||  arguments.length  >  0)  {  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(arguments!=  null  ||  arguments.length  >  0)  {  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments!=    null    &&    arguments.length    >    0)    {    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  ';'  expected	120	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  constantMap);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false,  constantMap);	  NodeTraversal.traverse(compiler,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol  constantMap	24	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean,<null>)  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean,<null>)	24	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  true);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean,boolean)  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  true);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false,  true);	  NodeTraversal.traverse(compiler,    n,    parent,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean,boolean)	24	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,<null>)  [FE]                    RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,<null>)	24	None	replace
36	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	248	13	replace
37	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	248	13	replace
38	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	248	13	replace
39	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	248	13	replace
40	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()!=  Token.VAR);	  Preconditions.checkState(n.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	84	13	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()!=  Token.VAR);	  Preconditions.checkState(n.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	84	13	replace
42	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	208	13	add
43	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	208	13	add
44	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	208	None	add
45	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	208	13	add
46	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	208	13	add
47	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	208	13	add
48	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	208	13	add
49	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	208	13	add
50	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	208	13	add
51	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	208	13	add
52	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	208	13	add
53	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	98	12	add
54	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	98	12	add
55	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	98	13	add
56	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	98	13	add
57	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.NAME);    Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	98	None	add
58	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  preconditions.checkArgument(n.getType()!=  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  preconditions.checkArgument(n.getType()!=  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	98	None	add
59	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  >=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	98	12	add
60	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  >=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	98	12	add
61	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	98	12	add
62	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);Preconditions.checkArgument(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	98	12	add
63	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  n.getType()  ==  Token.NAME;  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  n.getType()  ==  Token.NAME;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  n.getType()  ==  Token.NAME;	          NodeUtil.isFunctionDeclaration(n)||    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  not  a  statement	205	None	replace
64	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.NAME;  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.NAME;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.NAME;	          NodeUtil.isFunctionDeclaration(n)||    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  not  a  statement	205	None	replace
65	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.NAME;  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.NAME;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.NAME;	          NodeUtil.isFunctionDeclaration(n)||    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  not  a  statement	205	None	replace
66	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(parent)||  n.getType()  ==  Token.NAME;  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(parent)||  n.getType()  ==  Token.NAME;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(parent)||  n.getType()  ==  Token.NAME;	          NodeUtil.isFunctionDeclaration(n)||    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  not  a  statement	205	None	replace
67	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	106	13	add
68	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	106	13	add
69	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	106	13	add
70	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	106	13	add
71	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	106	13	add
72	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	106	13	add
73	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.SYNTHETIC);  [CE]  cannot  find  symbol  SYNTHETIC  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.SYNTHETIC);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.SYNTHETIC);	  	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	106	None	add
74	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	106	13	add
75	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	106	13	add
76	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	106	13	add
77	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	106	13	add
78	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()!=  Token.VAR);	  Preconditions.checkArgument(n.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	29	13	replace
79	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()!=  Token.VAR);	  Preconditions.checkArgument(n.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	29	13	replace
80	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));	  	compilable	  [FE]  RuntimeException  	163	13	add
81	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));	  	compilable	  [FE]  RuntimeException  	163	13	add
82	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	163	None	add
83	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));	  	compilable	  [FE]  RuntimeException  	163	13	add
84	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));	  	compilable	  [FE]  RuntimeException  	163	13	add
85	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent));	  	compilable	  [FE]  RuntimeException  	163	13	add
86	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent));  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent));	  	compilable	  [FE]  RuntimeException  	163	13	add
87	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isStatementDeclaration(n));  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isStatementDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isStatementDeclaration(n));	  	non-compiled	[CE]  cannot  find  symbol	163	None	add
88	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isVarDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isVarDeclaration(n));	  	compilable	  [FE]  RuntimeException  	163	13	add
89	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isVarDeclaration(n));  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isVarDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isVarDeclaration(n));	  	compilable	  [FE]  RuntimeException  	163	13	add
90	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	247	13	add
91	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	247	13	add
92	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	247	13	add
93	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	247	13	add
94	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	247	13	add
95	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	247	13	add
96	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.AR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  AR  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.AR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.AR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  AR	247	None	add
97	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	247	13	add
98	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	247	13	add
99	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	247	13	add
100	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	247	13	add
101	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	142	13	replace
102	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	142	13	replace
103	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  preconditions	142	None	replace
104	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	142	13	replace
105	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	142	13	replace
106	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	142	13	replace
107	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	142	13	replace
108	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	142	13	replace
109	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	142	13	replace
110	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n!=  null);	  Preconditions.checkState(parent!=    null);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	18	1	replace
111	[BUG]  [BUGGY]  Preconditions.checkArgument(n!=  null);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n!=  null);	  Preconditions.checkState(parent!=    null);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	18	1	replace
112	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	143	13	replace
113	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	143	13	replace
114	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  preconditions	143	None	replace
115	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	143	13	replace
116	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	143	13	replace
117	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	143	13	replace
118	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	143	13	replace
119	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  preconditions	143	None	replace
120	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.GETPROP);	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    Preconditions.checkState(parent.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	35	13	replace
121	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    Preconditions.checkState(parent.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	35	13	replace
122	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    Preconditions.checkState(parent.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	35	None	replace
123	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()  ==  Token.GETPROP);	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    Preconditions.checkState(parent.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	35	13	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.GETPROP);	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    Preconditions.checkState(parent.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	35	13	replace
125	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()!=  Token.GETPROP);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                      RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()!=  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()!=  Token.GETPROP);	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    Preconditions.checkState(parent.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	35	None	replace
126	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    Preconditions.checkState(parent.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	35	13	replace
127	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]                        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    Preconditions.checkState(parent.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	35	13	replace
128	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  constantMap);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  constantMap);	  doStatementNormalizations(t,    n,    parent,    argumentMap);    	non-compiled	[CE]  cannot  find  symbol  constantMap	193	None	replace
129	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  this.constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  this.constantMap);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  this.constantMap);	  doStatementNormalizations(t,    n,    parent,    argumentMap);    	non-compiled	[CE]  cannot  find  symbol  constantMap	193	None	replace
130	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentSet);  [CE]  cannot  find  symbol  argumentSet  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentSet);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  argumentSet);	  doStatementNormalizations(t,    n,    parent,    argumentMap);    	non-compiled	[CE]  cannot  find  symbol  argumentSet	193	None	replace
131	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)||  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n)||  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.mayHaveSideEffects(n)||  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  NodeUtil.mayHaveSideEffects(n)||    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	158	None	replace
132	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)||  junit.framework.AssertionFailedError:  Expected:  function  expression()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n)||  junit.framework.AssertionFailedError:  Expected:  function  expression()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.mayHaveSideEffects(n)||  junit.framework.AssertionFailedError:  Expected:  function  expression()  {  arguments=Array.prototype.slice.call(arguments	  NodeUtil.mayHaveSideEffects(n)||    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	158	None	replace
133	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  n);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent!=  n);	  Preconditions.checkState(n!=    parent);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	168	1	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  n);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  n);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent!=  n);	  Preconditions.checkState(n!=    parent);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	168	1	replace
135	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n  ==  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n  ==  parent);	  Preconditions.checkState(n!=    parent);    	compilable	  [FE]  RuntimeException  	168	13	replace
136	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  parent);  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n  ==  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n  ==  parent);	  Preconditions.checkState(n!=    parent);    	compilable	  [FE]  RuntimeException  	168	13	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(n!=  parent,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent,  arguments);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=  parent,  arguments);	  Preconditions.checkState(n!=    parent);    	non-compiled	[CE]  cannot  find  symbol  arguments	168	None	replace
138	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  n);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n!=  n);	  Preconditions.checkState(n!=    parent);    	compilable	  [FE]  RuntimeException  	168	13	replace
139	[BUG]  [BUGGY]  Preconditions.checkState(n!=  n);  [FE]  RuntimeException  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  n);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=  n);	  Preconditions.checkState(n!=    parent);    	compilable	  [FE]  RuntimeException  	168	13	replace
140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.constantMap);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this.constantMap);	  NodeTraversal.traverse(compiler,    n,    parent,    argumentMap);    	non-compiled	[CE]  cannot  find  symbol  constantMap	132	None	replace
141	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  constantMap);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  constantMap);	  NodeTraversal.traverse(compiler,    n,    parent,    argumentMap);    	non-compiled	[CE]  cannot  find  symbol  constantMap	132	None	replace
142	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent!=    null);    Preconditions.checkState(parent!=  null);	  	compilable	  [FE]  RuntimeException  	17	13	add
143	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Preconditions.checkState(parent!=  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent!=    null);    Preconditions.checkState(parent!=  null);	  	compilable	  [FE]  RuntimeException  	17	13	add
144	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getParent();  Preconditions.checkState(parent!=  null);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getParent();  Preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent!=    null);    Node  parent  =  n.getParent();  Preconditions.checkState(parent!=  null);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	17	None	add
145	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Preconditions.checkState(parent  ==  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent!=    null);    Preconditions.checkState(parent  ==  null);	  	compilable	  [FE]  RuntimeException  	17	13	add
146	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Preconditions.checkState(parent  ==  null);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Preconditions.checkState(parent  ==  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent!=    null);    Preconditions.checkState(parent  ==  null);	  	compilable	  [FE]  RuntimeException  	17	13	add
147	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Preconditions.checkState(parent!=  null);  preconditions.checkState(parent!=  null);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Preconditions.checkState(parent!=  null);  preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent!=    null);    Preconditions.checkState(parent!=  null);  preconditions.checkState(parent!=  null);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	17	None	add
148	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getParent();  Preconditions.checkState(parent  ==  null);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getParent();  Preconditions.checkState(parent  ==  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent!=    null);    Node  parent  =  n.getParent();  Preconditions.checkState(parent  ==  null);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	17	None	add
149	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	61	13	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	61	13	replace
151	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	61	13	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	61	13	replace
153	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	61	13	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	61	13	replace
155	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	61	13	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	61	13	replace
157	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent);  Preconditions.checkState(n!=  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n!=    parent);    Preconditions.checkState(n!=  parent);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	167	1	add
158	[BUG]  [BUGGY]  Preconditions.checkState(n!=  parent);  Preconditions.checkState(n!=  parent);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent);  Preconditions.checkState(n!=  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    parent);    Preconditions.checkState(n!=  parent);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	167	1	add
159	[BUG]  [BUGGY]  Preconditions.checkState(n!=  parent);  Node  parent  =  n.getParent();  Preconditions.checkState(n!=  parent);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent);  Node  parent  =  n.getParent();  Preconditions.checkState(n!=  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    parent);    Node  parent  =  n.getParent();  Preconditions.checkState(n!=  parent);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	167	None	add
160	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent);  Preconditions.checkState(n  ==  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n!=    parent);    Preconditions.checkState(n  ==  parent);	  	compilable	  [FE]  RuntimeException  	167	13	add
161	[BUG]  [BUGGY]  Preconditions.checkState(n!=  parent);  Preconditions.checkState(n  ==  parent);  [FE]  RuntimeException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent);  Preconditions.checkState(n  ==  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    parent);    Preconditions.checkState(n  ==  parent);	  	compilable	  [FE]  RuntimeException  	167	13	add
162	[BUG]  [BUGGY]  Preconditions.checkState(n!=  parent);  Node  parent  =  n.getParent();  Preconditions.checkState(parent!=  null);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent);  Node  parent  =  n.getParent();  Preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    parent);    Node  parent  =  n.getParent();  Preconditions.checkState(parent!=  null);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	167	None	add
163	[BUG]  [BUGGY]  Preconditions.checkState(n!=  parent);  Node  parent  =  n.getParent();  Preconditions.checkState(n  ==  parent);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent);  Node  parent  =  n.getParent();  Preconditions.checkState(n  ==  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    parent);    Node  parent  =  n.getParent();  Preconditions.checkState(n  ==  parent);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	167	None	add
164	[BUG]  [BUGGY]  Preconditions.checkState(n!=  parent);  Preconditions.checkState(n  >=  parent);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent);  Preconditions.checkState(n  >=  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    parent);    Preconditions.checkState(n  >=  parent);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	167	None	add
165	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild().getParent()  +  1;  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getFirstChild().getParent()  +  1;  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getFirstChild().getParent()  +  1;	  Node    parent    =    n.getParent()    +    1;    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	57	None	replace
166	[BUG]  [BUGGY]  Node  parent  =  n.getLastChild().getParent();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getLastChild().getParent();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getLastChild().getParent();	  Node    parent    =    n.getParent()    +    1;    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	57	None	replace
167	[BUG]  [BUGGY]  doStatementDeclarations(t,  n,  parent,  this);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementDeclarations(t,  n,  parent,  this);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementDeclarations(t,  n,  parent,  this);	  doStatementDeclarations(t,    n,    parent,    argumentCount);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
168	[BUG]  [BUGGY]  doStatementDeclarations(t,  n,  parent,  condition);  [CE]  cannot  find  symbol  condition  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementDeclarations(t,  n,  parent,  condition);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementDeclarations(t,  n,  parent,  condition);	  doStatementDeclarations(t,    n,    parent,    argumentCount);    	non-compiled	[CE]  cannot  find  symbol  condition	124	None	replace
169	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  >=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  >=  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	80	13	replace
170	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  >=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  >=  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	80	13	replace
171	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  >>  Token.VAR);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  >>  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  >>  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	80	None	replace
172	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	244	13	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	244	13	replace
174	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	244	13	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	244	13	replace
176	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	244	13	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	244	13	replace
178	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	244	13	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	244	13	replace
180	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	235	13	replace
181	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	235	13	replace
182	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	235	13	replace
183	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	235	13	replace
184	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	235	13	replace
185	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	235	13	replace
186	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	235	12	replace
187	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	235	12	replace
188	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Node    parent    =    n.getFirstChild();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	64	None	replace
189	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  parent  =  n.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  parent  =  n.getFirstChild();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  parent  =  n.getFirstChild();	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Node    parent    =    n.getFirstChild();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	64	None	replace
190	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	107	13	replace
191	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	107	13	replace
192	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	60	13	add
193	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	60	13	add
194	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	60	13	add
195	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	60	13	add
196	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	60	13	add
197	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	60	13	add
198	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	60	13	add
199	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	60	13	add
200	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	60	13	add
201	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	60	13	add
202	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	60	13	add
203	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	60	13	add
204	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	223	13	replace
205	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	223	13	replace
206	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	45	13	add
207	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	45	13	add
208	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	45	None	add
209	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	45	None	add
210	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	45	None	add
211	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	45	None	add
212	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	45	13	add
213	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	45	13	add
214	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    parent    =    n.getFirstChild();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	42	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getFirstChild();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getFirstChild();	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    parent    =    n.getFirstChild();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	42	None	replace
216	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  >=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  >=  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	112	6	replace
217	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  >=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  >=  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	112	6	replace
218	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  >>  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  >>  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	112	None	replace
219	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  true,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  true,  arguments);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  true,  arguments);	  doStatementNormalizations(t,    n,    parent,    false,    forbidChanges);    	non-compiled	[CE]  cannot  find  symbol  arguments	160	None	replace
220	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  false,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  false,  argumentCount);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  false,  argumentCount);	  doStatementNormalizations(t,    n,    parent,    false,    forbidChanges);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	160	None	replace
221	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  true,  argument);  [CE]  cannot  find  symbol  argument  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  true,  argument);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  true,  argument);	  doStatementNormalizations(t,    n,    parent,    false,    forbidChanges);    	non-compiled	[CE]  cannot  find  symbol  argument	160	None	replace
222	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	165	13	add
223	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	165	13	add
224	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	165	None	add
225	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	165	None	add
226	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	165	13	add
227	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	165	13	add
228	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	165	13	add
229	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	165	13	add
230	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	165	13	add
231	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	165	13	add
232	[BUG]  [BUGGY]  Node  parent  =  t.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  t.getLastChild();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  t.getLastChild();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	55	None	replace
233	[BUG]  [BUGGY]  Node  parent  =  n.getLastChild().getNext();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getLastChild().getNext();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getLastChild().getNext();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	55	None	replace
234	[BUG]  [BUGGY]  doStatement(t,  n,  parent,  true);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatement(t,  n,  parent,  true);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  parent,  true);	  doStatement(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
235	[BUG]  [BUGGY]  doStatement(t,  n,  parent,  false,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatement(t,  n,  parent,  false,  arguments);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  parent,  false,  arguments);	  doStatement(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	145	None	replace
236	[BUG]  [BUGGY]  DoStatement(t,  n,  parent,  true);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  DoStatement(t,  n,  parent,  true);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	DoStatement(t,  n,  parent,  true);	  doStatement(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
237	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.equals(n.getString()));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.equals(n.getString()));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.equals(n.getString()));    	compilable	  [FE]  RuntimeException  	50	13	replace
238	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.equals(n.getString()));  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.equals(n.getString()));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.equals(n.getString()));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.equals(n.getString()));    	compilable	  [FE]  RuntimeException  	50	13	replace
239	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  arguments.equals(n.getString()));  [CE]  cannot  find  symbol  arguments  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  arguments.equals(n.getString()));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  arguments.equals(n.getString()));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.equals(n.getString()));    	non-compiled	[CE]  cannot  find  symbol  arguments	50	None	replace
240	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.equals(n.getString()));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.equals(n.getString()));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.equals(n.getString()));    	compilable	  [FE]  RuntimeException  	50	13	replace
241	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.equals(n.getString()));  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.equals(n.getString()));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.equals(n.getString()));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.equals(n.getString()));    	compilable	  [FE]  RuntimeException  	50	13	replace
242	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getString().equals( "function "));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getString().equals( "function "));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.equals(n.getString()));    	compilable	  [FE]  RuntimeException  	50	13	replace
243	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getString().equals( "function "));  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getString().equals( "function "));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getString().equals( "function "));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.equals(n.getString()));    	compilable	  [FE]  RuntimeException  	50	13	replace
244	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  arguments,  true);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  arguments,  true);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  arguments,  true);	  doStatementNormalizations(t,    n,    parent,    arguments,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	89	None	replace
245	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentCount,  false);  [CE]  cannot  find  symbol  argumentCount  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentCount,  false);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  argumentCount,  false);	  doStatementNormalizations(t,    n,    parent,    arguments,    false);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	89	None	replace
246	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentNames,  false);  [CE]  cannot  find  symbol  argumentNames  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentNames,  false);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  argumentNames,  false);	  doStatementNormalizations(t,    n,    parent,    arguments,    false);    	non-compiled	[CE]  cannot  find  symbol  argumentNames	89	None	replace
247	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentations,  false);  [CE]  cannot  find  symbol  argumentations  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentations,  false);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  argumentations,  false);	  doStatementNormalizations(t,    n,    parent,    arguments,    false);    	non-compiled	[CE]  cannot  find  symbol  argumentations	89	None	replace
248	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	13	add
249	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	13	add
250	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	13	add
251	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	13	add
252	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Node  parent  =  n.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	182	None	add
253	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	182	None	add
254	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	182	13	add
255	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	182	13	add
256	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	13	add
257	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	13	add
258	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	75	13	replace
259	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	75	13	replace
260	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	75	13	replace
261	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	75	13	replace
262	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	75	13	replace
263	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	75	13	replace
264	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    n,    parent,    FORGIVE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)	170	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  CONVERT_WHILE_TO_FOR);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  CONVERT_WHILE_TO_FOR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  CONVERT_WHILE_TO_FOR);	  NodeTraversal.traverse(compiler,    n,    parent,    FORGIVE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)	170	None	replace
266	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  FORGIVE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  FORGIVE_LOCAL_NAMES_UNIQUE  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  FORGIVE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  FORGIVE_LOCAL_NAMES_UNIQUE,  arguments);	  NodeTraversal.traverse(compiler,    n,    parent,    FORGIVE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  FORGIVE_LOCAL_NAMES_UNIQUE	170	None	replace
267	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this,  parent);	  NodeTraversal.traverse(compiler,    n,    this,    argument);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)	23	None	replace
268	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  constantMap);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this,  constantMap);	  NodeTraversal.traverse(compiler,    n,    this,    argument);    	non-compiled	[CE]  cannot  find  symbol  constantMap	23	None	replace
269	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,<null>,Node)  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  null,  parent);	  NodeTraversal.traverse(compiler,    n,    this,    argument);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,<null>,Node)	23	None	replace
270	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  node);  [CE]  cannot  find  symbol  node  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  node);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this,  node);	  NodeTraversal.traverse(compiler,    n,    this,    argument);    	non-compiled	[CE]  cannot  find  symbol  node	23	None	replace
271	[BUG]  [BUGGY]  doStatementReturn(t,  n,  parent,  name);  [CE]  cannot  find  symbol  name  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementReturn(t,  n,  parent,  name);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(t,  n,  parent,  name);	  doStatementReturn(t,    n,    parent,    argument);    	non-compiled	[CE]  cannot  find  symbol  name	102	None	replace
272	[BUG]  [BUGGY]  doStatementReturn(t,  n,  parent,  this);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementReturn(t,  n,  parent,  this);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(t,  n,  parent,  this);	  doStatementReturn(t,    n,    parent,    argument);    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
273	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	161	1	add
274	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	161	1	add
275	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	161	None	add
276	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isConstructorDeclaration(n));  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isConstructorDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isConstructorDeclaration(n));	  	non-compiled	[CE]  cannot  find  symbol	161	None	add
277	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isStatementDeclaration(n));  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isStatementDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isStatementDeclaration(n));	  	non-compiled	[CE]  cannot  find  symbol	161	None	add
278	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(n));	  	compilable	  [FE]  RuntimeException  	161	10	add
279	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(n));  [FE]  RuntimeException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(n));	  	compilable	  [FE]  RuntimeException  	161	10	add
280	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Context.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	218	13	replace
281	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Context.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	218	13	replace
282	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Context.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  Context  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Context.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Context.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Context.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  Context	218	None	replace
283	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Context.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	218	13	replace
284	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Context.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	218	13	replace
285	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  arguments,  null,  false);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  arguments,  null,  false);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  arguments,  null,  false);	  doStatementNormalizations(t,    n,    parent,    null,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	90	None	replace
286	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentMap,  null,  false);  [CE]  cannot  find  symbol  argumentMap  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentMap,  null,  false);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  argumentMap,  null,  false);	  doStatementNormalizations(t,    n,    parent,    null,    false);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	90	None	replace
287	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  null,  true);  [CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  null,  true);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  null,  true);	  doStatementNormalizations(t,    n,    parent,    null,    false);    	non-compiled	[CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;	90	None	replace
288	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent,  constantMap);  [CE]  cannot  find  symbol  Context  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent,  constantMap);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent,  constantMap);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  Context	150	None	replace
289	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent,  this);  [CE]  cannot  find  symbol  Context  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent,  this);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  Context	150	None	replace
290	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent,  false);  [CE]  cannot  find  symbol  Context  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent,  false);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent,  false);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  Context	150	None	replace
291	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent,  context);  [CE]  cannot  find  symbol  Context  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent,  context);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent,  context);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  Context	150	None	replace
292	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  preconditions	40	None	replace
293	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	40	13	replace
294	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	40	13	replace
295	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  preconditions	40	None	replace
296	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	40	13	replace
297	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	40	13	replace
298	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	46	9	replace
299	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	46	9	replace
300	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	46	13	replace
301	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	46	13	replace
302	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	46	13	replace
303	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	46	13	replace
304	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	113	13	add
305	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	113	13	add
306	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	113	13	add
307	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	113	13	add
308	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	113	13	add
309	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	113	13	add
310	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	113	13	add
311	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	113	13	add
312	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  >=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	113	13	add
313	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  >=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	113	13	add
314	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  >>  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	113	None	add
315	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.call(  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.call(	          FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	105	None	replace
316	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.call(  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.call(	          FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  ';'  expected	105	None	replace
317	[BUG]  [BUGGY]  FunctionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(	          FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	105	None	replace
318	[BUG]  [BUGGY]  FunctionFailedError:  expected()  {  arguments=Array.prototype.slice.call(  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  expected()  {  arguments=Array.prototype.slice.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  expected()  {  arguments=Array.prototype.slice.call(	          FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  ';'  expected	105	None	replace
319	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	28	5	add
320	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	28	5	add
321	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.VAR);    Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	28	None	add
322	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  preconditions.checkArgument(n.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  preconditions.checkArgument(n.getType()!=  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	28	None	add
323	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  >=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	28	13	add
324	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  >=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	28	13	add
325	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.VAR);    Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	28	None	add
326	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());	  	compilable	  [FE]  RuntimeException  	173	13	add
327	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());	  	compilable	  [FE]  RuntimeException  	173	13	add
328	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()!=  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkArgument(n.getType()!=  Token.NAME,  t.getModule());	  	compilable	  [FE]  RuntimeException  	173	13	add
329	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()!=  Token.NAME,  t.getModule());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()!=  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkArgument(n.getType()!=  Token.NAME,  t.getModule());	  	compilable	  [FE]  RuntimeException  	173	13	add
330	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());	  	compilable	  [FE]  RuntimeException  	173	13	add
331	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());	  	compilable	  [FE]  RuntimeException  	173	13	add
332	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkArgument(n.getType()  ==  Token.VAR,  t.getModule());	  	compilable	  [FE]  RuntimeException  	173	13	add
333	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  t.getModule());  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkArgument(n.getType()  ==  Token.VAR,  t.getModule());	  	compilable	  [FE]  RuntimeException  	173	13	add
334	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.SYNTHETIC,  t.getModule());  [CE]  cannot  find  symbol  SYNTHETIC  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.SYNTHETIC,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkArgument(n.getType()  ==  Token.SYNTHETIC,  t.getModule());	  	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	173	None	add
335	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.EMPTY,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkArgument(n.getType()  ==  Token.EMPTY,  t.getModule());	  	compilable	  [FE]  RuntimeException  	173	13	add
336	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.EMPTY,  t.getModule());  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.EMPTY,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkArgument(n.getType()  ==  Token.EMPTY,  t.getModule());	  	compilable	  [FE]  RuntimeException  	173	13	add
337	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.mayHaveSideEffects(n)&&  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  NodeUtil.mayHaveSideEffects(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	157	None	replace
338	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.mayHaveSideEffects(n)&&  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  NodeUtil.mayHaveSideEffects(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	157	None	replace
339	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  function.expectedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  function.expectedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.mayHaveSideEffects(n)&&  function.expectedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  NodeUtil.mayHaveSideEffects(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	157	None	replace
340	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  arguments.expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  arguments.expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.mayHaveSideEffects(n)&&  arguments.expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  NodeUtil.mayHaveSideEffects(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	157	None	replace
341	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  Context  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.checkState(n.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  Context	254	None	replace
342	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(n.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	254	None	replace
343	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this,  parent);  Context.checkState(n.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)	254	None	replace
344	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(parent.getType()  ==  Token.VAR);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]                    RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(parent.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	254	None	replace
345	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	252	13	add
346	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	252	13	add
347	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	252	13	add
348	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	252	13	add
349	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	252	13	add
350	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	252	13	add
351	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	252	13	add
352	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	252	13	add
353	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	252	13	add
354	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	252	13	add
355	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	252	13	add
356	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	252	13	add
357	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	225	None	replace
358	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkNotNull(n);  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	225	13	replace
359	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkNotNull(n);  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	225	13	replace
360	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	  FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	51	None	replace
361	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	  FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	51	None	replace
362	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.call(arguments!=  not  a  statement  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.call(arguments!=  not  a  statement	  FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	51	None	replace
363	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	  FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	51	None	replace
364	[BUG]  [BUGGY]  doStatement(t,  n,  parent,  this);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatement(t,  n,  parent,  this);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  parent,  this);	  doStatement(t,    n,    parent,    argument);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
365	[BUG]  [BUGGY]  doStatement(t,  n,  parent,  DEFAULT_NAMES_UNIQUE);  [CE]  cannot  find  symbol  DEFAULT_NAMES_UNIQUE  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatement(t,  n,  parent,  DEFAULT_NAMES_UNIQUE);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  parent,  DEFAULT_NAMES_UNIQUE);	  doStatement(t,    n,    parent,    argument);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NAMES_UNIQUE	25	None	replace
366	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  n.getType()  ==  Token.VAR;  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  n.getType()  ==  Token.VAR;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  n.getType()  ==  Token.VAR;	          NodeUtil.isFunctionDeclaration(n)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  not  a  statement	203	None	replace
367	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.VAR;  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.VAR;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.VAR;	          NodeUtil.isFunctionDeclaration(n)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  not  a  statement	203	None	replace
368	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.VAR;  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.VAR;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.VAR;	          NodeUtil.isFunctionDeclaration(n)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  not  a  statement	203	None	replace
369	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(parent)||  n.getType()  ==  Token.VAR;  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(parent)||  n.getType()  ==  Token.VAR;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(parent)||  n.getType()  ==  Token.VAR;	          NodeUtil.isFunctionDeclaration(n)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  not  a  statement	203	None	replace
370	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	236	13	add
371	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	236	13	add
372	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	236	None	add
373	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	236	None	add
374	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	236	13	add
375	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	236	13	add
376	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	236	13	add
377	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	236	13	add
378	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	236	13	add
379	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	236	13	add
380	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkNotNull(parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	224	13	add
381	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkNotNull(parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	224	13	add
382	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkNotNull(parent);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	224	13	add
383	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkNotNull(parent);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	224	13	add
384	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	224	None	add
385	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	224	None	add
386	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	224	13	add
387	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	224	13	add
388	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	226	13	add
389	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	226	13	add
390	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkNotNull(n);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Preconditions.checkNotNull(n);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	226	13	add
391	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkNotNull(n);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkNotNull(n);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Preconditions.checkNotNull(n);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	226	13	add
392	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	226	13	add
393	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	226	13	add
394	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(parent.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(parent.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	226	13	add
395	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(parent.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(parent.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(parent.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	226	13	add
396	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	226	None	add
397	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	226	13	add
398	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	226	13	add
399	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	74	13	add
400	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	74	13	add
401	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	74	13	add
402	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	74	13	add
403	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Node  n  =  parent.getParent();  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Node  n  =  parent.getParent();  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Node  n  =  parent.getParent();  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	74	None	add
404	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	74	13	add
405	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	74	13	add
406	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.AR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  AR  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.AR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.AR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  AR	74	None	add
407	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	74	13	add
408	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	74	13	add
409	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()!=  Token.NAME);	  Preconditions.checkArgument(n.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	99	13	replace
410	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()!=  Token.NAME);	  Preconditions.checkArgument(n.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	99	13	replace
411	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.arguments);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this.arguments);	  NodeTraversal.traverse(compiler,    n,    parent,    argumentCount);    	non-compiled	[CE]  cannot  find  symbol  arguments	133	None	replace
412	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	183	13	replace
413	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	183	13	replace
414	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	183	None	replace
415	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.length  >  0);  [CE]  cannot  find  symbol  length  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.length  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.length  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.length    >    0);    	non-compiled	[CE]  cannot  find  symbol  length	49	None	replace
416	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().length  >  0);  [CE]  cannot  find  symbol  length  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().length  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().length  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.length    >    0);    	non-compiled	[CE]  cannot  find  symbol  length	49	None	replace
417	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.length    >    0);    	compilable	  [FE]  RuntimeException  	49	13	replace
418	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  >  0);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.length    >    0);    	compilable	  [FE]  RuntimeException  	49	13	replace
419	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.length    >    0);    	compilable	  [FE]  RuntimeException  	49	13	replace
420	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.length    >    0);    	compilable	  [FE]  RuntimeException  	49	13	replace
421	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n  ==  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n  ==  null);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments    ==    null);    NodeTraversal.traverse(compiler,    n,    this);    	compilable	  [FE]  RuntimeException  	118	13	replace
422	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null);  NodeTraversal.traverse(compiler,  n,  this);  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n  ==  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n  ==  null);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments    ==    null);    NodeTraversal.traverse(compiler,    n,    this);    	compilable	  [FE]  RuntimeException  	118	13	replace
423	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(arguments  ==  null);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(arguments  ==  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(arguments  ==  null);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments    ==    null);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	118	None	replace
424	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FOR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FOR);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(n.getType()    ==    Token.FOR);    	compilable	  [FE]  RuntimeException  	172	13	replace
425	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FOR);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FOR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FOR);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(n.getType()    ==    Token.FOR);    	compilable	  [FE]  RuntimeException  	172	13	replace
426	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.FOR);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.FOR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.FOR);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(n.getType()    ==    Token.FOR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	172	None	replace
427	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FOR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FOR);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(n.getType()    ==    Token.FOR);    	compilable	  [FE]  RuntimeException  	172	13	replace
428	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FOR);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FOR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FOR);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(n.getType()    ==    Token.FOR);    	compilable	  [FE]  RuntimeException  	172	13	replace
429	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FOR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FOR);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(n.getType()    ==    Token.FOR);    	compilable	  [FE]  RuntimeException  	172	13	replace
430	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FOR);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FOR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FOR);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(n.getType()    ==    Token.FOR);    	compilable	  [FE]  RuntimeException  	172	13	replace
431	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkNotNull(n);  Preconditions.checkState(parent!=  null);	          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=    null);    	compilable	  [FE]  RuntimeException  	180	13	replace
432	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkState(parent!=  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkNotNull(n);  Preconditions.checkState(parent!=  null);	          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=    null);    	compilable	  [FE]  RuntimeException  	180	13	replace
433	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	184	None	replace
434	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Node  parent  =  n.getParent();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkNotNull(n);  Node  parent  =  n.getParent();	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	184	None	replace
435	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getParent();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getParent();	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	184	None	replace
436	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                    RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  parent  =  n.getParent();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  parent  =  n.getParent();	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	184	None	replace
437	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Node    n    =    n.getFirstChild();    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	76	None	replace
438	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Node  n  =  n.getFirstChild();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Node  n  =  n.getFirstChild();	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Node    n    =    n.getFirstChild();    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	76	None	replace
439	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	85	13	add
440	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	85	13	add
441	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	85	None	add
442	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	85	None	add
443	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	85	13	add
444	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	85	13	add
445	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	85	13	add
446	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	85	13	add
447	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	85	13	add
448	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	85	13	add
449	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.call(function  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.call(function  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.call(function	  FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  not  a  statement	54	None	replace
450	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(function  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(function  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(function	  FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  ';'  expected	54	None	replace
451	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(n  ==  not  a  statement  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(n  ==  not  a  statement  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(n  ==  not  a  statement	  FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  not  a  statement	54	None	replace
452	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.call(n  ==  not  a  statement  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.call(n  ==  not  a  statement  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.call(n  ==  not  a  statement	  FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  not  a  statement	54	None	replace
453	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	230	13	add
454	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	230	13	add
455	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	230	None	add
456	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	230	None	add
457	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	230	13	add
458	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	230	13	add
459	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	230	13	add
460	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	230	13	add
461	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	230	13	add
462	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	230	13	add
463	[BUG]  [BUGGY]  DoStatementDeclarations(t,  n,  parent,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  DoStatementDeclarations(t,  n,  parent,  argumentCount);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	DoStatementDeclarations(t,  n,  parent,  argumentCount);	  DoStatementDeclarations(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	125	None	replace
464	[BUG]  [BUGGY]  DoStatementDeclarations(t,  n,  parent,  assertOnChange);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  DoStatementDeclarations(t,  n,  parent,  assertOnChange);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	DoStatementDeclarations(t,  n,  parent,  assertOnChange);	  DoStatementDeclarations(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
465	[BUG]  [BUGGY]  DoStatementDeclarations(t,  n,  parent,  argument);  [CE]  cannot  find  symbol  argument  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  DoStatementDeclarations(t,  n,  parent,  argument);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	DoStatementDeclarations(t,  n,  parent,  argument);	  DoStatementDeclarations(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argument	125	None	replace
466	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	220	None	replace
467	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	220	13	replace
468	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	220	13	replace
469	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	220	13	replace
470	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	220	13	replace
471	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	77	None	replace
472	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	77	13	replace
473	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	77	13	replace
474	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	77	None	replace
475	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());	  	compilable	  [FE]  RuntimeException  	140	13	add
476	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());	  	compilable	  [FE]  RuntimeException  	140	13	add
477	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(n.getType()!=  Token.NAME,  t.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    Preconditions.checkState(n.getType()!=  Token.NAME,  t.getSourceName());	  	compilable	  [FE]  RuntimeException  	140	13	add
478	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(n.getType()!=  Token.NAME,  t.getSourceName());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(n.getType()!=  Token.NAME,  t.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    Preconditions.checkState(n.getType()!=  Token.NAME,  t.getSourceName());	  	compilable	  [FE]  RuntimeException  	140	13	add
479	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(t.getType()  ==  Token.NAME,  t.getSourceName());  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(t.getType()  ==  Token.NAME,  t.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    Preconditions.checkState(t.getType()  ==  Token.NAME,  t.getSourceName());	  	non-compiled	[CE]  cannot  find  symbol	140	None	add
480	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getSourceName());	  	compilable	  [FE]  RuntimeException  	140	13	add
481	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getSourceName());  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getSourceName());	  	compilable	  [FE]  RuntimeException  	140	13	add
482	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Context.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  [CE]  cannot  find  symbol  Context  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Context.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    Context.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());	  	non-compiled	[CE]  cannot  find  symbol  Context	140	None	add
483	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  n.getType()  ==  Token.FUNCTION;  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  n.getType()  ==  Token.FUNCTION;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  n.getType()  ==  Token.FUNCTION;	          NodeUtil.isFunctionDeclaration(n)||    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  not  a  statement	204	None	replace
484	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION;  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION;	          NodeUtil.isFunctionDeclaration(n)||    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  not  a  statement	204	None	replace
485	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION;  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION;	          NodeUtil.isFunctionDeclaration(n)||    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  not  a  statement	204	None	replace
486	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(parent)||  n.getType()  ==  Token.FUNCTION;  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(parent)||  n.getType()  ==  Token.FUNCTION;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(parent)||  n.getType()  ==  Token.FUNCTION;	          NodeUtil.isFunctionDeclaration(n)||    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  not  a  statement	204	None	replace
487	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n  ==  null);  Preconditions.checkState(n  ==  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n    ==    null);    Preconditions.checkState(n  ==  null);	  	compilable	  [FE]  RuntimeException  	19	13	add
488	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null);  Preconditions.checkState(n  ==  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n  ==  null);  Preconditions.checkState(n  ==  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n    ==    null);    Preconditions.checkState(n  ==  null);	  	compilable	  [FE]  RuntimeException  	19	13	add
489	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n  ==  null);  Preconditions.checkState(n!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n    ==    null);    Preconditions.checkState(n!=  null);	  	compilable	  [FE]  RuntimeException  	19	13	add
490	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null);  Preconditions.checkState(n!=  null);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n  ==  null);  Preconditions.checkState(n!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n    ==    null);    Preconditions.checkState(n!=  null);	  	compilable	  [FE]  RuntimeException  	19	13	add
491	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null);  Node  n  =  constantMap.get(arguments);  Preconditions.checkState(n  ==  null);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n  ==  null);  Node  n  =  constantMap.get(arguments);  Preconditions.checkState(n  ==  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n    ==    null);    Node  n  =  constantMap.get(arguments);  Preconditions.checkState(n  ==  null);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	19	None	add
492	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null);  Node  n  =  parent.getParent();  Preconditions.checkState(n  ==  null);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n  ==  null);  Node  n  =  parent.getParent();  Preconditions.checkState(n  ==  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n    ==    null);    Node  n  =  parent.getParent();  Preconditions.checkState(n  ==  null);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	19	None	add
493	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null);  Node  n  =  parent.getParent();  Preconditions.checkState(n!=  null);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n  ==  null);  Node  n  =  parent.getParent();  Preconditions.checkState(n!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n    ==    null);    Node  n  =  parent.getParent();  Preconditions.checkState(n!=  null);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	19	None	add
494	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null);  Preconditions.checkState(n  ==  null);  preconditions.checkState(n  ==  null);  [CE]  cannot  find  symbol  preconditions  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n  ==  null);  Preconditions.checkState(n  ==  null);  preconditions.checkState(n  ==  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n    ==    null);    Preconditions.checkState(n  ==  null);  preconditions.checkState(n  ==  null);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	19	None	add
495	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	233	13	replace
496	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	233	13	replace
497	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	233	13	replace
498	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	233	13	replace
499	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	233	13	replace
500	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	233	13	replace
501	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	233	10	replace
502	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	233	10	replace
503	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  preconditions	10	None	replace
504	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                NodeTraversal.traverse(compiler,        n,        this);        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	115	13	add
505	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	115	13	add
506	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                NodeTraversal.traverse(compiler,        n,        this);        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  null);  NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	115	13	add
507	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  null);  NodeTraversal.traverse(compiler,  n,  this);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  null);  NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	115	13	add
508	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                NodeTraversal.traverse(compiler,        n,        this);        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	115	13	add
509	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	115	13	add
510	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  false);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  false);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  false);  NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	115	None	add
511	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR,  parent);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR,    arguments);    	compilable	  [FE]  RuntimeException  	199	13	replace
512	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  parent);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR,  parent);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR,    arguments);    	compilable	  [FE]  RuntimeException  	199	13	replace
513	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  name);  [CE]  cannot  find  symbol  name  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  name);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR,  name);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR,    arguments);    	non-compiled	[CE]  cannot  find  symbol  name	199	None	replace
514	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  n);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR,  n);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR,    arguments);    	compilable	  [FE]  RuntimeException  	199	13	replace
515	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  n);  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  n);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR,  n);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR,    arguments);    	compilable	  [FE]  RuntimeException  	199	13	replace
516	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  true);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR,  true);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR,    arguments);    	compilable	  [FE]  RuntimeException  	199	13	replace
517	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  true);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  true);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR,  true);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR,    arguments);    	compilable	  [FE]  RuntimeException  	199	13	replace
518	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=  Token.VAR,  parent);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR,    arguments);    	compilable	  [FE]  RuntimeException  	199	5	replace
519	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR,  parent);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=  Token.VAR,  parent);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR,    arguments);    	compilable	  [FE]  RuntimeException  	199	5	replace
520	[BUG]  [BUGGY]  doStatementReturn(t,  n,  parent,  null);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementReturn(t,  n,  parent,  null);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(t,  n,  parent,  null);	  doStatementReturn(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
521	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	37	13	add
522	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	37	13	add
523	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	37	13	add
524	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	37	13	add
525	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	37	13	add
526	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	37	13	add
527	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	37	13	add
528	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	37	13	add
529	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	37	13	add
530	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	37	13	add
531	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.MOVED);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.MOVED);	  	non-compiled	[CE]  cannot  find  symbol  MOVED	37	None	add
532	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	67	13	add
533	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	67	13	add
534	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	67	13	add
535	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	67	13	add
536	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	67	13	add
537	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	67	13	add
538	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	67	13	add
539	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	67	13	add
540	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >>  Token.VAR);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >>  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  >>  Token.VAR);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	67	None	add
541	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	67	13	add
542	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	67	13	add
543	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkNotNull(n);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkNotNull(n);    Preconditions.checkNotNull(n);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	126	1	add
544	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkNotNull(n);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkNotNull(n);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkNotNull(n);    Preconditions.checkNotNull(n);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	126	1	add
545	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkNotNull(n);    Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	126	None	add
546	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  Node  parent  =  n.getFirstChild();  Preconditions.checkNotNull(parent);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Node  parent  =  n.getFirstChild();  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkNotNull(n);    Node  parent  =  n.getFirstChild();  Preconditions.checkNotNull(parent);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	126	None	add
547	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkNotNull(n);    NodeTraversal.traverse(compiler,  n,  parent);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	126	None	add
548	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkNotNull(n);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkNotNull(n);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkNotNull(n);    NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkNotNull(n);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	126	None	add
549	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkNotNull(parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkNotNull(n);    NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkNotNull(parent);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	126	None	add
550	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	138	None	add
551	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	138	None	add
552	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	138	13	add
553	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	138	13	add
554	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	138	None	add
555	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  noStatementNormalizations(t,  n,  parent);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  noStatementNormalizations(t,  n,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this);  noStatementNormalizations(t,  n,  parent);	          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,    n,    this);    noStatementNormalizations(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
556	[BUG]  [BUGGY]  Traverse.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  Traverse  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Traverse.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Traverse.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,    n,    this);    noStatementNormalizations(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  Traverse	154	None	replace
557	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  Traversal  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Traversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Traversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,    n,    this);    noStatementNormalizations(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  Traversal	154	None	replace
558	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  Context  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,    n,    this);    noStatementNormalizations(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  Context	154	None	replace
559	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  this.constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  this.constantMap);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  this.constantMap);	  doStatementNormalization(t,    n,    parent,    condition);    	non-compiled	[CE]  cannot  find  symbol  constantMap	93	None	replace
560	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Context.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	212	13	replace
561	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Context.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	212	13	replace
562	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Context.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	212	13	replace
563	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Context.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	212	13	replace
564	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Context  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Context.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Context	212	None	replace
565	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	152	None	replace
566	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	152	13	replace
567	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	152	13	replace
568	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	166	13	replace
569	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	166	13	replace
570	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	166	13	replace
571	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	166	13	replace
572	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	166	13	replace
573	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	166	13	replace
574	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	166	13	replace
575	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	166	13	replace
576	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	6	13	add
577	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	6	13	add
578	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getParent();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getParent();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Node  n  =  parent.getParent();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	6	None	add
579	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	6	13	add
580	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	6	13	add
581	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	6	13	add
582	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	6	13	add
583	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	6	None	add
584	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    Preconditions.checkNotNull(parent);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	32	None	replace
585	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	219	13	add
586	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	219	13	add
587	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	219	13	add
588	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	219	13	add
589	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	219	13	add
590	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	219	13	add
591	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	219	None	add
592	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	219	None	add
593	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	30	13	add
594	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	30	13	add
595	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(n);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(n);  Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	30	13	add
596	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(n);  Preconditions.checkNotNull(parent);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(n);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(n);  Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	30	13	add
597	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkNotNull(parent);    Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	30	None	add
598	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	30	13	add
599	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	30	13	add
600	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkState(n!=  parent);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkNotNull(parent);    Preconditions.checkState(n!=  parent);  Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	30	13	add
601	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkState(n!=  parent);  Preconditions.checkNotNull(parent);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkState(n!=  parent);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkNotNull(parent);    Preconditions.checkState(n!=  parent);  Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	30	13	add
602	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	30	13	add
603	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	30	13	add
604	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Node    n    =    n.getLastChild();    Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	134	None	replace
605	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Node    n    =    n.getLastChild();    Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	134	None	replace
606	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  n.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Node    n    =    n.getLastChild();    Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	134	None	replace
607	[BUG]  [BUGGY]  NodeTraversal.Traversal.traverse(compiler,  n,  parent,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.Traversal.traverse(compiler,  n,  parent,  arguments);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.Traversal.traverse(compiler,  n,  parent,  arguments);	  NodeTraversal.Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  arguments	52	None	replace
608	[BUG]  [BUGGY]  NodeTraversal.Traversal.traverse(compiler,  n,  parent,  argument);  [CE]  cannot  find  symbol  argument  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.Traversal.traverse(compiler,  n,  parent,  argument);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.Traversal.traverse(compiler,  n,  parent,  argument);	  NodeTraversal.Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argument	52	None	replace
609	[BUG]  [BUGGY]  NodeTraversal.Traversal.traverse(compiler,  n,  parent,  argumentMap);  [CE]  cannot  find  symbol  argumentMap  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.Traversal.traverse(compiler,  n,  parent,  argumentMap);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.Traversal.traverse(compiler,  n,  parent,  argumentMap);	  NodeTraversal.Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	52	None	replace
610	[BUG]  [BUGGY]  NodeTraversal.Traversal.traverse(compiler,  n,  parent,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.Traversal.traverse(compiler,  n,  parent,  argumentCount);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.Traversal.traverse(compiler,  n,  parent,  argumentCount);	  NodeTraversal.Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	52	None	replace
611	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    n.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	39	None	replace
612	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    n.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	39	None	replace
613	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getFirstChild();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  n.getFirstChild();	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    n.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	39	None	replace
614	[BUG]  [BUGGY]  doStatement(t,  n,  parent,  DEPRECATED_ARGUMENTS);  [CE]  cannot  find  symbol  DEPRECATED_ARGUMENTS  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatement(t,  n,  parent,  DEPRECATED_ARGUMENTS);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  parent,  DEPRECATED_ARGUMENTS);	  doStatement(t,    n,    parent,    argumentCount);    	non-compiled	[CE]  cannot  find  symbol  DEPRECATED_ARGUMENTS	27	None	replace
615	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);  Preconditions.checkNotNull(parent);  Preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkState(parent!=    null);    Preconditions.checkNotNull(parent);  Preconditions.checkState(parent!=  null);	  	compilable	  [FE]  RuntimeException  	179	13	add
616	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);  Preconditions.checkNotNull(parent);  Preconditions.checkState(parent!=  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);  Preconditions.checkNotNull(parent);  Preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkState(parent!=    null);    Preconditions.checkNotNull(parent);  Preconditions.checkState(parent!=  null);	  	compilable	  [FE]  RuntimeException  	179	13	add
617	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);  Preconditions.checkNotNull(n);  Preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkState(parent!=    null);    Preconditions.checkNotNull(n);  Preconditions.checkState(parent!=  null);	  	compilable	  [FE]  RuntimeException  	179	13	add
618	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);  Preconditions.checkNotNull(n);  Preconditions.checkState(parent!=  null);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);  Preconditions.checkNotNull(n);  Preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkState(parent!=    null);    Preconditions.checkNotNull(n);  Preconditions.checkState(parent!=  null);	  	compilable	  [FE]  RuntimeException  	179	13	add
619	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);  Preconditions.checkNotNull(parent);  Preconditions.checkState(parent  ==  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkState(parent!=    null);    Preconditions.checkNotNull(parent);  Preconditions.checkState(parent  ==  null);	  	compilable	  [FE]  RuntimeException  	179	13	add
620	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);  Preconditions.checkNotNull(parent);  Preconditions.checkState(parent  ==  null);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);  Preconditions.checkNotNull(parent);  Preconditions.checkState(parent  ==  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkState(parent!=    null);    Preconditions.checkNotNull(parent);  Preconditions.checkState(parent  ==  null);	  	compilable	  [FE]  RuntimeException  	179	13	add
621	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);  Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);  Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkState(parent!=    null);    Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	179	None	add
622	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkState(parent!=    null);    Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	179	13	add
623	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);  Preconditions.checkNotNull(parent);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkState(parent!=    null);    Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	179	13	add
624	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	79	13	add
625	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	79	13	add
626	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	79	13	add
627	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	79	13	add
628	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	79	13	add
629	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	79	13	add
630	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	79	13	add
631	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	79	13	add
632	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	79	13	add
633	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	79	13	add
634	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.CALL);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	228	13	add
635	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.CALL);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	228	13	add
636	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()!=  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.CALL);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()!=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	228	13	add
637	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()!=  Token.CALL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()!=  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.CALL);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()!=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	228	13	add
638	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.CALL);    Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	228	None	add
639	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Node  parent  =  n.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.CALL);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Node  parent  =  n.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.CALL);    Node  parent  =  n.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.CALL);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	228	None	add
640	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.CALL);    Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	228	13	add
641	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkNotNull(parent);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.CALL);    Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	228	13	add
642	[BUG]  [BUGGY]  doStatementReturn(t,  n,  parent,  1);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementReturn(t,  n,  parent,  1);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(t,  n,  parent,  1);	  doStatementReturn(t,    n,    parent,    argumentCount);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
643	[BUG]  [BUGGY]  Preconditions.checkState(compiler.shouldTraverse(t,  n,  parent));  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(compiler.shouldTraverse(t,  n,  parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(compiler.shouldTraverse(t,  n,  parent));	  Preconditions.checkState(converter.shouldTraverse(t,    n,    parent));    	non-compiled	[CE]  cannot  find  symbol	211	None	replace
644	[BUG]  [BUGGY]  Preconditions.checkState(constantMap.shouldTraverse(t,  n,  parent));  [CE]  cannot  find  symbol  constantMap  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(constantMap.shouldTraverse(t,  n,  parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(constantMap.shouldTraverse(t,  n,  parent));	  Preconditions.checkState(converter.shouldTraverse(t,    n,    parent));    	non-compiled	[CE]  cannot  find  symbol  constantMap	211	None	replace
645	[BUG]  [BUGGY]  Preconditions.checkState(converter.shouldTraverse(t,  n,  parent),  arguments);  [CE]  cannot  find  symbol  converter  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(converter.shouldTraverse(t,  n,  parent),  arguments);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(converter.shouldTraverse(t,  n,  parent),  arguments);	  Preconditions.checkState(converter.shouldTraverse(t,    n,    parent));    	non-compiled	[CE]  cannot  find  symbol  converter	211	None	replace
646	[BUG]  [BUGGY]  Preconditions.checkState(n.shouldTraverse(t,  n,  parent));  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.shouldTraverse(t,  n,  parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.shouldTraverse(t,  n,  parent));	  Preconditions.checkState(converter.shouldTraverse(t,    n,    parent));    	non-compiled	[CE]  cannot  find  symbol	211	None	replace
647	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	81	13	add
648	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	81	13	add
649	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	81	13	add
650	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	81	13	add
651	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	81	13	add
652	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	81	13	add
653	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  >>  Token.VAR);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  >>  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  >>  Token.VAR);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	81	None	add
654	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  >=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	81	13	add
655	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  >=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	81	13	add
656	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	81	13	add
657	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	81	13	add
658	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  arguments,  null);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  arguments,  null);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  arguments,  null);	  doStatementNormalizations(t,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	192	None	replace
659	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentMap,  null);  [CE]  cannot  find  symbol  argumentMap  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentMap,  null);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  argumentMap,  null);	  doStatementNormalizations(t,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	192	None	replace
660	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentSet,  null);  [CE]  cannot  find  symbol  argumentSet  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentSet,  null);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  argumentSet,  null);	  doStatementNormalizations(t,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  argumentSet	192	None	replace
661	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentCount,  null);  [CE]  cannot  find  symbol  argumentCount  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentCount,  null);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  argumentCount,  null);	  doStatementNormalizations(t,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	192	None	replace
662	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Context.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  Context  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Context.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Context.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Context.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  Context	246	None	replace
663	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  null);  Preconditions.checkState(n!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n!=    null);    Preconditions.checkState(n!=  null);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	15	1	add
664	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null);  Preconditions.checkState(n!=  null);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  null);  Preconditions.checkState(n!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    null);    Preconditions.checkState(n!=  null);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	15	1	add
665	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n!=  null);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  null);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    null);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n!=  null);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	15	None	add
666	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null);  Node  n  =  parent.getParent();  Preconditions.checkState(n!=  null);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  null);  Node  n  =  parent.getParent();  Preconditions.checkState(n!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    null);    Node  n  =  parent.getParent();  Preconditions.checkState(n!=  null);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	15	None	add
667	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n!=  null);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  null);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    null);    Node  n  =  n.getFirstChild();  Preconditions.checkState(n!=  null);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	15	None	add
668	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null);  Context.checkState(n!=  null);  Preconditions.checkState(n!=  null);  [CE]  cannot  find  symbol  Context  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  null);  Context.checkState(n!=  null);  Preconditions.checkState(n!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    null);    Context.checkState(n!=  null);  Preconditions.checkState(n!=  null);	  	non-compiled	[CE]  cannot  find  symbol  Context	15	None	add
669	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null);  Preconditions.checkState(n!=  null);  preconditions.checkState(n!=  null);  [CE]  cannot  find  symbol  preconditions  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  null);  Preconditions.checkState(n!=  null);  preconditions.checkState(n!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    null);    Preconditions.checkState(n!=  null);  preconditions.checkState(n!=  null);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	15	None	add
670	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	200	1	add
671	[BUG]  [BUGGY]          t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	200	1	add
672	[BUG]  [BUGGY]          t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,  n,  parent);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	200	None	add
673	[BUG]  [BUGGY]          t.getCompiler().reportCodeChange();  Node  t  =  n.getFirstChild();  [CE]  variable  t  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          t.getCompiler().reportCodeChange();  Node  t  =  n.getFirstChild();  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                t.getCompiler().reportCodeChange();    Node  t  =  n.getFirstChild();	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	200	None	add
674	[BUG]  [BUGGY]          t.getCompiler().reportCodeChange();  n.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          t.getCompiler().reportCodeChange();  n.getCompiler().reportCodeChange();  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                t.getCompiler().reportCodeChange();    n.getCompiler().reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol	200	None	add
675	[BUG]  [BUGGY]          t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  parent).traverse(compiler);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  parent).traverse(compiler);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,  n,  parent).traverse(compiler);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	200	None	add
676	[BUG]  [BUGGY]          t.getCompiler().reportCodeChange();  Node  t  =  parent.getFirstChild();  [CE]  variable  t  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          t.getCompiler().reportCodeChange();  Node  t  =  parent.getFirstChild();  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                t.getCompiler().reportCodeChange();    Node  t  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	200	None	add
677	[BUG]  [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.NAME,  n.getSourceName());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.NAME,  n.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(t.getType()  ==  Token.NAME,  n.getSourceName());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
678	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  t.getSourceName().equals(n.getString()));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  t.getSourceName().equals(n.getString()));	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    	compilable	  [FE]  RuntimeException  	141	13	replace
679	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  t.getSourceName().equals(n.getString()));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  t.getSourceName().equals(n.getString()));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  t.getSourceName().equals(n.getString()));	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    	compilable	  [FE]  RuntimeException  	141	13	replace
680	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getString());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getString());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    	compilable	  [FE]  RuntimeException  	141	13	replace
681	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getString());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getString());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getString());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    	compilable	  [FE]  RuntimeException  	141	13	replace
682	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  t.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()!=  Token.NAME,  t.getSourceName());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    	compilable	  [FE]  RuntimeException  	141	12	replace
683	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  t.getSourceName());  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  t.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME,  t.getSourceName());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    	compilable	  [FE]  RuntimeException  	141	12	replace
684	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent,  constantMap);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent,  constantMap);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  constantMap	135	None	replace
685	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent,  false);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent,  false);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)	135	None	replace
686	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent,  condition);  [CE]  cannot  find  symbol  condition  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent,  condition);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent,  condition);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  condition	135	None	replace
687	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent,  this);  [CE]  cannot  find  symbol  Context  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent,  this);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  Context	135	None	replace
688	[BUG]  [BUGGY]  doStatementDeclarations(t,  n,  parent,  argumentSet);  [CE]  cannot  find  symbol  argumentSet  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementDeclarations(t,  n,  parent,  argumentSet);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementDeclarations(t,  n,  parent,  argumentSet);	  doStatementDeclarations(t,    n,    parent,    constantMap);    	non-compiled	[CE]  cannot  find  symbol  argumentSet	210	None	replace
689	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild().getParent();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getFirstChild().getParent();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getFirstChild().getParent();	  Node    parent    =    n.getFirstChild().getNext();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	185	None	replace
690	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild().getLastChild();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getFirstChild().getLastChild();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getFirstChild().getLastChild();	  Node    parent    =    n.getFirstChild().getNext();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	185	None	replace
691	[BUG]  [BUGGY]  Node  parent  =  t.getFirstChild().getNext();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  t.getFirstChild().getNext();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  t.getFirstChild().getNext();	  Node    parent    =    n.getFirstChild().getNext();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	185	None	replace
692	[BUG]  [BUGGY]  doStatementDeclarations(t,  n,  parent,  this.constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementDeclarations(t,  n,  parent,  this.constantMap);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementDeclarations(t,  n,  parent,  this.constantMap);	  doStatementDeclarations(t,    n,    parent,    argumentMap);    	non-compiled	[CE]  cannot  find  symbol  constantMap	186	None	replace
693	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	177	13	add
694	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	177	13	add
695	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()    ==    Token.VAR);    Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	177	None	add
696	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()    ==    Token.VAR);    Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	177	None	add
697	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	177	13	add
698	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	177	13	add
699	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	177	13	add
700	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	177	13	add
701	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	177	None	add
702	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	11	13	add
703	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	11	13	add
704	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	11	13	add
705	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	11	13	add
706	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	11	13	add
707	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	11	13	add
708	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	11	13	add
709	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	11	13	add
710	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	11	13	add
711	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	11	13	add
712	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	11	13	add
713	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	11	13	add
714	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	111	13	add
715	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	111	13	add
716	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	111	13	add
717	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	111	13	add
718	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	111	13	add
719	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	111	13	add
720	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	111	13	add
721	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	111	13	add
722	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	111	13	add
723	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	111	13	add
724	[BUG]  [BUGGY]  doStatement(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatement(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  doStatement(t,    n,    parent,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	144	None	replace
725	[BUG]  [BUGGY]  doStatement(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [CE]  cannot  find  symbol  argument  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatement(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  argument);	  doStatement(t,    n,    parent,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  argument	144	None	replace
726	[BUG]  [BUGGY]  doStatement(t,  n,  parent,  CONVERT_WHILE_TO_FOR);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatement(t,  n,  parent,  CONVERT_WHILE_TO_FOR);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  parent,  CONVERT_WHILE_TO_FOR);	  doStatement(t,    n,    parent,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
727	[BUG]  [BUGGY]  doStatement(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatement(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  doStatement(t,    n,    parent,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	144	None	replace
728	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	234	13	add
729	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	234	13	add
730	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	234	None	add
731	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	234	None	add
732	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	234	13	add
733	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	234	13	add
734	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	234	13	add
735	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	234	13	add
736	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	234	13	add
737	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	234	13	add
738	[BUG]  [BUGGY]  Preconditions.checkState(arguments!=  null  &&  arguments.length  >  0);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  arguments  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(arguments!=  null  &&  arguments.length  >  0);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(arguments!=  null  &&  arguments.length  >  0);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments!=    null    &&    arguments.length    >    0);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	121	None	replace
739	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(arguments!=  null  &&  arguments.length  >  0);  [CE]  cannot  find  symbol  arguments  [FE]                    RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(arguments!=  null  &&  arguments.length  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(arguments!=  null  &&  arguments.length  >  0);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments!=    null    &&    arguments.length    >    0);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	121	None	replace
740	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  doStatementNormalizations(t,    n,    parent,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	151	None	replace
741	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);	  doStatementNormalizations(t,    n,    parent,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	151	None	replace
742	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [CE]  cannot  find  symbol  argument  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  argument);	  doStatementNormalizations(t,    n,    parent,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  argument	151	None	replace
743	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  doStatementNormalizations(t,    n,    parent,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	151	None	replace
744	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  doStatementNormalization(t,    n,    parent,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	188	None	replace
745	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [CE]  cannot  find  symbol  argument  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  argument);	  doStatementNormalization(t,    n,    parent,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  argument	188	None	replace
746	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  CONVERT_WHILE_TO_FOR);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  CONVERT_WHILE_TO_FOR);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  CONVERT_WHILE_TO_FOR);	  doStatementNormalization(t,    n,    parent,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
747	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());	  	compilable	  [FE]  RuntimeException  	136	13	add
748	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());	  	compilable	  [FE]  RuntimeException  	136	13	add
749	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()!=  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()!=  Token.NAME,  t.getModule());	  	compilable	  [FE]  RuntimeException  	136	13	add
750	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()!=  Token.NAME,  t.getModule());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()!=  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()!=  Token.NAME,  t.getModule());	  	compilable	  [FE]  RuntimeException  	136	13	add
751	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(t.getType()  ==  Token.NAME,  t.getModule());  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(t.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(t.getType()  ==  Token.NAME,  t.getModule());	  	non-compiled	[CE]  cannot  find  symbol	136	None	add
752	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Context.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [CE]  cannot  find  symbol  Context  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Context.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Context.checkState(n.getType()  ==  Token.NAME,  t.getModule());	  	non-compiled	[CE]  cannot  find  symbol  Context	136	None	add
753	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  >=  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  >=  Token.NAME,  t.getModule());	  	compilable	  [FE]  RuntimeException  	136	13	add
754	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  >=  Token.NAME,  t.getModule());  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  >=  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  >=  Token.NAME,  t.getModule());	  	compilable	  [FE]  RuntimeException  	136	13	add
755	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.DECEMBER,  t.getModule());  [CE]  cannot  find  symbol  DECEMBER  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.DECEMBER,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  ==  Token.DECEMBER,  t.getModule());	  	non-compiled	[CE]  cannot  find  symbol  DECEMBER	136	None	add
756	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));	  	compilable	  [FE]  RuntimeException  	175	13	add
757	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));	  	compilable	  [FE]  RuntimeException  	175	13	add
758	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()!=  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    Preconditions.checkArgument(n.getType()!=  Token.NAME  &&  NodeUtil.isExpressionNode(parent));	  	compilable	  [FE]  RuntimeException  	175	13	add
759	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()!=  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()!=  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    Preconditions.checkArgument(n.getType()!=  Token.NAME  &&  NodeUtil.isExpressionNode(parent));	  	compilable	  [FE]  RuntimeException  	175	13	add
760	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()  ==  Token.VAR  &&  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    Preconditions.checkArgument(n.getType()  ==  Token.VAR  &&  NodeUtil.isExpressionNode(parent));	  	compilable	  [FE]  RuntimeException  	175	13	add
761	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()  ==  Token.VAR  &&  NodeUtil.isExpressionNode(parent));  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()  ==  Token.VAR  &&  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    Preconditions.checkArgument(n.getType()  ==  Token.VAR  &&  NodeUtil.isExpressionNode(parent));	  	compilable	  [FE]  RuntimeException  	175	13	add
762	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()  ==  Token.EMPTY  &&  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    Preconditions.checkArgument(n.getType()  ==  Token.EMPTY  &&  NodeUtil.isExpressionNode(parent));	  	compilable	  [FE]  RuntimeException  	175	13	add
763	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()  ==  Token.EMPTY  &&  NodeUtil.isExpressionNode(parent));  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()  ==  Token.EMPTY  &&  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    Preconditions.checkArgument(n.getType()  ==  Token.EMPTY  &&  NodeUtil.isExpressionNode(parent));	  	compilable	  [FE]  RuntimeException  	175	13	add
764	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isExpressionNode(parent));	  	compilable	  [FE]  RuntimeException  	175	13	add
765	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isExpressionNode(parent));  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isExpressionNode(parent));	  	compilable	  [FE]  RuntimeException  	175	13	add
766	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isStatementNode(parent));  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isStatementNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isStatementNode(parent));	  	non-compiled	[CE]  cannot  find  symbol	175	None	add
767	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	71	13	replace
768	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	71	13	replace
769	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  constantMap);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  constantMap);	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  constantMap	21	None	replace
770	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  forbidChanges);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  forbidChanges);	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	21	None	replace
771	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  function.expectedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  function.expectedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  function.expectedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	          NodeUtil.isFunctionDeclaration(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	194	None	replace
772	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(	          NodeUtil.isFunctionDeclaration(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	194	None	replace
773	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  FunctionType.expectedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  FunctionType.expectedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  FunctionType.expectedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	          NodeUtil.isFunctionDeclaration(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	194	None	replace
774	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.call(  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.call(	          NodeUtil.isFunctionDeclaration(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	194	None	replace
775	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	249	13	add
776	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	249	13	add
777	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	249	13	add
778	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	249	13	add
779	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	249	13	add
780	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	249	13	add
781	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	249	13	add
782	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	249	13	add
783	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	249	13	add
784	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	249	13	add
785	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.SYNTHETIC);  [CE]  cannot  find  symbol  SYNTHETIC  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.SYNTHETIC);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.SYNTHETIC);	  	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	249	None	add
786	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkNotNull(n);  Preconditions.checkNotNull(parent);	          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);    	compilable	  [FE]  RuntimeException  	31	13	replace
787	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkNotNull(parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkNotNull(n);  Preconditions.checkNotNull(parent);	          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);    	compilable	  [FE]  RuntimeException  	31	13	replace
788	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);	          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);    	compilable	  [FE]  RuntimeException  	31	13	replace
789	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent);	          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);    	compilable	  [FE]  RuntimeException  	31	13	replace
790	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.GETPROP);	          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);    	compilable	  [FE]  RuntimeException  	31	13	replace
791	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.GETPROP);	          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);    	compilable	  [FE]  RuntimeException  	31	13	replace
792	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  parent);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	97	13	replace
793	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  parent);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  parent);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	97	13	replace
794	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	97	13	replace
795	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	97	13	replace
796	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  name);  [CE]  cannot  find  symbol  name  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  name);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  name);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  cannot  find  symbol  name	97	None	replace
797	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=  Token.NAME,  parent);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	97	12	replace
798	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME,  parent);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=  Token.NAME,  parent);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	97	12	replace
799	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  true);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  true);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	97	13	replace
800	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  true);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  true);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  true);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	97	13	replace
801	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Node    n    =    n.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	62	None	replace
802	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Node    n    =    n.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	62	None	replace
803	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  >=  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	148	6	replace
804	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  >=  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	148	6	replace
805	[BUG]  [BUGGY]  Presconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Presconditions  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Presconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Presconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Presconditions	148	None	replace
806	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Node    n    =    n.getFirstChild();    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	8	None	replace
807	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Node    n    =    n.getFirstChild();    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	8	None	replace
808	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Node    n    =    n.getFirstChild();    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	8	None	replace
809	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Context  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.checkState(n.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Context	251	None	replace
810	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(n.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	251	None	replace
811	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this,  parent);  Context.checkState(n.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)	251	None	replace
812	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(parent.getType()  ==  Token.NAME);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(parent.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	251	None	replace
813	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	70	12	add
814	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	70	12	add
815	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	70	13	add
816	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	70	13	add
817	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=    Token.NAME);    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()!=  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	70	None	add
818	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  preconditions.checkState(n.getType()!=  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	70	None	add
819	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	70	12	add
820	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	70	12	add
821	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	70	12	add
822	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	70	12	add
823	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Preconditions.checkState(parent  ==  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent    ==    null);    Preconditions.checkState(parent  ==  null);	  	compilable	  [FE]  RuntimeException  	58	13	add
824	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Preconditions.checkState(parent  ==  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Preconditions.checkState(parent  ==  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent    ==    null);    Preconditions.checkState(parent  ==  null);	  	compilable	  [FE]  RuntimeException  	58	13	add
825	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent    ==    null);    Preconditions.checkState(parent!=  null);	  	compilable	  [FE]  RuntimeException  	58	13	add
826	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Preconditions.checkState(parent!=  null);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent    ==    null);    Preconditions.checkState(parent!=  null);	  	compilable	  [FE]  RuntimeException  	58	13	add
827	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getParent();  Preconditions.checkState(parent!=  null);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getParent();  Preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent    ==    null);    Node  parent  =  n.getParent();  Preconditions.checkState(parent!=  null);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	58	None	add
828	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getParent();  Preconditions.checkState(parent  ==  null);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getParent();  Preconditions.checkState(parent  ==  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent    ==    null);    Node  parent  =  n.getParent();  Preconditions.checkState(parent  ==  null);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	58	None	add
829	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Preconditions.checkState(parent  ==  null);  preconditions.checkState(parent!=  null);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Preconditions.checkState(parent  ==  null);  preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent    ==    null);    Preconditions.checkState(parent  ==  null);  preconditions.checkState(parent!=  null);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	58	None	add
830	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	114	13	replace
831	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	114	13	replace
832	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	114	13	replace
833	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	114	13	replace
834	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.mayHaveSideEffects(n)&&  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  NodeUtil.mayHaveSideEffects(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	159	None	replace
835	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.mayHaveSideEffects(n)&&  expected:  function  f()  {  arguments=Array.prototype.slice.call(	  NodeUtil.mayHaveSideEffects(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	159	None	replace
836	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.mayHaveSideEffects(n)&&  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  NodeUtil.mayHaveSideEffects(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	159	None	replace
837	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  function.expectedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  function.expectedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.mayHaveSideEffects(n)&&  function.expectedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  NodeUtil.mayHaveSideEffects(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	159	None	replace
838	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	48	13	replace
839	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	48	13	replace
840	[BUG]  [BUGGY]  Preconditions.checkState(!constantMap.isEmpty());  [CE]  cannot  find  symbol  constantMap  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(!constantMap.isEmpty());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(!constantMap.isEmpty());	  Preconditions.checkState(!arguments.isEmpty());    	non-compiled	[CE]  cannot  find  symbol  constantMap	128	None	replace
841	[BUG]  [BUGGY]  Preconditions.checkState(!n.isEmpty());  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(!n.isEmpty());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(!n.isEmpty());	  Preconditions.checkState(!arguments.isEmpty());    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
842	[BUG]  [BUGGY]  Preconditions.checkState(!converter.isEmpty());  [CE]  cannot  find  symbol  converter  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(!converter.isEmpty());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(!converter.isEmpty());	  Preconditions.checkState(!arguments.isEmpty());    	non-compiled	[CE]  cannot  find  symbol  converter	128	None	replace
843	[BUG]  [BUGGY]  Preconditions.checkState(!parent.isEmpty());  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(!parent.isEmpty());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(!parent.isEmpty());	  Preconditions.checkState(!arguments.isEmpty());    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
844	[BUG]  [BUGGY]  Preconditions.checkState(!converters.isEmpty());  [CE]  cannot  find  symbol  converters  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(!converters.isEmpty());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(!converters.isEmpty());	  Preconditions.checkState(!arguments.isEmpty());    	non-compiled	[CE]  cannot  find  symbol  converters	128	None	replace
845	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentations);  [CE]  cannot  find  symbol  argumentations  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentations);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argumentations);	  NodeTraversal.traverse(compiler,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentations	130	None	replace
846	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentStatements);  [CE]  cannot  find  symbol  argumentStatements  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentStatements);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argumentStatements);	  NodeTraversal.traverse(compiler,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentStatements	130	None	replace
847	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.CALL);	          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	229	13	replace
848	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);	          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	229	13	replace
849	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.CALL);	          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	229	13	replace
850	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.CALL);	          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	229	13	replace
851	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);	          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	229	13	replace
852	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);	          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	229	13	replace
853	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()  ==  Token.CALL);	          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	229	13	replace
854	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.CALL);	          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	229	13	replace
855	[BUG]  [BUGGY]  doStatementReturn(t,  n,  parent,  true);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementReturn(t,  n,  parent,  true);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(t,  n,  parent,  true);	  doStatementReturn(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol	197	None	replace
856	[BUG]  [BUGGY]  doStatementReturn(t,  n,  parent,  false,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementReturn(t,  n,  parent,  false,  arguments);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(t,  n,  parent,  false,  arguments);	  doStatementReturn(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	197	None	replace
857	[BUG]  [BUGGY]  doStatementReturn(t,  n,  parent,  false,  argument);  [CE]  cannot  find  symbol  argument  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementReturn(t,  n,  parent,  false,  argument);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(t,  n,  parent,  false,  argument);	  doStatementReturn(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol  argument	197	None	replace
858	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  NodeUtil.isExpressionNode(parent));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    	compilable	  [FE]  RuntimeException  	176	13	replace
859	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  NodeUtil.isExpressionNode(parent));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  NodeUtil.isExpressionNode(parent));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    	compilable	  [FE]  RuntimeException  	176	13	replace
860	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(n));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    	compilable	  [FE]  RuntimeException  	176	13	replace
861	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(n));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(n));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    	compilable	  [FE]  RuntimeException  	176	13	replace
862	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(n));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    	compilable	  [FE]  RuntimeException  	176	13	replace
863	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(n));  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(n));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    	compilable	  [FE]  RuntimeException  	176	13	replace
864	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  NodeUtil.isExpressionNode(parent));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    	compilable	  [FE]  RuntimeException  	176	13	replace
865	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  NodeUtil.isExpressionNode(parent));  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  NodeUtil.isExpressionNode(parent));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    	compilable	  [FE]  RuntimeException  	176	13	replace
866	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getModule());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getModule());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
867	[BUG]  [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.NAME,  n.getModule());  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.NAME,  n.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(t.getType()  ==  Token.NAME,  n.getModule());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
868	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()!=  Token.NAME,  t.getModule());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	compilable	  [FE]  RuntimeException  	137	12	replace
869	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  t.getModule());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME,  t.getModule());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	compilable	  [FE]  RuntimeException  	137	12	replace
870	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  t.getModule()!=  Token.VAR);  [CE]  incomparable  types:  JSModule  and  int  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  t.getModule()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  t.getModule()!=  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  incomparable  types:  JSModule  and  int	137	None	replace
871	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  true,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  true,  constantMap);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  true,  constantMap);	  NodeTraversal.traverse(compiler,    n,    parent,    true);    	non-compiled	[CE]  cannot  find  symbol  constantMap	198	None	replace
872	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  true,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  true,  forbidChanges);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  true,  forbidChanges);	  NodeTraversal.traverse(compiler,    n,    parent,    true);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	198	None	replace
873	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  true,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean,boolean)  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  true,  false);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  true,  false);	  NodeTraversal.traverse(compiler,    n,    parent,    true);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean,boolean)	198	None	replace
874	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	72	13	add
875	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	72	13	add
876	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	72	13	add
877	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	72	13	add
878	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	72	13	add
879	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	72	13	add
880	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	72	13	add
881	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	72	13	add
882	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	72	13	add
883	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	72	13	add
884	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Context  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  Context	72	None	add
885	[BUG]  [BUGGY]  Preconditions.checkState(!isNormalized(),  isVerifyConstants);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(!isNormalized(),  isVerifyConstants);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(!isNormalized(),  isVerifyConstants);	  Preconditions.checkState(!isNormalized());    	non-compiled	[CE]  cannot  find  symbol	217	None	replace
886	[BUG]  [BUGGY]  Preconditions.checkState(!isNormalized(),  true);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(!isNormalized(),  true);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(!isNormalized(),  true);	  Preconditions.checkState(!isNormalized());    	non-compiled	[CE]  cannot  find  symbol	217	None	replace
887	[BUG]  [BUGGY]  Preconditions.checkState(!isNormalized()  &&  parent.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(!isNormalized()  &&  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(!isNormalized()  &&  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(!isNormalized());    	non-compiled	[CE]  cannot  find  symbol	217	None	replace
888	[BUG]  [BUGGY]  Preconditions.checkState(isNormalized());  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(isNormalized());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(isNormalized());	  Preconditions.checkState(!isNormalized());    	non-compiled	[CE]  cannot  find  symbol	217	None	replace
889	[BUG]  [BUGGY]  Context.checkState(n!=  null);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  Context  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n!=  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.checkState(n!=  null);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(arguments!=    null);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  Context	119	None	replace
890	[BUG]  [BUGGY]  Context.checkState(arguments!=  null);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  arguments  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(arguments!=  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.checkState(arguments!=  null);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(arguments!=    null);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	119	None	replace
891	[BUG]  [BUGGY]  Context.checkState(parent!=  null);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  Context  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(parent!=  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.checkState(parent!=  null);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(arguments!=    null);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  Context	119	None	replace
892	[BUG]  [BUGGY]  Context.checkState(n  ==  null);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  Context  [FE]                    RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n  ==  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.checkState(n  ==  null);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(arguments!=    null);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  Context	119	None	replace
893	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	13	13	add
894	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	13	13	add
895	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	13	13	add
896	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	13	13	add
897	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  >=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  >=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	13	13	add
898	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  >=  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  >=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  >=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	13	13	add
899	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  >>  Token.FUNCTION);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  >>  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  >>  Token.FUNCTION);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	13	None	add
900	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	13	13	add
901	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	13	13	add
902	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	13	13	add
903	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	13	13	add
904	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	239	13	replace
905	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	239	13	replace
906	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	239	13	replace
907	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	239	13	replace
908	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	239	13	replace
909	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	239	13	replace
910	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	239	13	replace
911	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	239	13	replace
912	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	162	13	replace
913	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(n));  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	162	13	replace
914	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(n));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	162	10	replace
915	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(n));  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(n));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	162	10	replace
916	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkNotNull(n);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	227	13	replace
917	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkNotNull(n);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	227	13	replace
918	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  this,  arguments);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  this,  arguments);	  doStatementNormalizations(t,    n,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	2	None	replace
919	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  this,  argument);  [CE]  cannot  find  symbol  argument  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  this,  argument);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  this,  argument);	  doStatementNormalizations(t,    n,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  argument	2	None	replace
920	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  arguments,  this);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  arguments,  this);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  arguments,  this);	  doStatementNormalizations(t,    n,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	2	None	replace
921	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  this,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  this,  argumentCount);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  this,  argumentCount);	  doStatementNormalizations(t,    n,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	2	None	replace
922	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parents);  [CE]  cannot  find  symbol  parents  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parents);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this,  parents);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  parents	22	None	replace
923	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	164	13	replace
924	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	164	13	replace
925	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	164	13	replace
926	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	164	13	replace
927	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	164	13	replace
928	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	164	13	replace
929	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isVarDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isVarDeclaration(n));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	164	13	replace
930	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isVarDeclaration(n));  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isVarDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isVarDeclaration(n));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	164	13	replace
931	[BUG]  [BUGGY]  doStatementReturn(t,  n,  parent,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementReturn(t,  n,  parent,  constantMap);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(t,  n,  parent,  constantMap);	  doStatementReturn(t,    n,    parent,    argumentMap);    	non-compiled	[CE]  cannot  find  symbol  constantMap	195	None	replace
932	[BUG]  [BUGGY]  doStatementReturn(t,  n,  parent,  this.constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementReturn(t,  n,  parent,  this.constantMap);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(t,  n,  parent,  this.constantMap);	  doStatementReturn(t,    n,    parent,    argumentMap);    	non-compiled	[CE]  cannot  find  symbol  constantMap	195	None	replace
933	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	214	13	add
934	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	214	13	add
935	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	214	13	add
936	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	214	13	add
937	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	214	13	add
938	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	214	13	add
939	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	214	13	add
940	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	214	13	add
941	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.MOVED);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.MOVED);	  	non-compiled	[CE]  cannot  find  symbol  MOVED	214	None	add
942	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Node    n    =    n.getLastChild();    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	9	None	replace
943	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Node    n    =    n.getLastChild();    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	9	None	replace
944	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()!=  Token.NAME);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()!=  Token.NAME);	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	33	None	replace
945	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.length  >  0);  [CE]  cannot  find  symbol  length  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.length  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.length  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    arguments.length    >    0);    	non-compiled	[CE]  cannot  find  symbol  length	240	None	replace
946	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getString().length()  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getString().length()  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    arguments.length    >    0);    	compilable	  [FE]  RuntimeException  	240	13	replace
947	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getString().length()  >  0);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getString().length()  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getString().length()  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    arguments.length    >    0);    	compilable	  [FE]  RuntimeException  	240	13	replace
948	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  &&  n.length  >  0);  [CE]  cannot  find  symbol  length  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  &&  n.length  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  &&  n.length  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    arguments.length    >    0);    	non-compiled	[CE]  cannot  find  symbol  length	240	None	replace
949	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getFirstChild().length  >  0);  [CE]  cannot  find  symbol  length  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getFirstChild().length  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getFirstChild().length  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    arguments.length    >    0);    	non-compiled	[CE]  cannot  find  symbol  length	240	None	replace
950	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.hasChildren());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.hasChildren());	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    arguments.length    >    0);    	compilable	  [FE]  RuntimeException  	240	13	replace
951	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.hasChildren());  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.hasChildren());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.hasChildren());	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    arguments.length    >    0);    	compilable	  [FE]  RuntimeException  	240	13	replace
952	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkState(parent!=  null);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getParent();  Preconditions.checkState(parent!=  null);	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    Preconditions.checkState(parent!=    null);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	181	None	replace
953	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	34	None	replace
954	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()!=  Token.VAR);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()!=  Token.VAR);	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	34	None	replace
955	[BUG]  [BUGGY]  doStatement(t,  n,  parent,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatement(t,  n,  parent,  constantMap);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  parent,  constantMap);	  doStatement(t,    n,    parent,    argumentMap);    	non-compiled	[CE]  cannot  find  symbol  constantMap	146	None	replace
956	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	86	13	replace
957	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	86	13	replace
958	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	86	13	replace
959	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	86	13	replace
960	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	86	12	replace
961	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	86	12	replace
962	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	238	13	add
963	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	238	13	add
964	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	238	None	add
965	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	238	None	add
966	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	238	13	add
967	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	238	13	add
968	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	238	13	add
969	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	238	13	add
970	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	238	13	add
971	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	238	13	add
972	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	242	13	replace
973	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	242	13	replace
974	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	242	13	replace
975	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	242	13	replace
976	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	242	9	replace
977	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	242	9	replace
978	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	242	13	replace
979	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	242	13	replace
980	[BUG]  [BUGGY]  doStatement(t,  n,  parent,  arguments,  null);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatement(t,  n,  parent,  arguments,  null);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  parent,  arguments,  null);	  doStatement(t,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	26	None	replace
981	[BUG]  [BUGGY]  doStatement(t,  n,  parent,  null,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatement(t,  n,  parent,  null,  arguments);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  parent,  null,  arguments);	  doStatement(t,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	26	None	replace
982	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	209	13	replace
983	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	209	13	replace
984	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	209	13	replace
985	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	209	13	replace
986	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	209	5	replace
987	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	209	5	replace
988	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	209	13	replace
989	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	209	13	replace
990	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  false,  argumentNames);  [CE]  cannot  find  symbol  argumentNames  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  false,  argumentNames);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  false,  argumentNames);	  doStatementNormalizations(t,    n,    parent,    false,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentNames	88	None	replace
991	[BUG]  [BUGGY]  doStatementDeclarations(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementDeclarations(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementDeclarations(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);	  doStatementDeclarations(t,    n,    parent,    argument);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
992	[BUG]  [BUGGY]  doStatementDeclarations(t,  n,  parent,  name);  [CE]  cannot  find  symbol  name  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementDeclarations(t,  n,  parent,  name);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementDeclarations(t,  n,  parent,  name);	  doStatementDeclarations(t,    n,    parent,    argument);    	non-compiled	[CE]  cannot  find  symbol  name	123	None	replace
993	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  this,  arguments);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  this,  arguments);	  doStatementNormalization(t,    n,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	94	None	replace
994	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  this,  argument);  [CE]  cannot  find  symbol  argument  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  this,  argument);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  this,  argument);	  doStatementNormalization(t,    n,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  argument	94	None	replace
995	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	65	13	add
996	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	65	13	add
997	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	65	13	add
998	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	65	13	add
999	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	65	13	add
1000	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	65	13	add
1001	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	65	13	add
1002	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	65	13	add
1003	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	65	13	add
1004	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	65	13	add
1005	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	65	13	add
1006	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	65	13	add
1007	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	73	13	replace
1008	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	73	13	replace
1009	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	73	13	replace
1010	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	73	13	replace
1011	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	73	13	replace
1012	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	73	13	replace
1013	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	73	1	replace
1014	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.NAME);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	73	1	replace
1015	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	43	13	add
1016	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	43	13	add
1017	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	43	13	add
1018	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	43	13	add
1019	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	43	13	add
1020	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	43	13	add
1021	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	43	13	add
1022	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	43	13	add
1023	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	43	13	add
1024	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	43	13	add
1025	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	43	13	add
1026	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	43	13	add
1027	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	147	13	add
1028	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	147	13	add
1029	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	147	13	add
1030	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	147	13	add
1031	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.	  	non-compiled	[CE]  ')'  expected	147	None	add
1032	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	147	13	add
1033	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	147	13	add
1034	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	147	13	add
1035	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	147	13	add
1036	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Node    n    =    n.getLastChild();    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	78	None	replace
1037	[BUG]  [BUGGY]  n.getType()!=  Token.VAR;  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  n.getType()!=  Token.VAR;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	n.getType()!=  Token.VAR;	          n.getType()    ==    Token.VAR;    	non-compiled	[CE]  not  a  statement	202	None	replace
1038	[BUG]  [BUGGY]  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME;  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME;	          n.getType()    ==    Token.VAR;    	non-compiled	[CE]  not  a  statement	202	None	replace
1039	[BUG]  [BUGGY]  node.getType()  ==  Token.VAR;  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  node.getType()  ==  Token.VAR;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	node.getType()  ==  Token.VAR;	          n.getType()    ==    Token.VAR;    	non-compiled	[CE]  not  a  statement	202	None	replace
1040	[BUG]  [BUGGY]  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION;  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION;	          n.getType()    ==    Token.VAR;    	non-compiled	[CE]  not  a  statement	202	None	replace
1041	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	47	9	add
1042	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	47	9	add
1043	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	47	13	add
1044	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	47	13	add
1045	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  >=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  >=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	47	13	add
1046	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  >=  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  >=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  >=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	47	13	add
1047	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	47	None	add
1048	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	47	None	add
1049	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  >>  Token.FUNCTION);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  >>  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  >>  Token.FUNCTION);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	47	None	add
1050	[BUG]  [BUGGY]  Preconditions.checkState(n  >=  null);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n  >=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n  >=  null);	  Preconditions.checkState(n!=    null);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	16	None	replace
1051	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	7	13	replace
1052	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	7	13	replace
1053	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	7	13	replace
1054	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	7	13	replace
1055	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	7	13	replace
1056	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	7	13	replace
1057	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	245	None	replace
1058	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	245	None	replace
1059	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	222	13	add
1060	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	222	13	add
1061	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	222	13	add
1062	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	222	13	add
1063	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Node  parent  =  n.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Node  parent  =  n.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Node  parent  =  n.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	222	None	add
1064	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	222	None	add
1065	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	222	13	add
1066	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkNotNull(parent);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	222	13	add
1067	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	222	13	add
1068	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	222	13	add
1069	[BUG]  [BUGGY]  doStatementReturn(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementReturn(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  doStatementReturn(t,    n,    parent,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	196	None	replace
1070	[BUG]  [BUGGY]  doStatementReturn(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [CE]  cannot  find  symbol  argument  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementReturn(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  argument);	  doStatementReturn(t,    n,    parent,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  argument	196	None	replace
1071	[BUG]  [BUGGY]  doStatementReturn(t,  n,  parent,  CONVERT_WHILE_TO_FOR);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementReturn(t,  n,  parent,  CONVERT_WHILE_TO_FOR);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(t,  n,  parent,  CONVERT_WHILE_TO_FOR);	  doStatementReturn(t,    n,    parent,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol	196	None	replace
1072	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  preconditions	109	None	replace
1073	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR));  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR));  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	t.getCompiler().report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR));	          t.getCompiler().reportCodeChange();    	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean)	201	None	replace
1074	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	t.getCompiler().report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));	          t.getCompiler().reportCodeChange();    	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean)	201	None	replace
1075	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  cannot  find  symbol  NON_GLOBAL_NAMES_UNIQUE  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));	          t.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_NAMES_UNIQUE	201	None	replace
1076	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  parent));  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  parent));  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	t.getCompiler().report(JSError.make(t,  n,  parent));	          t.getCompiler().reportCodeChange();    	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,Node)	201	None	replace
1077	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  parent.getModule());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  parent.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  parent.getModule());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  cannot  find  symbol	174	None	replace
1078	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getType()  ==  Token.NAME,  n.getModule());  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(t.getType()  ==  Token.NAME,  n.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(t.getType()  ==  Token.NAME,  n.getModule());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  cannot  find  symbol	174	None	replace
1079	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  t.getModule()!=  Token.VAR);  [CE]  incomparable  types:  JSModule  and  int  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  t.getModule()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  t.getModule()!=  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  incomparable  types:  JSModule  and  int	174	None	replace
1080	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	231	13	replace
1081	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	231	13	replace
1082	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	231	13	replace
1083	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	231	13	replace
1084	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	231	13	replace
1085	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	231	13	replace
1086	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	231	5	replace
1087	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	231	5	replace
1088	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	68	13	replace
1089	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	68	13	replace
1090	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	68	13	replace
1091	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	68	13	replace
1092	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  getStatementNormalizations());  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  getStatementNormalizations());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this,  getStatementNormalizations());	          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,    n,    getStatementNormalizations());    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
1093	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()!=  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	44	13	replace
1094	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()!=  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	44	13	replace
1095	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	69	13	replace
1096	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	69	13	replace
1097	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	69	13	replace
1098	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	69	13	replace
1099	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()!=  Token.NAME,  parent);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	69	12	replace
1100	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  parent);  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME,  parent);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	69	12	replace
1101	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  name);  [CE]  cannot  find  symbol  name  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  name);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  name);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  cannot  find  symbol  name	69	None	replace
1102	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  true);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME,  true);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	69	13	replace
1103	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  true);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  true);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  true);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	69	13	replace
1104	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	241	13	add
1105	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	241	13	add
1106	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	241	None	add
1107	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	241	None	add
1108	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	241	13	add
1109	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	241	13	add
1110	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	241	13	add
1111	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	241	13	add
1112	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	241	13	add
1113	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	241	13	add
1114	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	237	13	replace
1115	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	237	13	replace
1116	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	237	13	replace
1117	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	237	13	replace
1118	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  parent);  [CE]  cannot  find  symbol  Traversal  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Traversal.traverse(compiler,  n,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Traversal.traverse(compiler,  n,  parent);	          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  Traversal	116	None	replace
1119	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	NodeTraversal.traverse(compiler,  n,  null);	          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,    n,    this);    	compilable	  [FE]  RuntimeException  	116	13	replace
1120	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  null);	          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,    n,    this);    	compilable	  [FE]  RuntimeException  	116	13	replace
1121	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  true);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  true);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  true);	  doStatementNormalization(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol	191	None	replace
1122	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  false,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  false,  arguments);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  false,  arguments);	  doStatementNormalization(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	191	None	replace
1123	[BUG]  [BUGGY]  DoStatementNormalization(t,  n,  parent,  true);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  DoStatementNormalization(t,  n,  parent,  true);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	DoStatementNormalization(t,  n,  parent,  true);	  doStatementNormalization(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol	191	None	replace
1124	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	63	None	replace
1125	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	63	None	replace
1126	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	250	None	replace
1127	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this,  parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)	250	None	replace
1128	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	250	None	replace
1129	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	14	13	replace
1130	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	14	13	replace
1131	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	14	13	replace
1132	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	14	13	replace
1133	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	82	13	replace
1134	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	82	13	replace
1135	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	82	13	replace
1136	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	82	13	replace
1137	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	232	13	add
1138	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	232	13	add
1139	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	232	None	add
1140	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	232	None	add
1141	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	232	13	add
1142	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	232	13	add
1143	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	232	13	add
1144	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	232	13	add
1145	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	232	13	add
1146	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	232	13	add
1147	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n!=  null);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments!=    null);    NodeTraversal.traverse(compiler,    n,    this);    	compilable	  [FE]  RuntimeException  	117	13	replace
1148	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null);  NodeTraversal.traverse(compiler,  n,  this);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=  null);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments!=    null);    NodeTraversal.traverse(compiler,    n,    this);    	compilable	  [FE]  RuntimeException  	117	13	replace
1149	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(arguments!=  null);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(arguments!=  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(arguments!=  null);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments!=    null);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	117	None	replace
1150	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  DEPRECATED_NAMES_UNIQUE);  [CE]  cannot  find  symbol  DEPRECATED_NAMES_UNIQUE  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  DEPRECATED_NAMES_UNIQUE);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  DEPRECATED_NAMES_UNIQUE);	  doStatementNormalization(t,    n,    parent,    argumentCount);    	non-compiled	[CE]  cannot  find  symbol  DEPRECATED_NAMES_UNIQUE	95	None	replace
1151	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Node    n    =    n.getFirstChild();    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	108	None	replace
1152	[BUG]  [BUGGY]  Context.checkNotNull(n);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  Context  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkNotNull(n);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.checkNotNull(n);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkNotNull(n);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  Context	153	None	replace
1153	[BUG]  [BUGGY]  Context.checkNotNull(parent);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  Context  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkNotNull(parent);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.checkNotNull(parent);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkNotNull(n);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  Context	153	None	replace
1154	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  Context.checkNotNull(parent);  [CE]  cannot  find  symbol  Context  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  Context.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this);  Context.checkNotNull(parent);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkNotNull(n);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  Context	153	None	replace
1155	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  function.expectedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  function.expectedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  function.expectedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  NodeUtil.isFunctionDeclaration(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	156	None	replace
1156	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	  NodeUtil.isFunctionDeclaration(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	156	None	replace
1157	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  arguments.expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  arguments.expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  arguments.expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  NodeUtil.isFunctionDeclaration(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	156	None	replace
1158	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  assertOnChange:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  assertOnChange:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  assertOnChange:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  NodeUtil.isFunctionDeclaration(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	156	None	replace
1159	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  ==  return  true;  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  ==  return  true;  }  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	function()  {  arguments=Array.prototype.slice.call(arguments  ==  return  true;  }	  function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	53	None	replace
1160	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  ==  ';'  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  ==  ';'  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	function()  {  arguments=Array.prototype.slice.call(arguments  ==  ';'	  function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	53	None	replace
1161	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  ==  ';');  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  ==  ';');  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	function()  {  arguments=Array.prototype.slice.call(arguments  ==  ';');	  function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	53	None	replace
1162	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments!=  return  true;  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments!=  return  true;  }  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	function()  {  arguments=Array.prototype.slice.call(arguments!=  return  true;  }	  function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	53	None	replace
1163	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  ==  return  true;  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  ==  return  true;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	function()  {  arguments=Array.prototype.slice.call(arguments  ==  return  true;	  function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	53	None	replace
1164	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	215	13	replace
1165	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	215	13	replace
1166	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	215	13	replace
1167	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	215	13	replace
1168	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    n.getLastChild();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	149	None	replace
1169	[BUG]  [BUGGY]  Node  n  =  parent.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  parent.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  parent.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    n.getLastChild();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	149	None	replace
1170	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	38	13	replace
1171	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	38	13	replace
1172	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	243	13	add
1173	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	243	13	add
1174	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	243	13	add
1175	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	243	13	add
1176	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	243	13	add
1177	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	243	13	add
1178	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	243	None	add
1179	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	243	13	add
1180	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	243	13	add
1181	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	83	5	add
1182	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	83	5	add
1183	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()!=  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=    Token.VAR);    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()!=  Token.VAR);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	83	None	add
1184	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  preconditions.checkState(n.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  preconditions.checkState(n.getType()!=  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	83	None	add
1185	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	83	13	add
1186	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  >=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	83	13	add
1187	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]            RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=    Token.VAR);    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	83	None	add
1188	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	253	None	replace
1189	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this,  parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)	253	None	replace
1190	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	253	None	replace
1191	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentTypes);  [CE]  cannot  find  symbol  argumentTypes  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentTypes);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  argumentTypes);	  doStatementNormalizations(t,    n,    parent,    argumentNames);    	non-compiled	[CE]  cannot  find  symbol  argumentTypes	4	None	replace
1192	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	36	None	replace
1193	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                    RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	36	None	replace
1194	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());	  	compilable	  [FE]  RuntimeException  	136	13	add
1195	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());	  	compilable	  [FE]  RuntimeException  	136	13	add
1196	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.VAR,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  ==  Token.VAR,  t.getModule());	  	compilable	  [FE]  RuntimeException  	136	13	add
1197	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.VAR,  t.getModule());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.VAR,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  ==  Token.VAR,  t.getModule());	  	compilable	  [FE]  RuntimeException  	136	13	add
1198	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.DECLARATION,  t.getModule());  [CE]  cannot  find  symbol  DECLARATION  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.DECLARATION,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  ==  Token.DECLARATION,  t.getModule());	  	non-compiled	[CE]  cannot  find  symbol  DECLARATION	136	None	add
1199	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentMap,  false);  [CE]  cannot  find  symbol  argumentMap  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentMap,  false);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  argumentMap,  false);	  doStatementNormalizations(t,    n,    parent,    arguments,    false);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	89	None	replace
1200	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n  ==  null);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n  ==  null);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n  ==  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n    ==    null);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n  ==  null);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	19	None	add
1201	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n!=  null);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n  ==  null);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n    ==    null);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n!=  null);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	19	None	add
1202	[BUG]  [BUGGY]  Préconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  Pr  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Préconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Préconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  Pr	66	None	replace
1203	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(function  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(function  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(function	  FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  not  a  statement	54	None	replace
1204	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(function  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(function  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(function	  FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  not  a  statement	54	None	replace
1205	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(n  ==  null  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(n  ==  null  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(n  ==  null	  FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  not  a  statement	54	None	replace
1206	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	37	None	add
1207	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	224	13	add
1208	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	224	13	add
1209	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	224	13	add
1210	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	224	13	add
1211	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)||  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n)||  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.mayHaveSideEffects(n)||  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  NodeUtil.mayHaveSideEffects(n)||    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	158	None	replace
1212	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)||  parent.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n)||  parent.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.mayHaveSideEffects(n)||  parent.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  NodeUtil.mayHaveSideEffects(n)||    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	158	None	replace
1213	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  parent),  CONVERT_WHILE_TO_FOR);  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  parent),  CONVERT_WHILE_TO_FOR);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	t.getCompiler().report(JSError.make(t,  n,  parent),  CONVERT_WHILE_TO_FOR);	          t.getCompiler().reportCodeChange();    	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,Node)	201	None	replace
1214	[BUG]  [BUGGY]  Preconditions.checkState(arguments  ==  null  &&  arguments.length  >  0)  {  NodeTraversal.traverse(compiler,  n,  this);  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(arguments  ==  null  &&  arguments.length  >  0)  {  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(arguments  ==  null  &&  arguments.length  >  0)  {  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments!=    null    &&    arguments.length    >    0)    {    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  ';'  expected	120	None	replace
1215	[BUG]  [BUGGY]  Context.checkState(arguments!=  null  &&  arguments.length  >  0)  {  NodeTraversal.traverse(compiler,  n,  this);  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(arguments!=  null  &&  arguments.length  >  0)  {  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.checkState(arguments!=  null  &&  arguments.length  >  0)  {  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments!=    null    &&    arguments.length    >    0)    {    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  ';'  expected	120	None	replace
1216	[BUG]  [BUGGY]  Preconditions.checkState(!isNormalized(),  n);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(!isNormalized(),  n);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(!isNormalized(),  n);	  Preconditions.checkState(!isNormalized());    	non-compiled	[CE]  cannot  find  symbol	217	None	replace
1217	[BUG]  [BUGGY]  Preconditions.checkState(!isNormalized(),  false);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(!isNormalized(),  false);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(!isNormalized(),  false);	  Preconditions.checkState(!isNormalized());    	non-compiled	[CE]  cannot  find  symbol	217	None	replace
1218	[BUG]  [BUGGY]  Preconditions.checkState(!isNormalized()  &&  parent!=  null);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(!isNormalized()  &&  parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(!isNormalized()  &&  parent!=  null);	  Preconditions.checkState(!isNormalized());    	non-compiled	[CE]  cannot  find  symbol	217	None	replace
1219	[BUG]  [BUGGY]  Preconditions.checkState(arguments!=  null  &&  arguments.length  >  0);  [CE]  cannot  find  symbol  arguments  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(arguments!=  null  &&  arguments.length  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(arguments!=  null  &&  arguments.length  >  0);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments!=    null    &&    arguments.length    >    0);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	121	None	replace
1220	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.length  >  0);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  length  [FE]                    RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.length  >  0);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent!=  null  &&  parent.length  >  0);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments!=    null    &&    arguments.length    >    0);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  length	121	None	replace
1221	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	215	13	replace
1222	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	215	13	replace
1223	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(n.getType()    ==    Token.FOR);    	compilable	  [FE]  RuntimeException  	172	13	replace
1224	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(n.getType()    ==    Token.FOR);    	compilable	  [FE]  RuntimeException  	172	13	replace
1225	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  n.getFirstChild();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  n.getFirstChild();	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Node    n    =    n.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	62	None	replace
1226	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  assertOnChange:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  assertOnChange:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  assertOnChange:  function  f()  {  arguments=Array.prototype.slice.call(	          NodeUtil.isFunctionDeclaration(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	194	None	replace
1227	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	          NodeUtil.isFunctionDeclaration(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	194	None	replace
1228	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  expected:  function  f()  {  arguments=Array.prototype.slice.call(	          NodeUtil.isFunctionDeclaration(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	194	None	replace
1229	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	          NodeUtil.isFunctionDeclaration(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	194	None	replace
1230	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=  Token.NAME,  t.getModule());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    	compilable	  [FE]  RuntimeException  	174	12	replace
1231	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME,  t.getModule());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=  Token.NAME,  t.getModule());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    	compilable	  [FE]  RuntimeException  	174	12	replace
1232	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  t.getModule()!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  t.getModule()!=  null);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    	compilable	  [FE]  RuntimeException  	174	13	replace
1233	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  t.getModule()!=  null);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  t.getModule()!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  t.getModule()!=  null);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    	compilable	  [FE]  RuntimeException  	174	13	replace
1234	[BUG]  [BUGGY]  Preconditions.checkState(arguments  ==  null);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  arguments  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(arguments  ==  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(arguments  ==  null);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments    ==    null);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	118	None	replace
1235	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent  ==  null);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments    ==    null);    NodeTraversal.traverse(compiler,    n,    this);    	compilable	  [FE]  RuntimeException  	118	13	replace
1236	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  NodeTraversal.traverse(compiler,  n,  this);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent  ==  null);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments    ==    null);    NodeTraversal.traverse(compiler,    n,    this);    	compilable	  [FE]  RuntimeException  	118	13	replace
1237	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent!=  null);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments    ==    null);    NodeTraversal.traverse(compiler,    n,    this);    	compilable	  [FE]  RuntimeException  	118	13	replace
1238	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  NodeTraversal.traverse(compiler,  n,  this);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent!=  null);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments    ==    null);    NodeTraversal.traverse(compiler,    n,    this);    	compilable	  [FE]  RuntimeException  	118	13	replace
1239	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	250	None	replace
1240	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	79	None	add
1241	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  forbidChanges);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  forbidChanges);	  doStatementNormalization(t,    n,    parent,    argumentations);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	206	None	replace
1242	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  Node  n  =  parent.getFirstChild();  Preconditions.checkNotNull(n);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Node  n  =  parent.getFirstChild();  Preconditions.checkNotNull(n);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkNotNull(n);    Node  n  =  parent.getFirstChild();  Preconditions.checkNotNull(n);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	126	None	add
1243	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkNotNull(n);    Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	126	13	add
1244	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkNotNull(n);    Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	126	13	add
1245	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	227	13	replace
1246	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	227	13	replace
1247	[BUG]  [BUGGY]  doStatementDeclarations(t,  n,  parent,  null);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementDeclarations(t,  n,  parent,  null);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementDeclarations(t,  n,  parent,  null);	  doStatementDeclarations(t,    n,    parent,    argumentNames);    	non-compiled	[CE]  cannot  find  symbol	187	None	replace
1248	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  ')'  expected  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeTraversal.traverse(compiler,  n,  parent);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  ')'  expected	150	None	replace
1249	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  NodeTraversal.traverse(compiler,  n,  parent);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  ')'  expected	150	None	replace
1250	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize)  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent,  this);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize)	150	None	replace
1251	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  PROPERTY);  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  cannot  find  symbol  PROPERTY  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  PROPERTY);  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  PROPERTY);  NodeTraversal.traverse(compiler,  n,  parent);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  PROPERTY	150	None	replace
1252	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	107	13	replace
1253	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	107	13	replace
1254	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null);  Node  n  =  getNode(n);  Preconditions.checkState(n!=  null);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  null);  Node  n  =  getNode(n);  Preconditions.checkState(n!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    null);    Node  n  =  getNode(n);  Preconditions.checkState(n!=  null);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	15	None	add
1255	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(parent!=    null);    	compilable	  [FE]  RuntimeException  	18	13	replace
1256	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(parent!=    null);    	compilable	  [FE]  RuntimeException  	18	13	replace
1257	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	47	None	add
1258	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	47	9	add
1259	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	47	9	add
1260	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	235	13	replace
1261	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	235	13	replace
1262	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()!=  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	68	13	replace
1263	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()!=  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	68	13	replace
1264	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getLastChild();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  n.getLastChild();	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Node    n    =    n.getLastChild();    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	110	None	replace
1265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  nodeTraversal.traverse(compiler,  n,  getStatementNormalizations());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  nodeTraversal.traverse(compiler,  n,  getStatementNormalizations());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  nodeTraversal.traverse(compiler,  n,  getStatementNormalizations());	          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,    n,    getStatementNormalizations());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	155	None	replace
1266	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  NodeUtil.isFunctionDeclaration(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	156	None	replace
1267	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  NodeUtil.isFunctionDeclaration(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	156	None	replace
1268	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	  NodeUtil.isFunctionDeclaration(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	156	None	replace
1269	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  constantMap,  null,  false);  [CE]  cannot  find  symbol  constantMap  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  constantMap,  null,  false);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  constantMap,  null,  false);	  doStatementNormalizations(t,    n,    parent,    null,    false);    	non-compiled	[CE]  cannot  find  symbol  constantMap	90	None	replace
1270	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  values,  null,  false);  [CE]  cannot  find  symbol  values  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  values,  null,  false);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  values,  null,  false);	  doStatementNormalizations(t,    n,    parent,    null,    false);    	non-compiled	[CE]  cannot  find  symbol  values	90	None	replace
1271	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME  ||  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=  Token.NAME  ||  NodeUtil.isExpressionNode(parent));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    	compilable	  [FE]  RuntimeException  	176	12	replace
1272	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME  ||  NodeUtil.isExpressionNode(parent));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME  ||  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=  Token.NAME  ||  NodeUtil.isExpressionNode(parent));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    	compilable	  [FE]  RuntimeException  	176	12	replace
1273	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    	compilable	  [FE]  RuntimeException  	176	13	replace
1274	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    	compilable	  [FE]  RuntimeException  	176	13	replace
1275	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n!=  parent  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n!=    parent);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	168	1	replace
1276	[BUG]  [BUGGY]  Preconditions.checkState(n!=  parent  ||  n.getType()  ==  Token.NAME);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=  parent  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n!=    parent);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	168	1	replace
1277	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent,  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n!=  parent,  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n!=    parent);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	168	1	replace
1278	[BUG]  [BUGGY]  Preconditions.checkState(n!=  parent,  n.getType()  ==  Token.NAME);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent,  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=  parent,  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n!=    parent);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	168	1	replace
1279	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	6	13	add
1280	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	6	13	add
1281	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	6	None	add
1282	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(	          FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  ';'  expected	105	None	replace
1283	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  ==  Array.prototype.slice.call(  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  Expected:  function  f()  ==  Array.prototype.slice.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  Expected:  function  f()  ==  Array.prototype.slice.call(	          FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	105	None	replace
1284	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  nodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  nodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  nodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	115	None	add
1285	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  forbidChanges);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false,  forbidChanges);	  NodeTraversal.traverse(compiler,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	24	None	replace
1286	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.forbidChanges);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this.forbidChanges);	  NodeTraversal.traverse(compiler,    n,    parent,    argument);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	131	None	replace
1287	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	243	None	add
1288	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	243	13	add
1289	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	243	13	add
1290	[BUG]  [BUGGY]  DoStatementReturn(t,  n,  parent,  true);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  DoStatementReturn(t,  n,  parent,  true);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	DoStatementReturn(t,  n,  parent,  true);	  doStatementReturn(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol	197	None	replace
1291	[BUG]  [BUGGY]  doStatementReturn(n,  t,  false);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementReturn(n,  t,  false);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(n,  t,  false);	  doStatementReturn(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol	197	None	replace
1292	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	214	None	add
1293	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	214	13	add
1294	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	214	13	add
1295	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.mayHaveSideEffects(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call	  NodeUtil.mayHaveSideEffects(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	159	None	replace
1296	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize)  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent,  this);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize)	135	None	replace
1297	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  ')'  expected  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  NodeTraversal.traverse(compiler,  n,  parent);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  ')'  expected	135	None	replace
1298	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild()  +  1;  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getFirstChild()  +  1;  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getFirstChild()  +  1;	  Node    parent    =    n.getParent()    +    1;    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	57	None	replace
1299	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	241	13	add
1300	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	241	13	add
1301	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  >>  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  >>  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	148	None	replace
1302	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  localVars);  [CE]  cannot  find  symbol  localVars  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  localVars);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this,  localVars);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  localVars	22	None	replace
1303	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	compilable	  [FE]  RuntimeException  	137	13	replace
1304	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	compilable	  [FE]  RuntimeException  	137	13	replace
1305	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  t.getModule()!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  t.getModule()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	compilable	  [FE]  RuntimeException  	137	13	replace
1306	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  t.getModule()!=  null);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  t.getModule()!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  t.getModule()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	compilable	  [FE]  RuntimeException  	137	13	replace
1307	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  preconditions.checkArgument(n.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  preconditions.checkArgument(n.getType()!=  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	98	None	add
1308	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  DEFAULT_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  DEFAULT_LOCAL_NAMES_UNIQUE  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  DEFAULT_LOCAL_NAMES_UNIQUE);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  DEFAULT_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    n,    parent,    FORGIVE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_LOCAL_NAMES_UNIQUE	170	None	replace
1309	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  INVALID_TYPE);  [CE]  cannot  find  symbol  INVALID_TYPE  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  INVALID_TYPE);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  INVALID_TYPE);	  NodeTraversal.traverse(compiler,    n,    parent,    FORGIVE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  INVALID_TYPE	170	None	replace
1310	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().equals(n.getString()));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().equals(n.getString()));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.equals(n.getString()));    	compilable	  [FE]  RuntimeException  	50	13	replace
1311	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().equals(n.getString()));  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().equals(n.getString()));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().equals(n.getString()));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.equals(n.getString()));    	compilable	  [FE]  RuntimeException  	50	13	replace
1312	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  name.equals(n.getString()));  [CE]  cannot  find  symbol  name  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  name.equals(n.getString()));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  name.equals(n.getString()));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.equals(n.getString()));    	non-compiled	[CE]  cannot  find  symbol  name	50	None	replace
1313	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.equals(parent.getString()));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.equals(parent.getString()));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.equals(n.getString()));    	compilable	  [FE]  RuntimeException  	50	13	replace
1314	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.equals(parent.getString()));  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.equals(parent.getString()));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.equals(parent.getString()));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.equals(n.getString()));    	compilable	  [FE]  RuntimeException  	50	13	replace
1315	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  &&  n.getString().equals( "prototype "));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  &&  n.getString().equals( "prototype "));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.equals(n.getString()));    	compilable	  [FE]  RuntimeException  	50	13	replace
1316	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  &&  n.getString().equals( "prototype "));  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  &&  n.getString().equals( "prototype "));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  &&  n.getString().equals( "prototype "));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.equals(n.getString()));    	compilable	  [FE]  RuntimeException  	50	13	replace
1317	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  Context  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Context.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  Context	246	None	replace
1318	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	63	None	replace
1319	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  null,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  null,  arguments);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  null,  arguments);	  doStatementNormalizations(t,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	192	None	replace
1320	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  null,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  null,  forbidChanges);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  null,  forbidChanges);	  doStatementNormalizations(t,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	192	None	replace
1321	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  nodeTraversal.traverse(compiler,  n,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  nodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  nodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	116	None	replace
1322	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NEW);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NEW);	          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);    	compilable	  [FE]  RuntimeException  	31	13	replace
1323	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NEW);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NEW);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NEW);	          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);    	compilable	  [FE]  RuntimeException  	31	13	replace
1324	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkNotNull(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	138	13	add
1325	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkNotNull(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	138	13	add
1326	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  this,  argumentMap);  [CE]  cannot  find  symbol  argumentMap  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  this,  argumentMap);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  this,  argumentMap);	  doStatementNormalizations(t,    n,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	2	None	replace
1327	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getSourceName());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    	compilable	  [FE]  RuntimeException  	141	13	replace
1328	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getSourceName());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getSourceName());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    	compilable	  [FE]  RuntimeException  	141	13	replace
1329	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  t.getSourceName()!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  t.getSourceName()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    	compilable	  [FE]  RuntimeException  	141	13	replace
1330	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  t.getSourceName()!=  null);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  t.getSourceName()!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  t.getSourceName()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    	compilable	  [FE]  RuntimeException  	141	13	replace
1331	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	177	13	add
1332	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	177	13	add
1333	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Preconditions.checkState(parent  ==  null);  preconditions.checkState(parent  ==  null);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Preconditions.checkState(parent  ==  null);  preconditions.checkState(parent  ==  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent    ==    null);    Preconditions.checkState(parent  ==  null);  preconditions.checkState(parent  ==  null);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	58	None	add
1334	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getParent();  preconditions.checkState(parent!=  null);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getParent();  preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent    ==    null);    Node  parent  =  n.getParent();  preconditions.checkState(parent!=  null);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	58	None	add
1335	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	28	5	add
1336	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);Preconditions.checkArgument(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	28	5	add
1337	[BUG]  [BUGGY]  Preconditions.checkState(converter.shouldTraverse(t,  n,  parent,  arguments));  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(converter.shouldTraverse(t,  n,  parent,  arguments));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(converter.shouldTraverse(t,  n,  parent,  arguments));	  Preconditions.checkState(converter.shouldTraverse(t,    n,    parent));    	non-compiled	[CE]  cannot  find  symbol  arguments	211	None	replace
1338	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	106	None	add
1339	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.SAME);  [CE]  cannot  find  symbol  SAME  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.SAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.SAME);	  	non-compiled	[CE]  cannot  find  symbol  SAME	106	None	add
1340	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	219	13	add
1341	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	219	13	add
1342	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.CALL);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	228	13	add
1343	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.CALL);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	228	13	add
1344	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(parent.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.CALL);    Preconditions.checkArgument(parent.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	228	13	add
1345	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(parent.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(parent.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.CALL);    Preconditions.checkArgument(parent.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	228	13	add
1346	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  forbidChanges);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  forbidChanges);	  doStatementNormalizations(t,    n,    parent,    argumentations);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	213	None	replace
1347	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments	  FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	51	None	replace
1348	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	  FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	51	None	replace
1349	[BUG]  [BUGGY]  DoStatement(t,  n,  parent,  false);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  DoStatement(t,  n,  parent,  false);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	DoStatement(t,  n,  parent,  false);	  doStatement(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
1350	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent!=  null);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent!=    null);    Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent!=  null);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	17	None	add
1351	[BUG]  [BUGGY]  doStatement(t,  n,  parent,  argumentMap,  null);  [CE]  cannot  find  symbol  argumentMap  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatement(t,  n,  parent,  argumentMap,  null);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  parent,  argumentMap,  null);	  doStatement(t,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	26	None	replace
1352	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isName(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isName(n));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	162	12	replace
1353	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isName(n));  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isName(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isName(n));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	162	12	replace
1354	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetProp(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetProp(n));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	162	5	replace
1355	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetProp(n));  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetProp(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetProp(n));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	162	5	replace
1356	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	238	13	add
1357	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	238	13	add
1358	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.STRING);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	249	13	add
1359	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.STRING);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	249	13	add
1360	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	249	13	add
1361	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	249	13	add
1362	[BUG]  [BUGGY]  doStatementDeclarations(t,  n,  parent,  false);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementDeclarations(t,  n,  parent,  false);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementDeclarations(t,  n,  parent,  false);	  doStatementDeclarations(t,    n,    parent,    argumentCount);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
1363	[BUG]  [BUGGY]  Context.checkNotNull(parent);  [CE]  cannot  find  symbol  Context  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.checkNotNull(parent);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkNotNull(n);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  Context	153	None	replace
1364	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Context.checkNotNull(parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Context.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Context.checkNotNull(parent);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkNotNull(n);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	153	None	replace
1365	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getSourceName());	  	compilable	  [FE]  RuntimeException  	140	13	add
1366	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getSourceName());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getSourceName());	  	compilable	  [FE]  RuntimeException  	140	13	add
1367	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(n.getType()  ==  Token.DECLARATION,  t.getSourceName());  [CE]  cannot  find  symbol  DECLARATION  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(n.getType()  ==  Token.DECLARATION,  t.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    Preconditions.checkState(n.getType()  ==  Token.DECLARATION,  t.getSourceName());	  	non-compiled	[CE]  cannot  find  symbol  DECLARATION	140	None	add
1368	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(n.getType()  ==  Token.CALL,  t.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    Preconditions.checkState(n.getType()  ==  Token.CALL,  t.getSourceName());	  	compilable	  [FE]  RuntimeException  	140	13	add
1369	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(n.getType()  ==  Token.CALL,  t.getSourceName());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(n.getType()  ==  Token.CALL,  t.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    Preconditions.checkState(n.getType()  ==  Token.CALL,  t.getSourceName());	  	compilable	  [FE]  RuntimeException  	140	13	add
1370	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    NodeTraversal.traverse(compiler,  n,  parent);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	140	None	add
1371	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	97	13	replace
1372	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	97	13	replace
1373	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	209	13	replace
1374	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	209	13	replace
1375	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentMap,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  argumentMap  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentMap,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  argumentMap,  MAKE_LOCAL_NAMES_UNIQUE);	  doStatementNormalizations(t,    n,    parent,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	151	None	replace
1376	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  doStatementNormalizations(t,    n,    parent,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;	151	None	replace
1377	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));	  	compilable	  [FE]  RuntimeException  	161	13	add
1378	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));	  	compilable	  [FE]  RuntimeException  	161	13	add
1379	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [CE]  cannot  find  symbol  Context  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	  	non-compiled	[CE]  cannot  find  symbol  Context	161	None	add
1380	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(parent));	  	compilable	  [FE]  RuntimeException  	161	13	add
1381	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(parent));  [FE]  RuntimeException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(parent));	  	compilable	  [FE]  RuntimeException  	161	13	add
1382	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	13	add
1383	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	13	add
1384	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Node)	182	None	add
1385	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Node  n  =  parent.getParent();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Node  n  =  parent.getParent();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    Node  n  =  parent.getParent();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	165	None	add
1386	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	69	13	replace
1387	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	69	13	replace
1388	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME,  t);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	69	13	replace
1389	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  t);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	compilable	  [FE]  RuntimeException  	69	13	replace
1390	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  NAME_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  NAME_LOCAL_NAMES_UNIQUE  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  NAME_LOCAL_NAMES_UNIQUE);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  NAME_LOCAL_NAMES_UNIQUE);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  cannot  find  symbol  NAME_LOCAL_NAMES_UNIQUE	69	None	replace
1391	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  argumentMap);  [CE]  cannot  find  symbol  argumentMap  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  argumentMap);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  argumentMap);	  doStatementNormalization(t,    n,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	94	None	replace
1392	[BUG]  [BUGGY]  Preconditions.checkState(converter!=  null);  [CE]  cannot  find  symbol  converter  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(converter!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(converter!=  null);	  Preconditions.checkState(parameters!=    null);    	non-compiled	[CE]  cannot  find  symbol  converter	190	None	replace
1393	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	242	13	replace
1394	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	242	13	replace
1395	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Node  n  =  parent.getParent();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Node  n  =  parent.getParent();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Node  n  =  parent.getParent();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	230	None	add
1396	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	220	13	replace
1397	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	220	13	replace
1398	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);  preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	252	None	add
1399	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.STRING);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	252	13	add
1400	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.STRING);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	252	13	add
1401	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	73	13	replace
1402	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	73	13	replace
1403	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	73	13	replace
1404	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	73	13	replace
1405	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	72	None	add
1406	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parents,  false);  [CE]  cannot  find  symbol  parents  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalization(t,  n,  parents,  false);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parents,  false);	  doStatementNormalization(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol  parents	191	None	replace
1407	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  checkUserDeclarations);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  checkUserDeclarations);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    n,    this,    forbidChanges);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	216	None	replace
1408	[BUG]  [BUGGY]  DoStatementDeclarations(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  DoStatementDeclarations(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	DoStatementDeclarations(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);	  DoStatementDeclarations(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
1409	[BUG]  [BUGGY]  DoStatementDeclarations(t,  n,  parent,  null);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  DoStatementDeclarations(t,  n,  parent,  null);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	DoStatementDeclarations(t,  n,  parent,  null);	  DoStatementDeclarations(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
1410	[BUG]  [BUGGY]  DoStatementDeclarations(t,  n,  parent,  argumentMap);  [CE]  cannot  find  symbol  argumentMap  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  DoStatementDeclarations(t,  n,  parent,  argumentMap);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	DoStatementDeclarations(t,  n,  parent,  argumentMap);	  DoStatementDeclarations(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	125	None	replace
1411	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isExpressionNode(parent));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	164	13	replace
1412	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isExpressionNode(parent));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isExpressionNode(parent));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	164	13	replace
1413	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	74	None	add
1414	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	74	None	add
1415	[BUG]  [BUGGY]  Preconditions.checkState(arguments!=  null);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  arguments  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(arguments!=  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(arguments!=  null);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments!=    null);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	117	None	replace
1416	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR,  null);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR,    arguments);    	compilable	  [FE]  RuntimeException  	199	13	replace
1417	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  null);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR,  null);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR,    arguments);    	compilable	  [FE]  RuntimeException  	199	13	replace
1418	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));	  	compilable	  [FE]  RuntimeException  	163	13	add
1419	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));	  	compilable	  [FE]  RuntimeException  	163	13	add
1420	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));	  	compilable	  [FE]  RuntimeException  	163	13	add
1421	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));	  	compilable	  [FE]  RuntimeException  	163	13	add
1422	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FOR  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(n.getType()  ==  Token.FOR  ||  NodeUtil.isFunctionDeclaration(n));	  	compilable	  [FE]  RuntimeException  	163	13	add
1423	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FOR  ||  NodeUtil.isFunctionDeclaration(n));  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  Preconditions.checkArgument(n.getType()  ==  Token.FOR  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    NodeUtil.isFunctionDeclaration(n));    Preconditions.checkArgument(n.getType()  ==  Token.FOR  ||  NodeUtil.isFunctionDeclaration(n));	  	compilable	  [FE]  RuntimeException  	163	13	add
1424	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.STRING,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkArgument(n.getType()  ==  Token.STRING,  t.getModule());	  	compilable	  [FE]  RuntimeException  	173	13	add
1425	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.STRING,  t.getModule());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.STRING,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkArgument(n.getType()  ==  Token.STRING,  t.getModule());	  	compilable	  [FE]  RuntimeException  	173	13	add
1426	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.SIGNATURE,  t.getModule());  [CE]  cannot  find  symbol  SIGNATURE  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.SIGNATURE,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkArgument(n.getType()  ==  Token.SIGNATURE,  t.getModule());	  	non-compiled	[CE]  cannot  find  symbol  SIGNATURE	173	None	add
1427	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  preconditions	109	None	replace
1428	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	147	13	add
1429	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	147	13	add
1430	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	147	None	add
1431	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	83	5	add
1432	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	83	5	add
1433	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=    Token.VAR);    NodeTraversal.traverse(compiler,  n,  parent);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	83	None	add
1434	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    n.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	39	None	replace
1435	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.length  >  0);  [CE]  cannot  find  symbol  length  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.length  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.length  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.length    >    0);    	non-compiled	[CE]  cannot  find  symbol  length	49	None	replace
1436	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  true,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  true,  forbidChanges);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  true,  forbidChanges);	  doStatementNormalizations(t,    n,    parent,    true);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	87	None	replace
1437	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	113	13	add
1438	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	113	13	add
1439	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.SAME);  [CE]  cannot  find  symbol  SAME  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.SAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.SAME);	  	non-compiled	[CE]  cannot  find  symbol  SAME	113	None	add
1440	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()  ==  Token.STRING  &&  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    Preconditions.checkArgument(n.getType()  ==  Token.STRING  &&  NodeUtil.isExpressionNode(parent));	  	compilable	  [FE]  RuntimeException  	175	13	add
1441	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()  ==  Token.STRING  &&  NodeUtil.isExpressionNode(parent));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()  ==  Token.STRING  &&  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    Preconditions.checkArgument(n.getType()  ==  Token.STRING  &&  NodeUtil.isExpressionNode(parent));	  	compilable	  [FE]  RuntimeException  	175	13	add
1442	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.length  >  0);  [CE]  cannot  find  symbol  length  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.length  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.length  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    ||    arguments.length    >    0);    	non-compiled	[CE]  cannot  find  symbol  length	100	None	replace
1443	[BUG]  [BUGGY]  Context.checkArgument(parent.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Context  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.checkArgument(parent.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Context.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Context	212	None	replace
1444	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	247	13	add
1445	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	247	13	add
1446	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	222	13	add
1447	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	222	13	add
1448	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getParent();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  n.getParent();	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	184	None	replace
1449	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	184	None	replace
1450	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  preconditions	40	None	replace
1451	[BUG]  [BUGGY]  Preconditions.checkState(!references.isEmpty());  [CE]  cannot  find  symbol  references  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(!references.isEmpty());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(!references.isEmpty());	  Preconditions.checkState(!arguments.isEmpty());    	non-compiled	[CE]  cannot  find  symbol  references	128	None	replace
1452	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments!=  return  true;  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments!=  return  true;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	function()  {  arguments=Array.prototype.slice.call(arguments!=  return  true;	  function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	53	None	replace
1453	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  ==  true);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  ==  true);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	function()  {  arguments=Array.prototype.slice.call(arguments  ==  true);	  function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	53	None	replace
1454	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  >>  return  true;  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  >>  return  true;  }  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	function()  {  arguments=Array.prototype.slice.call(arguments  >>  return  true;  }	  function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	53	None	replace
1455	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  preconditions	10	None	replace
1456	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Node  parent  =  n.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Node  parent  =  n.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Node  parent  =  n.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	226	None	add
1457	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	226	13	add
1458	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkNotNull(parent);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	226	13	add
1459	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	226	13	add
1460	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	226	13	add
1461	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()!=    Token.VAR);    preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	81	None	add
1462	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()!=  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	81	None	add
1463	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  Token.FUNCTION);  [CE]  incomparable  types:  Node  and  int  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  incomparable  types:  Node  and  int	237	None	replace
1464	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  argumentMap,  null);  [CE]  cannot  find  symbol  argumentMap  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  argumentMap,  null);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  argumentMap,  null);	  doStatementNormalization(t,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	189	None	replace
1465	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  null,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  null,  arguments);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  null,  arguments);	  doStatementNormalization(t,    n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	189	None	replace
1466	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >>  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	43	None	add
1467	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	43	13	add
1468	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	43	13	add
1469	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	46	13	replace
1470	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	46	13	replace
1471	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  true,  false);  [CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  true,  false);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  true,  false);	  doStatementNormalizations(t,    n,    parent,    false,    argument);    	non-compiled	[CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;	91	None	replace
1472	[BUG]  [BUGGY]          t.getCompiler().reportCodeChange();  Node  t  =  n.getParent();  [CE]  variable  t  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          t.getCompiler().reportCodeChange();  Node  t  =  n.getParent();  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                t.getCompiler().reportCodeChange();    Node  t  =  n.getParent();	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	200	None	add
1473	[BUG]  [BUGGY]          t.getCompiler().reportCodeChange();  Node  t  =  parent.getParent();  [CE]  variable  t  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          t.getCompiler().reportCodeChange();  Node  t  =  parent.getParent();  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                t.getCompiler().reportCodeChange();    Node  t  =  parent.getParent();	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	200	None	add
1474	[BUG]  [BUGGY]          t.getCompiler().reportCodeChange();  Node  t  =  getCompiler();  [CE]  variable  t  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          t.getCompiler().reportCodeChange();  Node  t  =  getCompiler();  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                t.getCompiler().reportCodeChange();    Node  t  =  getCompiler();	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	200	None	add
1475	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.mayHaveSideEffects(n)&&  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  NodeUtil.mayHaveSideEffects(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	157	None	replace
1476	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  assertOnChange:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  assertOnChange:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.mayHaveSideEffects(n)&&  assertOnChange:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  NodeUtil.mayHaveSideEffects(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	157	None	replace
1477	[BUG]  [BUGGY]  n.getType()  ==  Token.VAR  ||  n.hasChildren();  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  n.getType()  ==  Token.VAR  ||  n.hasChildren();  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	n.getType()  ==  Token.VAR  ||  n.hasChildren();	          n.getType()    ==    Token.VAR;    	non-compiled	[CE]  not  a  statement	202	None	replace
1478	[BUG]  [BUGGY]  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.GETPROP;  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.GETPROP;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.GETPROP;	          n.getType()    ==    Token.VAR;    	non-compiled	[CE]  not  a  statement	202	None	replace
1479	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    NodeTraversal.traverse(compiler,  n,  parent);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	45	None	add
1480	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    NodeUtil.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
1481	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	253	None	replace
1482	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	67	13	add
1483	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	67	13	add
1484	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	67	13	add
1485	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	67	13	add
1486	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=    Token.NAME);    NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	70	None	add
1487	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	111	None	add
1488	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	223	None	replace
1489	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);  Preconditions.checkState(parent!=  null);  Preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkState(parent!=    null);    Preconditions.checkState(parent!=  null);  Preconditions.checkState(parent!=  null);	  	compilable	  [FE]  RuntimeException  	179	13	add
1490	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);  Preconditions.checkState(parent!=  null);  Preconditions.checkState(parent!=  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);  Preconditions.checkState(parent!=  null);  Preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkState(parent!=    null);    Preconditions.checkState(parent!=  null);  Preconditions.checkState(parent!=  null);	  	compilable	  [FE]  RuntimeException  	179	13	add
1491	[BUG]  [BUGGY]  NodeTraversal.Traversal.traverse(compiler,  n,  parent,  this);  [CE]  cannot  find  symbol  Traversal  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.Traversal.traverse(compiler,  n,  parent,  this);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.Traversal.traverse(compiler,  n,  parent,  this);	  NodeTraversal.Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  Traversal	52	None	replace
1492	[BUG]  [BUGGY]  NodeTraversal.Traversal.traverse(compiler,  n,  parent,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.Traversal.traverse(compiler,  n,  parent,  forbidChanges);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.Traversal.traverse(compiler,  n,  parent,  forbidChanges);	  NodeTraversal.Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	52	None	replace
1493	[BUG]  [BUGGY]  NodeTraversal.Traversal.traverse(compiler,  n,  parent,  false);  [CE]  cannot  find  symbol  Traversal  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.Traversal.traverse(compiler,  n,  parent,  false);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.Traversal.traverse(compiler,  n,  parent,  false);	  NodeTraversal.Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  Traversal	52	None	replace
1494	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  noStatementNormalizations(t,  n,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  noStatementNormalizations(t,  n,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  noStatementNormalizations(t,  n,  parent);	          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,    n,    this);    noStatementNormalizations(t,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	154	None	replace
1495	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  false,  null);  [CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  false,  null);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  false,  null);	  doStatementNormalizations(t,    n,    parent,    false,    forbidChanges);    	non-compiled	[CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;	160	None	replace
1496	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  false,  true);  [CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  false,  true);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  false,  true);	  doStatementNormalizations(t,    n,    parent,    false,    forbidChanges);    	non-compiled	[CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;	160	None	replace
1497	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild().getPrevious();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getFirstChild().getPrevious();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getFirstChild().getPrevious();	  Node    parent    =    n.getFirstChild().getNext();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	185	None	replace
1498	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.length  >  0);  [CE]  cannot  find  symbol  length  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.length  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.length  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    arguments.length    >    0);    	non-compiled	[CE]  cannot  find  symbol  length	240	None	replace
1499	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  &&  arguments.length  >  0);  [CE]  cannot  find  symbol  arguments  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  &&  arguments.length  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  &&  arguments.length  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    arguments.length    >    0);    	non-compiled	[CE]  cannot  find  symbol  arguments	240	None	replace
1500	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  Context  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Context.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  Context	218	None	replace
1501	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  [Delete]  Token.FUNCTION);  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  [Delete]  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  [Delete]  Token.FUNCTION);	  	non-compiled	[CE]  ')'  expected	13	None	add
1502	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	13	13	add
1503	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	13	13	add
1504	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	233	9	replace
1505	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	233	9	replace
1506	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkState(parent);  Preconditions.checkNotNull(parent);  [CE]  no  suitable  method  found  for  checkState(Node)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkState(parent);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkNotNull(parent);    Preconditions.checkState(parent);  Preconditions.checkNotNull(parent);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(Node)	30	None	add
1507	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(parent);  Preconditions.checkNotNull(parent);  [CE]  no  suitable  method  found  for  checkArgument(Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(parent);  Preconditions.checkNotNull(parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent);  Preconditions.checkNotNull(parent);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Node)	30	None	add
1508	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	208	None	add
1509	[BUG]  [BUGGY]  Context.checkState(arguments!=  null);  [CE]  cannot  find  symbol  arguments  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(arguments!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.checkState(arguments!=  null);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(arguments!=    null);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	119	None	replace
1510	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(arguments!=  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]                RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(arguments!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Context.checkState(arguments!=  null);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(arguments!=    null);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	119	None	replace
1511	[BUG]  [BUGGY]  Preconditions.checkState(n!=  parent);  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent);  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    parent);    NodeTraversal.traverse(compiler,  n,  parent);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	167	None	add
1512	[BUG]  [BUGGY]  Preconditions.checkState(n!=  parent);  NodeUtil.checkState(n!=  parent);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent);  NodeUtil.checkState(n!=  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    parent);    NodeUtil.checkState(n!=  parent);	  	non-compiled	[CE]  cannot  find  symbol	167	None	add
1513	[BUG]  [BUGGY]  Preconditions.checkState(n!=  parent);  Preconditions.checkState(n  >>  parent);  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent);  Preconditions.checkState(n  >>  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    parent);    Preconditions.checkState(n  >>  parent);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	167	None	add
1514	[BUG]  [BUGGY]  doStatement(t,  n,  parent,  DEFAULT_WHILE_TO_FOR);  [CE]  cannot  find  symbol  DEFAULT_WHILE_TO_FOR  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatement(t,  n,  parent,  DEFAULT_WHILE_TO_FOR);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  parent,  DEFAULT_WHILE_TO_FOR);	  doStatement(t,    n,    parent,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_WHILE_TO_FOR	144	None	replace
1515	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  n);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	139	13	replace
1516	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  n);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  n);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	139	13	replace
1517	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getReturnType());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getReturnType());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getReturnType());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
1518	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getDeclaration());  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getDeclaration());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getDeclaration());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
1519	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getName());  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getName());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
1520	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          t.getCompiler().reportCodeChange();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                t.getCompiler().reportCodeChange();    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	200	13	add
1521	[BUG]  [BUGGY]          t.getCompiler().reportCodeChange();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          t.getCompiler().reportCodeChange();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                t.getCompiler().reportCodeChange();    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	200	13	add
1522	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          t.getCompiler().reportCodeChange();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                t.getCompiler().reportCodeChange();    Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	200	13	add
1523	[BUG]  [BUGGY]          t.getCompiler().reportCodeChange();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          t.getCompiler().reportCodeChange();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                t.getCompiler().reportCodeChange();    Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	200	13	add
1524	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	165	13	add
1525	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	165	13	add
1526	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  Context  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  cannot  find  symbol  Context	165	None	add
1527	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	252	13	add
1528	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	252	13	add
1529	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	252	13	add
1530	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	252	13	add
1531	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  t.getCompiler().reportCodeChange();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  RuntimeException  	138	13	add
1532	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  t.getCompiler().reportCodeChange();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  t.getCompiler().reportCodeChange();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  RuntimeException  	138	13	add
1533	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  Context  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Context.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  Context	218	None	replace
1534	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	85	13	add
1535	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	85	13	add
1536	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	85	13	add
1537	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	85	13	add
1538	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	85	13	add
1539	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	85	13	add
1540	[BUG]  [BUGGY]  Preconditions.checkState(!isNormalized()  ||  n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(!isNormalized()  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(!isNormalized()  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(!isNormalized());    	non-compiled	[CE]  cannot  find  symbol	217	None	replace
1541	[BUG]  [BUGGY]  Preconditions.checkState(!isNormalized()  ||  n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(!isNormalized()  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(!isNormalized()  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(!isNormalized());    	non-compiled	[CE]  cannot  find  symbol	217	None	replace
1542	[BUG]  [BUGGY]  Preconditions.checkArgument(!isNormalized());  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(!isNormalized());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(!isNormalized());	  Preconditions.checkState(!isNormalized());    	non-compiled	[CE]  cannot  find  symbol	217	None	replace
1543	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	220	13	replace
1544	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	220	13	replace
1545	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Node    n    =    n.getFirstChild();    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	76	None	replace
1546	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  constantMap);  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  constantMap  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  constantMap);  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this,  constantMap);  Context.checkState(n.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  constantMap	254	None	replace
1547	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	226	13	add
1548	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	226	13	add
1549	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	226	13	add
1550	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	226	13	add
1551	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	226	13	add
1552	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	226	13	add
1553	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(arguments!=  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(arguments!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.checkState(arguments!=  null);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments!=    null);    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	117	None	replace
1554	[BUG]  [BUGGY]  doStatementReturn(t,  n,  parent,  argumentList);  [CE]  cannot  find  symbol  argumentList  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementReturn(t,  n,  parent,  argumentList);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(t,  n,  parent,  argumentList);	  doStatementReturn(t,    n,    parent,    argumentSet);    	non-compiled	[CE]  cannot  find  symbol  argumentList	104	None	replace
1555	[BUG]  [BUGGY]  Node  parent  =  n.removeFirstChild();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.removeFirstChild();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.removeFirstChild();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	55	None	replace
1556	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  state.getParent());  [CE]  cannot  find  symbol  state  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  state.getParent());  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  state.getParent());	  doStatementNormalizations(t,    n,    parent,    str);    	non-compiled	[CE]  cannot  find  symbol  state	207	None	replace
1557	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  nodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  nodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        NodeTraversal.traverse(compiler,    n,    this);    nodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	115	None	add
1558	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.T  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.T  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.T	  	non-compiled	[CE]  ')'  expected	147	None	add
1559	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.MOVED);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.MOVED);	  	non-compiled	[CE]  cannot  find  symbol  MOVED	147	None	add
1560	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	147	13	add
1561	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	147	13	add
1562	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	73	13	replace
1563	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	73	13	replace
1564	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	209	12	replace
1565	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	209	12	replace
1566	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  parent);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	209	13	replace
1567	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  parent);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  parent);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	209	13	replace
1568	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	215	13	replace
1569	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	215	13	replace
1570	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	13	13	add
1571	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	13	13	add
1572	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  false,  argumentMap);  [CE]  cannot  find  symbol  argumentMap  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  false,  argumentMap);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  false,  argumentMap);	  doStatementNormalizations(t,    n,    parent,    false,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	88	None	replace
1573	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	222	13	add
1574	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	222	13	add
1575	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	222	13	add
1576	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	222	13	add
1577	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	222	13	add
1578	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	222	13	add
1579	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	222	13	add
1580	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	222	13	add
1581	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	67	13	add
1582	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	67	13	add
1583	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.check(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.check(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.check(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol	67	None	add
1584	[BUG]  [BUGGY]  Préconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  Pr  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Préconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Préconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  Pr	12	None	replace
1585	[BUG]  [BUGGY]  Préconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Pr  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Préconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Préconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Pr	112	None	replace
1586	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	139	13	replace
1587	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	139	13	replace
1588	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(n.getType()  ==  Token.BLOCK,  t.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    Preconditions.checkState(n.getType()  ==  Token.BLOCK,  t.getSourceName());	  	compilable	  [FE]  RuntimeException  	140	13	add
1589	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(n.getType()  ==  Token.BLOCK,  t.getSourceName());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(n.getType()  ==  Token.BLOCK,  t.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    Preconditions.checkState(n.getType()  ==  Token.BLOCK,  t.getSourceName());	  	compilable	  [FE]  RuntimeException  	140	13	add
1590	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(n.getType()  ==  Token.VAR,  t.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    Preconditions.checkState(n.getType()  ==  Token.VAR,  t.getSourceName());	  	compilable	  [FE]  RuntimeException  	140	13	add
1591	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(n.getType()  ==  Token.VAR,  t.getSourceName());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  Preconditions.checkState(n.getType()  ==  Token.VAR,  t.getSourceName());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getSourceName());    Preconditions.checkState(n.getType()  ==  Token.VAR,  t.getSourceName());	  	compilable	  [FE]  RuntimeException  	140	13	add
1592	[BUG]  [BUGGY]  FunctionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	51	None	replace
1593	[BUG]  [BUGGY]  FunctionFailedError:  expected=Array.prototype.slice.call(arguments  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  expected=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  expected=Array.prototype.slice.call(arguments	  FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ')'  expected	51	None	replace
1594	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  t.getModule());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  t.getModule());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	174	None	replace
1595	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE));  [CE]  cannot  find  symbol  INVALID_NAMES_UNIQUE  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE));  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	t.getCompiler().report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE));	          t.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  INVALID_NAMES_UNIQUE	201	None	replace
1596	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.mayHaveSideEffects(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments	  NodeUtil.mayHaveSideEffects(n)||    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	158	None	replace
1597	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  constantMap);  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  constantMap  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  constantMap);  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this,  constantMap);  Context.checkState(n.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  constantMap	251	None	replace
1598	[BUG]  [BUGGY]  DoStatementDeclarations(t,  n,  parent,  argumentNames);  [CE]  cannot  find  symbol  argumentNames  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  DoStatementDeclarations(t,  n,  parent,  argumentNames);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	DoStatementDeclarations(t,  n,  parent,  argumentNames);	  DoStatementDeclarations(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentNames	125	None	replace
1599	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	166	13	replace
1600	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	166	13	replace
1601	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	166	5	replace
1602	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	166	5	replace
1603	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	166	9	replace
1604	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	166	9	replace
1605	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	241	13	add
1606	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	241	13	add
1607	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	241	13	add
1608	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	241	13	add
1609	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	237	9	replace
1610	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	237	9	replace
1611	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  preconditions	40	None	replace
1612	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	234	13	add
1613	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	234	13	add
1614	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Context  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  Context	234	None	add
1615	[BUG]  [BUGGY]  n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;	          n.getType()    ==    Token.VAR;    	non-compiled	[CE]  not  a  statement	202	None	replace
1616	[BUG]  [BUGGY]  n.getType()  ==  Token.VAR  ||  n.getString().equals( "prototype "));  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  n.getType()  ==  Token.VAR  ||  n.getString().equals( "prototype "));  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	n.getType()  ==  Token.VAR  ||  n.getString().equals( "prototype "));	          n.getType()    ==    Token.VAR;    	non-compiled	[CE]  not  a  statement	202	None	replace
1617	[BUG]  [BUGGY]  n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.CALL;  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.CALL;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.CALL;	          n.getType()    ==    Token.VAR;    	non-compiled	[CE]  not  a  statement	202	None	replace
1618	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  STRING_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  STRING_LOCAL_NAMES_UNIQUE  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  STRING_LOCAL_NAMES_UNIQUE);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  STRING_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    n,    parent,    FORGIVE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  STRING_LOCAL_NAMES_UNIQUE	170	None	replace
1619	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  INVALID_NAMES_UNIQUE);  [CE]  cannot  find  symbol  INVALID_NAMES_UNIQUE  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  INVALID_NAMES_UNIQUE);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  INVALID_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    n,    parent,    FORGIVE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  INVALID_NAMES_UNIQUE	170	None	replace
1620	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Node  parent  =  n.getParent();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Node  parent  =  n.getParent();	          Preconditions.checkNotNull(parent);    Node    parent    =    n.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	184	None	replace
1621	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	224	13	add
1622	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	224	13	add
1623	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	224	13	add
1624	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	224	13	add
1625	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	224	13	add
1626	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	224	13	add
1627	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	224	13	add
1628	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	224	13	add
1629	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	236	13	add
1630	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	236	13	add
1631	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Context.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  Context  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  Context.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    Context.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  Context	236	None	add
1632	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback)  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback());	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback)	150	None	replace
1633	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent,  false);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent,  false);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)	150	None	replace
1634	[BUG]  [BUGGY]  FunctionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(function	  FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  not  a  statement	54	None	replace
1635	[BUG]  [BUGGY]  FunctionFailedError:  expected=Array.prototype.slice.call(function  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  expected=Array.prototype.slice.call(function  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  expected=Array.prototype.slice.call(function	  FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  ')'  expected	54	None	replace
1636	[BUG]  [BUGGY]  FunctionFailedError:  function  f()  {  arguments=Array.prototype.slice.call(function  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  function  f()  {  arguments=Array.prototype.slice.call(function  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  function  f()  {  arguments=Array.prototype.slice.call(function	  FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  not  a  statement	54	None	replace
1637	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	248	13	replace
1638	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	248	13	replace
1639	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	248	13	replace
1640	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	248	13	replace
1641	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	208	13	add
1642	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	208	13	add
1643	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	208	13	add
1644	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	208	13	add
1645	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,<null>)  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this,  null);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,<null>)	22	None	replace
1646	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  nodes);  [CE]  cannot  find  symbol  nodes  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  nodes);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this,  nodes);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  nodes	22	None	replace
1647	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)||  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  NodeUtil.isFunctionDeclaration(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	156	None	replace
1648	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments	  NodeUtil.isFunctionDeclaration(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	156	None	replace
1649	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  INVALID_NAMES_UNIQUE);  [CE]  cannot  find  symbol  INVALID_NAMES_UNIQUE  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  INVALID_NAMES_UNIQUE);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  INVALID_NAMES_UNIQUE);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  cannot  find  symbol  INVALID_NAMES_UNIQUE	69	None	replace
1650	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	79	13	add
1651	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	79	13	add
1652	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.CALL);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.CALL);	          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	229	None	replace
1653	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=  Token.CALL);	          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	229	6	replace
1654	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.CALL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=  Token.CALL);	          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	229	6	replace
1655	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	113	13	add
1656	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	113	13	add
1657	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.MOVED);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.MOVED);	  	non-compiled	[CE]  cannot  find  symbol  MOVED	113	None	add
1658	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	243	13	add
1659	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	243	13	add
1660	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkType(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkType(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkType(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol	243	None	add
1661	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkVar(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkVar(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkVar(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol	243	None	add
1662	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,    n,    this);    	compilable	  [FE]  RuntimeException  	116	9	replace
1663	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,    n,    this);    	compilable	  [FE]  RuntimeException  	116	9	replace
1664	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.CALL);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	228	13	add
1665	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.CALL);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	228	13	add
1666	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(parent.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.CALL);    Preconditions.checkArgument(parent.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	228	13	add
1667	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(parent.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(parent.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.CALL);    Preconditions.checkArgument(parent.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	228	13	add
1668	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkState(parent.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.CALL);    Preconditions.checkState(parent.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	228	13	add
1669	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkState(parent.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkState(parent.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.CALL);    Preconditions.checkState(parent.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	228	13	add
1670	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkState(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.CALL);    Preconditions.checkState(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	228	13	add
1671	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkState(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);  Preconditions.checkState(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.CALL);    Preconditions.checkState(n.getType()  ==  Token.CALL);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	228	13	add
1672	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getString().length  >  0);  [CE]  cannot  find  symbol  length  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getString().length  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getString().length  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME    ||    arguments.length    >    0);    	non-compiled	[CE]  cannot  find  symbol  length	100	None	replace
1673	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	14	13	replace
1674	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	14	13	replace
1675	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	152	13	replace
1676	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	152	13	replace
1677	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	152	None	replace
1678	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(	          NodeUtil.isFunctionDeclaration(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	194	None	replace
1679	[BUG]  [BUGGY]  Préconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  Pr  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Préconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Préconditions.checkArgument(n.getType()  ==  Token.VAR);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  Pr	80	None	replace
1680	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null);  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  null);  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    null);    AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	15	None	add
1681	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null);  AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  null);  AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    null);    AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	15	None	add
1682	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null);  Node  n  =  getCurrentNode();  Preconditions.checkState(n!=  null);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  null);  Node  n  =  getCurrentNode();  Preconditions.checkState(n!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    null);    Node  n  =  getCurrentNode();  Preconditions.checkState(n!=  null);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	15	None	add
1683	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  state);  [CE]  cannot  find  symbol  state  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  state);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  state);	  doStatementNormalization(t,    n,    parent,    condition);    	non-compiled	[CE]  cannot  find  symbol  state	93	None	replace
1684	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(parent!=    null);    	compilable	  [FE]  RuntimeException  	18	13	replace
1685	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(parent!=    null);    	compilable	  [FE]  RuntimeException  	18	13	replace
1686	[BUG]  [BUGGY]  doStatement(t,  n,  parent,  DETERMINISTIC_NAMES_UNIQUE);  [CE]  cannot  find  symbol  DETERMINISTIC_NAMES_UNIQUE  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatement(t,  n,  parent,  DETERMINISTIC_NAMES_UNIQUE);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  parent,  DETERMINISTIC_NAMES_UNIQUE);	  doStatement(t,    n,    parent,    argumentCount);    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC_NAMES_UNIQUE	27	None	replace
1687	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.	  	non-compiled	[CE]  ')'  expected	111	None	add
1688	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.COLLECTION);  [CE]  cannot  find  symbol  COLLECTION  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.COLLECTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.COLLECTION);	  	non-compiled	[CE]  cannot  find  symbol  COLLECTION	111	None	add
1689	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.SYNTHETIC);  [CE]  cannot  find  symbol  SYNTHETIC  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.SYNTHETIC);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.SYNTHETIC);	  	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	111	None	add
1690	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.MOVED);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.MOVED);	  	non-compiled	[CE]  cannot  find  symbol  MOVED	111	None	add
1691	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  doStatementNormalizations(t,  n,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	NodeTraversal.traverse(compiler,  n,  this);  doStatementNormalizations(t,  n,  parent);	          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,    n,    this);    noStatementNormalizations(t,    n,    parent);    	compilable	  [FE]  RuntimeException  	154	13	replace
1692	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  doStatementNormalizations(t,  n,  parent);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  doStatementNormalizations(t,  n,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this);  doStatementNormalizations(t,  n,  parent);	          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,    n,    this);    noStatementNormalizations(t,    n,    parent);    	compilable	  [FE]  RuntimeException  	154	13	replace
1693	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  arguments,  false);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  arguments,  false);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  arguments,  false);	  doStatementNormalization(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	191	None	replace
1694	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  false,  null);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  false,  null);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  false,  null);	  doStatementNormalization(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol	191	None	replace
1695	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	37	13	add
1696	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	37	13	add
1697	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.WARNING);  [CE]  cannot  find  symbol  WARNING  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.WARNING);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.WARNING);	  	non-compiled	[CE]  cannot  find  symbol  WARNING	37	None	add
1698	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	37	13	add
1699	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	37	13	add
1700	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	70	12	add
1701	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	70	12	add
1702	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=    Token.NAME);    NodeTraversal.traverse(compiler,  n,  parent);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	70	None	add
1703	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(parent.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	70	13	add
1704	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(parent.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	70	13	add
1705	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkNotNull(n);    Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	126	13	add
1706	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkNotNull(n);    Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	126	13	add
1707	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	72	13	add
1708	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	72	13	add
1709	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	72	13	add
1710	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	72	13	add
1711	[BUG]  [BUGGY]  NodeUtil.isName(n)||  n.getType()  ==  Token.NAME;  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isName(n)||  n.getType()  ==  Token.NAME;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isName(n)||  n.getType()  ==  Token.NAME;	          NodeUtil.isFunctionDeclaration(n)||    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  not  a  statement	205	None	replace
1712	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  checkUserDeclarations);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  checkUserDeclarations);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	21	None	replace
1713	[BUG]  [BUGGY]  doStatementDeclarations(t,  n,  parent,  nameNode);  [CE]  cannot  find  symbol  nameNode  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementDeclarations(t,  n,  parent,  nameNode);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementDeclarations(t,  n,  parent,  nameNode);	  doStatementDeclarations(t,    n,    parent,    argument);    	non-compiled	[CE]  cannot  find  symbol  nameNode	123	None	replace
1714	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	13	add
1715	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	13	add
1716	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	13	add
1717	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	13	add
1718	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	13	add
1719	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	13	add
1720	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	13	add
1721	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	13	add
1722	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);  Preconditions.checkArgument(parent!=  null);  Preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkState(parent!=    null);    Preconditions.checkArgument(parent!=  null);  Preconditions.checkState(parent!=  null);	  	compilable	  [FE]  RuntimeException  	179	13	add
1723	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);  Preconditions.checkArgument(parent!=  null);  Preconditions.checkState(parent!=  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);  Preconditions.checkArgument(parent!=  null);  Preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkState(parent!=    null);    Preconditions.checkArgument(parent!=  null);  Preconditions.checkState(parent!=  null);	  	compilable	  [FE]  RuntimeException  	179	13	add
1724	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  Token.FUNCTION);  [CE]  incomparable  types:  Node  and  int  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  incomparable  types:  Node  and  int	242	None	replace
1725	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean,Normalize)  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false,  this);	  NodeTraversal.traverse(compiler,    n,    parent,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean,Normalize)	24	None	replace
1726	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	238	13	add
1727	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	238	13	add
1728	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Context.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Context  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  Context.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    Context.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  Context	238	None	add
1729	[BUG]  [BUGGY]  Node  parent  =  n.getParent()  *  1;  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getParent()  *  1;  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getParent()  *  1;	  Node    parent    =    n.getParent()    +    1;    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	57	None	replace
1730	[BUG]  [BUGGY]  Node  parent  =  n.getNext()  +  1;  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getNext()  +  1;  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getNext()  +  1;	  Node    parent    =    n.getParent()    +    1;    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	57	None	replace
1731	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	161	1	add
1732	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	161	1	add
1733	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.MOVED);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.MOVED);	  	non-compiled	[CE]  cannot  find  symbol  MOVED	106	None	add
1734	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	74	13	add
1735	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	74	13	add
1736	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	74	13	add
1737	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	74	13	add
1738	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  NodeUtil.isExpressionNode(parent));	  	compilable	  [FE]  RuntimeException  	175	13	add
1739	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  NodeUtil.isExpressionNode(parent));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  NodeUtil.isExpressionNode(parent));	  	compilable	  [FE]  RuntimeException  	175	13	add
1740	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));	  	compilable	  [FE]  RuntimeException  	175	13	add
1741	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.NAME    &&    NodeUtil.isExpressionNode(parent));    Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));	  	compilable	  [FE]  RuntimeException  	175	13	add
1742	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	6	13	add
1743	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	6	13	add
1744	[BUG]  [BUGGY]  Node  parent  =  t.getParentNode();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  t.getParentNode();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  t.getParentNode();	  Node    parent    =    n.getParentNode();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	129	None	replace
1745	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION;  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION;  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION;  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	45	None	add
1746	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    NodeUtil.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
1747	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	45	None	add
1748	[BUG]  [BUGGY]  doStatement(t,  n,  parent,  arguments,  false);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatement(t,  n,  parent,  arguments,  false);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  parent,  arguments,  false);	  doStatement(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	145	None	replace
1749	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	219	13	add
1750	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	219	13	add
1751	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node  n  =  parent.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	219	None	add
1752	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	83	5	add
1753	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	83	5	add
1754	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(parent.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(parent.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	83	13	add
1755	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(parent.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  Preconditions.checkState(parent.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=    Token.VAR);    Preconditions.checkState(parent.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	83	13	add
1756	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  INVALID_NAMES_UNIQUE);  [CE]  cannot  find  symbol  INVALID_NAMES_UNIQUE  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  INVALID_NAMES_UNIQUE);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  INVALID_NAMES_UNIQUE);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  cannot  find  symbol  INVALID_NAMES_UNIQUE	97	None	replace
1757	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	81	13	add
1758	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	81	13	add
1759	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	81	13	add
1760	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	81	13	add
1761	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	60	13	add
1762	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	60	13	add
1763	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	60	13	add
1764	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	60	13	add
1765	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.check(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.check(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.check(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
1766	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	43	13	add
1767	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	43	13	add
1768	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.MOVED);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.MOVED);	  	non-compiled	[CE]  cannot  find  symbol  MOVED	43	None	add
1769	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.TRY);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.TRY);	  	compilable	  [FE]  RuntimeException  	43	13	add
1770	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.TRY);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.TRY);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.TRY);	  	compilable	  [FE]  RuntimeException  	43	13	add
1771	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isVarDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isVarDeclaration(n));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	162	5	replace
1772	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isVarDeclaration(n));  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isVarDeclaration(n));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isVarDeclaration(n));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	162	5	replace
1773	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(parent));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	162	13	replace
1774	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(parent));  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(parent));  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(parent));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	compilable	  [FE]  RuntimeException  	162	13	replace
1775	[BUG]  [BUGGY]  doStatementReturn(t,  n,  parent,  arguments,  false);  [CE]  cannot  find  symbol  arguments  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementReturn(t,  n,  parent,  arguments,  false);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(t,  n,  parent,  arguments,  false);	  doStatementReturn(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	197	None	replace
1776	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FU  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FU  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.FUNCTION);        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FU	  	non-compiled	[CE]  ')'  expected	11	None	add
1777	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  statement);  [CE]  cannot  find  symbol  statement  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  statement);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR,  statement);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR,    arguments);    	non-compiled	[CE]  cannot  find  symbol  statement	199	None	replace
1778	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	47	9	add
1779	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	47	9	add
1780	[BUG]  [BUGGY]  TraverseTraversal.traverse(compiler,  n,  parent);  [CE]  cannot  find  symbol  TraverseTraversal  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  TraverseTraversal.traverse(compiler,  n,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	TraverseTraversal.traverse(compiler,  n,  parent);	          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,    n,    getStatementNormalizations());    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	155	None	replace
1781	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  getStatementNormalizations());  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  getStatementNormalizations());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  getStatementNormalizations());	          NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,    n,    getStatementNormalizations());    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
1782	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n!=  null  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n!=    null);    	compilable	  [FE]  RuntimeException  	16	13	replace
1783	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=  null  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n!=    null);    	compilable	  [FE]  RuntimeException  	16	13	replace
1784	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n!=  null  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n!=    null);    	compilable	  [FE]  RuntimeException  	16	13	replace
1785	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=  null  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n!=    null);    	compilable	  [FE]  RuntimeException  	16	13	replace
1786	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  null,  false,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  null,  false,  arguments);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  null,  false,  arguments);	  doStatementNormalizations(t,    n,    parent,    null,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	90	None	replace
1787	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  statements,  null,  false);  [CE]  cannot  find  symbol  statements  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  statements,  null,  false);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  statements,  null,  false);	  doStatementNormalizations(t,    n,    parent,    null,    false);    	non-compiled	[CE]  cannot  find  symbol  statements	90	None	replace
1788	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	249	13	add
1789	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                NodeTraversal.traverse(compiler,        n,        this);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	249	13	add
1790	[BUG]  [BUGGY]  FunctionFailedError:  function  f()  {  arguments=Array.prototype.call(  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  function  f()  {  arguments=Array.prototype.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  function  f()  {  arguments=Array.prototype.call(	          FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	105	None	replace
1791	[BUG]  [BUGGY]  FunctionFailedError:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  function  f()  {  arguments=Array.prototype.slice.call(	          FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	105	None	replace
1792	[BUG]  [BUGGY]  FunctionFailedError:  expected=Array.prototype.slice.call(  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  expected=Array.prototype.slice.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  expected=Array.prototype.slice.call(	          FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
1793	[BUG]  [BUGGY]  FunctionFailedError:  f()  {  arguments=Array.prototype.slice.call(  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  FunctionFailedError:  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  f()  {  arguments=Array.prototype.slice.call(	          FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  ';'  expected	105	None	replace
1794	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	28	5	add
1795	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	28	5	add
1796	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  constantMap);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  constantMap  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  constantMap);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this,  constantMap);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  constantMap	250	None	replace
1797	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  preconditions.checkArgument(n.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	250	None	replace
1798	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments!=    null    &&    arguments.length    >    0);    NodeTraversal.traverse(compiler,    n,    this);    	compilable	  [FE]  RuntimeException  	121	13	replace
1799	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments!=    null    &&    arguments.length    >    0);    NodeTraversal.traverse(compiler,    n,    this);    	compilable	  [FE]  RuntimeException  	121	13	replace
1800	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	214	13	add
1801	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	214	13	add
1802	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkType(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkType(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkType(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	214	None	add
1803	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.BLOCK,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  ==  Token.BLOCK,  t.getModule());	  	compilable	  [FE]  RuntimeException  	136	13	add
1804	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.BLOCK,  t.getModule());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.BLOCK,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  ==  Token.BLOCK,  t.getModule());	  	compilable	  [FE]  RuntimeException  	136	13	add
1805	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.CALL,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  ==  Token.CALL,  t.getModule());	  	compilable	  [FE]  RuntimeException  	136	13	add
1806	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.CALL,  t.getModule());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.CALL,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  ==  Token.CALL,  t.getModule());	  	compilable	  [FE]  RuntimeException  	136	13	add
1807	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.DEC,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  ==  Token.DEC,  t.getModule());	  	compilable	  [FE]  RuntimeException  	136	13	add
1808	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.DEC,  t.getModule());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkState(n.getType()  ==  Token.DEC,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkState(n.getType()  ==  Token.DEC,  t.getModule());	  	compilable	  [FE]  RuntimeException  	136	13	add
1809	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	46	13	replace
1810	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	46	13	replace
1811	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	230	13	add
1812	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	230	13	add
1813	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  Context  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  Context	230	None	add
1814	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	98	12	add
1815	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	98	12	add
1816	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.SAME);  [CE]  cannot  find  symbol  SAME  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.SAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.SAME);	  	non-compiled	[CE]  cannot  find  symbol  SAME	98	None	add
1817	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.BLOCK);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	98	13	add
1818	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.BLOCK);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.BLOCK);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	98	13	add
1819	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	98	12	add
1820	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	98	12	add
1821	[BUG]  [BUGGY]  Preconditions.checkState(n!=  parent);  NodeUtil.isNormalizedName(n)||  parent.getType()  ==  Token.VAR;  Preconditions.checkState(n!=  parent);  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent);  NodeUtil.isNormalizedName(n)||  parent.getType()  ==  Token.VAR;  Preconditions.checkState(n!=  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    parent);    NodeUtil.isNormalizedName(n)||  parent.getType()  ==  Token.VAR;  Preconditions.checkState(n!=  parent);	  	non-compiled	[CE]  not  a  statement	167	None	add
1822	[BUG]  [BUGGY]  Preconditions.checkState(n!=  parent);  NodeUtil.isNormalizedName(n)||  n.getType()  ==  Token.VAR;  Preconditions.checkState(n!=  parent);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent);  NodeUtil.isNormalizedName(n)||  n.getType()  ==  Token.VAR;  Preconditions.checkState(n!=  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    parent);    NodeUtil.isNormalizedName(n)||  n.getType()  ==  Token.VAR;  Preconditions.checkState(n!=  parent);	  	non-compiled	[CE]  not  a  statement	167	None	add
1823	[BUG]  [BUGGY]  Preconditions.checkState(n!=  parent);  NodeUtil.isNormalizedName(n)||  n.getType()  ==  Token.NAME;  Preconditions.checkState(n!=  parent);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent);  NodeUtil.isNormalizedName(n)||  n.getType()  ==  Token.NAME;  Preconditions.checkState(n!=  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    parent);    NodeUtil.isNormalizedName(n)||  n.getType()  ==  Token.NAME;  Preconditions.checkState(n!=  parent);	  	non-compiled	[CE]  not  a  statement	167	None	add
1824	[BUG]  [BUGGY]  Preconditions.checkState(n!=  parent);  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.traverse(compiler,  n,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent);  NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.traverse(compiler,  n,  parent);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=    parent);    NodeTraversal.traverse(compiler,  n,  parent);  Preconditions.traverse(compiler,  n,  parent);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	167	None	add
1825	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments!=  return  true);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments!=  return  true);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	function()  {  arguments=Array.prototype.slice.call(arguments!=  return  true);	  function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	53	None	replace
1826	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getFirstChild());	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	107	13	replace
1827	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getFirstChild());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getFirstChild());	          Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	107	13	replace
1828	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	247	13	add
1829	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	247	13	add
1830	[BUG]  [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkArgument(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	247	None	add
1831	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Preconditions.checkState(parent!=  null);  t.getCompiler().reportCodeChange();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent!=    null);    Preconditions.checkState(parent!=  null);  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  RuntimeException  	17	13	add
1832	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Preconditions.checkState(parent!=  null);  t.getCompiler().reportCodeChange();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Preconditions.checkState(parent!=  null);  t.getCompiler().reportCodeChange();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent!=    null);    Preconditions.checkState(parent!=  null);  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  RuntimeException  	17	13	add
1833	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.mayHaveSideEffects(n)&&  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(	  NodeUtil.mayHaveSideEffects(n)&&    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	159	None	replace
1834	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	231	9	replace
1835	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	231	9	replace
1836	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent,  ignoreChanges);  [CE]  cannot  find  symbol  ignoreChanges  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent,  ignoreChanges);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent,  ignoreChanges);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  ignoreChanges	135	None	replace
1837	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent,  parser);  [CE]  cannot  find  symbol  parser  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent,  parser);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent,  parser);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  parser	135	None	replace
1838	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  values);  [CE]  cannot  find  symbol  values  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  values);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  values);	  doStatementNormalization(t,    n,    parent,    argumentations);    	non-compiled	[CE]  cannot  find  symbol  values	206	None	replace
1839	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  false,  name);  [CE]  cannot  find  symbol  name  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  false,  name);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  false,  name);	  doStatementNormalizations(t,    n,    parent,    false,    argument);    	non-compiled	[CE]  cannot  find  symbol  name	91	None	replace
1840	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild().getParentNode();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getFirstChild().getParentNode();  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getFirstChild().getParentNode();	  Node    parent    =    n.getFirstChild().getNext();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	185	None	replace
1841	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  DEF_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  DEF_LOCAL_NAMES_UNIQUE  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalization(t,  n,  parent,  DEF_LOCAL_NAMES_UNIQUE);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  DEF_LOCAL_NAMES_UNIQUE);	  doStatementNormalization(t,    n,    parent,    name);    	non-compiled	[CE]  cannot  find  symbol  DEF_LOCAL_NAMES_UNIQUE	92	None	replace
1842	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()?  n.getString()  :  n.getString());  [CE]  no  suitable  method  found  for  checkArgument(String)  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()?  n.getString()  :  n.getString());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()?  n.getString()  :  n.getString());	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    arguments.equals(n.getString()));    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(String)	50	None	replace
1843	[BUG]  [BUGGY]  Préconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Pr  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Préconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Préconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Pr	148	None	replace
1844	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getString().length  >  0);  [CE]  cannot  find  symbol  length  [FE]            RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getString().length  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getString().length  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    arguments.length    >    0);    	non-compiled	[CE]  cannot  find  symbol  length	240	None	replace
1845	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getChildCount()  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getChildCount()  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    arguments.length    >    0);    	compilable	  [FE]  RuntimeException  	240	13	replace
1846	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getChildCount()  >  0);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getChildCount()  >  0);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getChildCount()  >  0);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    arguments.length    >    0);    	compilable	  [FE]  RuntimeException  	240	13	replace
1847	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  n  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.VAR);    Node    n    =    n.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	62	None	replace
1848	[BUG]  [BUGGY]  Preconditions.checkState(n!=  parent.getType()  ==  Token.NAME);  [CE]  incomparable  types:  Node  and  int  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n!=    parent);    	non-compiled	[CE]  incomparable  types:  Node  and  int	168	None	replace
1849	[BUG]  [BUGGY]  Preconditions.checkState(n!=  parent.getType()  ==  Token.VAR);  [CE]  incomparable  types:  Node  and  int  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n!=  parent.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(n!=    parent);    	non-compiled	[CE]  incomparable  types:  Node  and  int	168	None	replace
1850	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  constantMap);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  constantMap  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  constantMap);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this,  constantMap);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	          NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  constantMap	253	None	replace
1851	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  n.getType()!=  Token.FUNCTION;  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  n.getType()!=  Token.FUNCTION;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)||  n.getType()!=  Token.FUNCTION;	          NodeUtil.isFunctionDeclaration(n)||    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  not  a  statement	204	None	replace
1852	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.VAR;  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.VAR;  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.VAR;	          NodeUtil.isFunctionDeclaration(n)||    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  not  a  statement	203	None	replace
1853	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent!=  null);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent!=  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent    ==    null);    Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent!=  null);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	58	None	add
1854	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent  ==  null);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent  ==  null);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent    ==    null);    Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent  ==  null);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	58	None	add
1855	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkArgument(n.getType()  ==  Token.BLOCK,  t.getModule());	  	compilable	  [FE]  RuntimeException  	173	13	add
1856	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK,  t.getModule());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkArgument(n.getType()  ==  Token.BLOCK,  t.getModule());	  	compilable	  [FE]  RuntimeException  	173	13	add
1857	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.SYNCHRONIZED,  t.getModule());  [CE]  cannot  find  symbol  SYNCHRONIZED  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  Preconditions.checkArgument(n.getType()  ==  Token.SYNCHRONIZED,  t.getModule());  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.NAME,    t.getModule());    Preconditions.checkArgument(n.getType()  ==  Token.SYNCHRONIZED,  t.getModule());	  	non-compiled	[CE]  cannot  find  symbol  SYNCHRONIZED	173	None	add
1858	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.NAME);  [CE]  incomparable  types:  Node  and  int  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  incomparable  types:  Node  and  int	235	None	replace
1859	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(t.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(t.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkState(n.getType()        ==        Token.VAR);        Preconditions.checkState(n.getType()    ==    Token.VAR);Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(t.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol	65	None	add
1860	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  false,  statements);  [CE]  cannot  find  symbol  statements  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  doStatementNormalizations(t,  n,  parent,  false,  statements);  [BUGGY]        return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  false,  statements);	  doStatementNormalizations(t,    n,    parent,    false,    forbidChanges);    	non-compiled	[CE]  cannot  find  symbol  statements	160	None	replace
1861	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	239	12	replace
1862	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	239	12	replace
1863	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	239	5	replace
1864	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	239	5	replace
1865	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  Token.NAME);  [CE]  incomparable  types:  Node  and  int  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  incomparable  types:  Node  and  int	239	None	replace
1866	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n!=  parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n!=  parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	30	13	add
1867	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n!=  parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n!=  parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n!=  parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	30	13	add
1868	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n!=  parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n!=  parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	30	13	add
1869	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n!=  parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n!=  parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n!=  parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	30	13	add
1870	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n!=  parent);  Preconditions.checkArgument(n.getType()  ==  Token.THIS);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	                Preconditions.checkNotNull(parent);        Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n!=  parent);  Preconditions.checkArgument(n.getType()  ==  Token.THIS);	  	compilable	  [FE]  RuntimeException  	30	13	add
1871	[BUG]  [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n!=  parent);  Preconditions.checkArgument(n.getType()  ==  Token.THIS);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]          Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n!=  parent);  Preconditions.checkArgument(n.getType()  ==  Token.THIS);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	                Preconditions.checkNotNull(parent);        Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n!=  parent);  Preconditions.checkArgument(n.getType()  ==  Token.THIS);	  	compilable	  [FE]  RuntimeException  	30	13	add
1872	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	232	13	add
1873	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	232	13	add
1874	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  Context  [FE]      RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  Context	232	None	add
1875	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  Token.NAME);  [CE]  incomparable  types:  Node  and  int  [FE]    RuntimeException    [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  Token.NAME);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  incomparable  types:  Node  and  int	86	None	replace
1876	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	142	13	replace
1877	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	142	13	replace
