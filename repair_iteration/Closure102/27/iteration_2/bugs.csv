bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  name);  [CE]  cannot  find  symbol  name  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalizations(t,  n,  parent,  name);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  name);	  doStatementNormalizations(t,    n,    parent,    argument);    	non-compiled	[CE]  cannot  find  symbol  name	3	None	replace
2	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  this);  [CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalizations(t,  n,  parent,  this);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  this);	  doStatementNormalizations(t,    n,    parent,    argument);    	non-compiled	[CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;	3	None	replace
3	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentCount);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  argumentCount);	  doStatementNormalizations(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	1	None	replace
4	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentNames);  [CE]  cannot  find  symbol  argumentNames  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentNames);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  argumentNames);	  doStatementNormalizations(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentNames	1	None	replace
5	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  values);  [CE]  cannot  find  symbol  values  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalizations(t,  n,  parent,  values);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  values);	  doStatementNormalizations(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  values	1	None	replace
6	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	23	13	add
7	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	23	13	add
8	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	23	None	add
9	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	23	None	add
10	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	23	None	add
11	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	23	13	add
12	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	23	13	add
13	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	23	13	add
14	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	23	13	add
15	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n!=  null);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n!=  null);	      Preconditions.checkState(arguments!=    null);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	10	1	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n!=  null);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=  null);	      Preconditions.checkState(arguments!=    null);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	10	1	replace
17	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(parent!=  null);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent!=  null);	      Preconditions.checkState(arguments!=    null);    	compilable	  [FE]  RuntimeException  	10	13	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(parent!=  null);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent!=  null);	      Preconditions.checkState(arguments!=    null);    	compilable	  [FE]  RuntimeException  	10	13	replace
19	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n  ==  null);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n  ==  null);	      Preconditions.checkState(arguments!=    null);    	compilable	  [FE]  RuntimeException  	10	13	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null);  [FE]  RuntimeException  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n  ==  null);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n  ==  null);	      Preconditions.checkState(arguments!=    null);    	compilable	  [FE]  RuntimeException  	10	13	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize)  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize)	14	None	replace
22	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this,  arguments);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	14	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument);  [CE]  cannot  find  symbol  argument  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this,  argument);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  argument	14	None	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)  [FE]          RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)	14	None	replace
25	[BUG]  [BUGGY]  doStatement(t,  n,  parent,  argument);  [CE]  cannot  find  symbol  argument  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatement(t,  n,  parent,  argument);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  parent,  argument);	  doStatement(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argument	15	None	replace
26	[BUG]  [BUGGY]  doStatement(t,  n,  parent,  null);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatement(t,  n,  parent,  null);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  parent,  null);	  doStatement(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
27	[BUG]  [BUGGY]  doStatement(t,  n,  parent,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatement(t,  n,  parent,  argumentCount);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  parent,  argumentCount);	  doStatement(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	15	None	replace
28	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=  Token.VAR);	      Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	20	5	replace
29	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=  Token.VAR);	      Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	20	5	replace
30	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(parent);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	21	13	add
31	[BUG]  [BUGGY]      Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(parent);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkNotNull(parent);    Preconditions.checkNotNull(parent);	  	compilable	  [FE]  RuntimeException  	21	13	add
32	[BUG]  [BUGGY]      Preconditions.checkNotNull(parent);  Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkNotNull(parent);  Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkNotNull(parent);    Node  parent  =  n.getParent();  Preconditions.checkNotNull(parent);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	21	None	add
33	[BUG]  [BUGGY]      Preconditions.checkNotNull(parent);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkNotNull(parent);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkNotNull(parent);    Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	21	None	add
34	[BUG]  [BUGGY]      Preconditions.checkNotNull(parent);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkNotNull(parent);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkNotNull(parent);    Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	21	None	add
35	[BUG]  [BUGGY]      Preconditions.checkNotNull(parent);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]            RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkNotNull(parent);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkNotNull(parent);    Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	21	None	add
36	[BUG]  [BUGGY]      Preconditions.checkNotNull(parent);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]              RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkNotNull(parent);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkNotNull(parent);    Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	21	None	add
37	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	25	13	add
38	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	25	13	add
39	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	25	None	add
40	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	25	None	add
41	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	25	None	add
42	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]            RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	25	None	add
43	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	25	13	add
44	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	25	13	add
45	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	      Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	24	13	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	      Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	24	13	replace
47	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	      Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	24	9	replace
48	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	      Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	24	9	replace
49	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  arguments.length  >  0);  [CE]  cannot  find  symbol  arguments  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  arguments.length  >  0);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  arguments.length  >  0);	      Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  arguments	24	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  arguments.equals(n.getString()));  [CE]  cannot  find  symbol  arguments  [FE]          RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  arguments.equals(n.getString()));  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  arguments.equals(n.getString()));	      Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  arguments	24	None	replace
51	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	      	non-compiled	[CE]  not  a  statement	7	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.Traversal.traverse(compiler,  n,  parent);  [CE]  cannot  find  symbol  Traversal  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.Traversal.traverse(compiler,  n,  parent);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.Traversal.traverse(compiler,  n,  parent);	      	non-compiled	[CE]  cannot  find  symbol  Traversal	7	None	replace
53	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	function()  {  arguments=Array.prototype.slice.call(arguments	      	non-compiled	[CE]  ';'  expected	7	None	replace
54	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function	      	non-compiled	[CE]  not  a  statement	7	None	replace
55	[BUG]  [BUGGY]  Node  parent  =  n.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  parent  =  n.getLastChild();  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getLastChild();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	9	None	replace
56	[BUG]  [BUGGY]  Node  parent  =  n.getNext();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  parent  =  n.getNext();  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getNext();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	9	None	replace
57	[BUG]  [BUGGY]  Node  parent  =  n.getParent()  +  1;  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  parent  =  n.getParent()  +  1;  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getParent()  +  1;	      Node    parent    =    n.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	9	None	replace
58	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(parent  ==  null);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent  ==  null);	      Preconditions.checkState(arguments    ==    null);    	compilable	  [FE]  RuntimeException  	12	13	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  [FE]  RuntimeException  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(parent  ==  null);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent  ==  null);	      Preconditions.checkState(arguments    ==    null);    	compilable	  [FE]  RuntimeException  	12	13	replace
60	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	27	13	add
61	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	27	13	add
62	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	27	None	add
63	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  preconditions.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	27	None	add
64	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Node  parent  =  n.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	27	None	add
65	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	27	13	add
66	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	27	13	add
67	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	27	13	add
68	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	27	13	add
69	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  arguments);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  arguments);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  arguments	26	None	replace
70	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()!=  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	26	12	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	26	12	replace
72	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	26	13	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	26	13	replace
74	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	19	13	add
75	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	19	13	add
76	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	19	None	add
77	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	19	None	add
78	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	19	None	add
79	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	19	13	add
80	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	19	13	add
81	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	19	13	add
82	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	19	13	add
83	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()!=  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	28	5	replace
84	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()!=  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	28	5	replace
85	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	28	13	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	28	13	replace
87	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  true);  [CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalizations(t,  n,  parent,  true);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  true);	  doStatementNormalizations(t,    n,    parent,    false);    	non-compiled	[CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;	16	None	replace
88	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  false,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalizations(t,  n,  parent,  false,  arguments);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  false,  arguments);	  doStatementNormalizations(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	16	None	replace
89	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  arguments,  false);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalizations(t,  n,  parent,  arguments,  false);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  arguments,  false);	  doStatementNormalizations(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	16	None	replace
90	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  null,  false);  [CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalizations(t,  n,  parent,  null,  false);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  null,  false);	  doStatementNormalizations(t,    n,    parent,    false);    	non-compiled	[CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;	16	None	replace
91	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  false,  argument);  [CE]  cannot  find  symbol  argument  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalizations(t,  n,  parent,  false,  argument);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  false,  argument);	  doStatementNormalizations(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol  argument	16	None	replace
92	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  name);  [CE]  cannot  find  symbol  name  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalization(t,  n,  parent,  name);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  name);	  doStatementNormalization(t,    n,    parent,    argument);    	non-compiled	[CE]  cannot  find  symbol  name	29	None	replace
93	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  condition);  [CE]  cannot  find  symbol  condition  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalization(t,  n,  parent,  condition);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  condition);	  doStatementNormalization(t,    n,    parent,    argument);    	non-compiled	[CE]  cannot  find  symbol  condition	29	None	replace
94	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  this);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalization(t,  n,  parent,  this);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  this);	  doStatementNormalization(t,    n,    parent,    argument);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
95	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalization(t,  n,  parent,  argumentCount);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  argumentCount);	  doStatementNormalization(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	2	None	replace
96	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  argumentNames);  [CE]  cannot  find  symbol  argumentNames  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalization(t,  n,  parent,  argumentNames);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  argumentNames);	  doStatementNormalization(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentNames	2	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  arguments);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  arguments);	      Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  arguments	18	None	replace
98	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()!=  Token.NAME);	      Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	12	replace
99	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()!=  Token.NAME);	      Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	12	replace
100	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  arguments.length  >  0);  [CE]  cannot  find  symbol  arguments  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  arguments.length  >  0);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  arguments.length  >  0);	      Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  arguments	18	None	replace
101	[BUG]  [BUGGY]  doStatementReturn(t,  n,  parent,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementReturn(t,  n,  parent,  arguments);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(t,  n,  parent,  arguments);	  doStatementReturn(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  arguments	5	None	replace
102	[BUG]  [BUGGY]  doStatementReturn(t,  n,  parent,  argument);  [CE]  cannot  find  symbol  argument  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementReturn(t,  n,  parent,  argument);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(t,  n,  parent,  argument);	  doStatementReturn(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argument	5	None	replace
103	[BUG]  [BUGGY]  doStatementReturn(t,  n,  parent,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementReturn(t,  n,  parent,  argumentCount);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(t,  n,  parent,  argumentCount);	  doStatementReturn(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	5	None	replace
104	[BUG]  [BUGGY]  doStatementReturn(t,  n,  parent,  argumentSet);  [CE]  cannot  find  symbol  argumentSet  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementReturn(t,  n,  parent,  argumentSet);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(t,  n,  parent,  argumentSet);	  doStatementReturn(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argumentSet	5	None	replace
105	[BUG]  [BUGGY]      FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	6	None	add
106	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	13	add
107	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	13	add
108	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Node  n  =  n.getFirstChild();  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	17	None	add
109	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	17	None	add
110	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Node  n  =  n.getLastChild();  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	17	None	add
111	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	13	add
112	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	13	add
113	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	13	add
114	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	13	add
115	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	13	13	add
116	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	13	13	add
117	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(arguments!=  null);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  arguments  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(arguments!=  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments!=  null);  NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  cannot  find  symbol  arguments	13	None	add
118	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(arguments  ==  null);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  arguments  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(arguments  ==  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments  ==  null);  NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  cannot  find  symbol  arguments	13	None	add
119	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Context.checkState(arguments!=  null);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  arguments  [FE]          RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Context.checkState(arguments!=  null);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(arguments!=  null);  NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  cannot  find  symbol  arguments	13	None	add
120	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(arguments!=  null  &&  arguments.length  >  0)  {  NodeTraversal.traverse(compiler,  n,  this);  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(arguments!=  null  &&  arguments.length  >  0)  {  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments!=  null  &&  arguments.length  >  0)  {  NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  ';'  expected	13	None	add
121	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(arguments!=  null  &&  arguments.length  >  0);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  arguments  [FE]              RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(arguments!=  null  &&  arguments.length  >  0);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(arguments!=  null  &&  arguments.length  >  0);  NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  cannot  find  symbol  arguments	13	None	add
122	[BUG]  [BUGGY]  doStatementDeclarations(t,  n,  parent,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementDeclarations(t,  n,  parent,  arguments);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementDeclarations(t,  n,  parent,  arguments);	  doStatementDeclarations(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  arguments	4	None	replace
123	[BUG]  [BUGGY]  doStatementDeclarations(t,  n,  parent,  argument);  [CE]  cannot  find  symbol  argument  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementDeclarations(t,  n,  parent,  argument);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementDeclarations(t,  n,  parent,  argument);	  doStatementDeclarations(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argument	4	None	replace
124	[BUG]  [BUGGY]  doStatementDeclarations(t,  n,  parent,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementDeclarations(t,  n,  parent,  argumentCount);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementDeclarations(t,  n,  parent,  argumentCount);	  doStatementDeclarations(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	4	None	replace
125	[BUG]  [BUGGY]  DoStatementDeclarations(t,  n,  parent,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  DoStatementDeclarations(t,  n,  parent,  arguments);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	DoStatementDeclarations(t,  n,  parent,  arguments);	  doStatementDeclarations(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  arguments	4	None	replace
126	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkNotNull(n);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkNotNull(n);	      Preconditions.checkNotNull(parent);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	22	1	replace
127	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkNotNull(n);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkNotNull(n);	      Preconditions.checkNotNull(parent);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	22	1	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(!arguments.isEmpty());  [CE]  cannot  find  symbol  arguments  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(!arguments.isEmpty());  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(!arguments.isEmpty());	      Preconditions.checkNotNull(parent);    	non-compiled	[CE]  cannot  find  symbol  arguments	22	None	replace
129	[BUG]  [BUGGY]  Node  parent  =  n.getParentNode();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  parent  =  n.getParentNode();  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getParentNode();	      Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	11	None	replace
130	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  arguments);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  arguments	8	None	replace
131	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argument);  [CE]  cannot  find  symbol  argument  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argument);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argument);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argument	8	None	replace
132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap);  [CE]  cannot  find  symbol  argumentMap  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argumentMap);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	8	None	replace
133	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentCount);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argumentCount);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	8	None	replace
134	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	27	None	add
135	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  n,  parent);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	27	None	add
136	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	26	13	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	26	13	replace
138	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()  ==  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	26	13	replace
139	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	26	13	replace
140	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	26	13	replace
141	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getSourceName());	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	26	13	replace
142	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	19	None	add
143	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	19	None	add
144	[BUG]  [BUGGY]  doStatement(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatement(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);	  doStatement(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
145	[BUG]  [BUGGY]  doStatement(t,  n,  parent,  false);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatement(t,  n,  parent,  false);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  parent,  false);	  doStatement(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
146	[BUG]  [BUGGY]  doStatement(t,  n,  parent,  argumentMap);  [CE]  cannot  find  symbol  argumentMap  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatement(t,  n,  parent,  argumentMap);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatement(t,  n,  parent,  argumentMap);	  doStatement(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	15	None	replace
147	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	25	13	add
148	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	25	13	add
149	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	25	None	add
150	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  n,  parent);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	25	None	add
151	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalizations(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);	  doStatementNormalizations(t,    n,    parent,    argument);    	non-compiled	[CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;	3	None	replace
152	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);  preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	17	None	add
153	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Context.checkNotNull(n);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  Context  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Context.checkNotNull(n);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        NodeTraversal.traverse(compiler,    n,    this);    Context.checkNotNull(n);  NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  cannot  find  symbol  Context	13	None	add
154	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  noStatementNormalizations(t,  n,  parent);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  noStatementNormalizations(t,  n,  parent);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  noStatementNormalizations(t,  n,  parent);	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
155	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  getStatementNormalizations());  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  getStatementNormalizations());  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  getStatementNormalizations());	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
156	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	      	non-compiled	[CE]  not  a  statement	7	None	replace
157	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.mayHaveSideEffects(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	      	non-compiled	[CE]  not  a  statement	7	None	replace
158	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)||  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(n)||  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.mayHaveSideEffects(n)||  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	      	non-compiled	[CE]  not  a  statement	7	None	replace
159	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeUtil.mayHaveSideEffects(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	      	non-compiled	[CE]  not  a  statement	7	None	replace
160	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  false,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalizations(t,  n,  parent,  false,  forbidChanges);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  false,  forbidChanges);	  doStatementNormalizations(t,    n,    parent,    false);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	16	None	replace
161	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	      Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	24	1	replace
162	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	      Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	24	1	replace
163	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));	      Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	24	13	replace
164	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));	      Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	24	13	replace
165	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	      Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	24	13	replace
166	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	      Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	24	13	replace
167	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n!=  parent);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n!=  parent);	      Preconditions.checkNotNull(parent);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	22	1	replace
168	[BUG]  [BUGGY]  Preconditions.checkState(n!=  parent);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n!=  parent);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n!=  parent);	      Preconditions.checkNotNull(parent);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	22	1	replace
169	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  forbidChanges);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  forbidChanges);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	8	None	replace
170	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  FORGIVE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  FORGIVE_LOCAL_NAMES_UNIQUE  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  FORGIVE_LOCAL_NAMES_UNIQUE);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  FORGIVE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  FORGIVE_LOCAL_NAMES_UNIQUE	8	None	replace
171	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	23	None	add
172	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.FOR);  [CE]  cannot  find  symbol  preconditions  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.FOR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(n.getType()  ==  Token.FOR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	23	None	add
173	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());	      Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	13	replace
174	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());	      Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	13	replace
175	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));	      Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	13	replace
176	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(parent));	      Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	13	replace
177	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(parent.getType()  ==  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	28	13	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	28	13	replace
179	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkNotNull(parent);  Preconditions.checkState(parent!=  null);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);	  	compilable	  [FE]  RuntimeException  	21	13	add
180	[BUG]  [BUGGY]      Preconditions.checkNotNull(parent);  Preconditions.checkState(parent!=  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkNotNull(parent);  Preconditions.checkState(parent!=  null);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkNotNull(parent);    Preconditions.checkState(parent!=  null);	  	compilable	  [FE]  RuntimeException  	21	13	add
181	[BUG]  [BUGGY]      Preconditions.checkNotNull(parent);  Node  parent  =  n.getParent();  Preconditions.checkState(parent!=  null);  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkNotNull(parent);  Node  parent  =  n.getParent();  Preconditions.checkState(parent!=  null);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkNotNull(parent);    Node  parent  =  n.getParent();  Preconditions.checkState(parent!=  null);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	21	None	add
182	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	21	13	add
183	[BUG]  [BUGGY]      Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	21	13	add
184	[BUG]  [BUGGY]      Preconditions.checkNotNull(parent);  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkNotNull(parent);  Node  parent  =  n.getParent();  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkNotNull(parent);    Node  parent  =  n.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	21	None	add
185	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild().getNext();  [CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  parent  =  n.getFirstChild().getNext();  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Node  parent  =  n.getFirstChild().getNext();	      Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  shouldTraverse(NodeTraversal,Node,Node)	11	None	replace
186	[BUG]  [BUGGY]  doStatementDeclarations(t,  n,  parent,  argumentMap);  [CE]  cannot  find  symbol  argumentMap  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementDeclarations(t,  n,  parent,  argumentMap);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementDeclarations(t,  n,  parent,  argumentMap);	  doStatementDeclarations(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	4	None	replace
187	[BUG]  [BUGGY]  doStatementDeclarations(t,  n,  parent,  argumentNames);  [CE]  cannot  find  symbol  argumentNames  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementDeclarations(t,  n,  parent,  argumentNames);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementDeclarations(t,  n,  parent,  argumentNames);	  doStatementDeclarations(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argumentNames	4	None	replace
188	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalization(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);	  doStatementNormalization(t,    n,    parent,    argument);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
189	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  null);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalization(t,  n,  parent,  null);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  null);	  doStatementNormalization(t,    n,    parent,    argument);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(parameters!=  null);  [CE]  cannot  find  symbol  parameters  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(parameters!=  null);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(parameters!=  null);	      Preconditions.checkState(arguments!=    null);    	non-compiled	[CE]  cannot  find  symbol  parameters	10	None	replace
191	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  false);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalization(t,  n,  parent,  false);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  false);	  doStatementNormalization(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
192	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  null);  [CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalizations(t,  n,  parent,  null);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  null);	  doStatementNormalizations(t,    n,    parent,    arguments);    	non-compiled	[CE]  method  doStatementNormalizations  in  class  Normalize  cannot  be  applied  to  given  types;	1	None	replace
193	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentMap);  [CE]  cannot  find  symbol  argumentMap  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentMap);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  argumentMap);	  doStatementNormalizations(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	1	None	replace
194	[BUG]  [BUGGY]      NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        NodeUtil.isFunctionDeclaration(n)&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	6	None	add
195	[BUG]  [BUGGY]  doStatementReturn(t,  n,  parent,  argumentMap);  [CE]  cannot  find  symbol  argumentMap  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementReturn(t,  n,  parent,  argumentMap);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(t,  n,  parent,  argumentMap);	  doStatementReturn(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	5	None	replace
196	[BUG]  [BUGGY]  doStatementReturn(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementReturn(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);	  doStatementReturn(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
197	[BUG]  [BUGGY]  doStatementReturn(t,  n,  parent,  false);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementReturn(t,  n,  parent,  false);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementReturn(t,  n,  parent,  false);	  doStatementReturn(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  true);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  true);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  true);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)	14	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  arguments);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR,  arguments);	      Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  arguments	20	None	replace
200	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      t.getCompiler().reportCodeChange();  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        t.getCompiler().reportCodeChange();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	6	1	add
201	[BUG]  [BUGGY]      t.getCompiler().reportCodeChange();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      t.getCompiler().reportCodeChange();  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        t.getCompiler().reportCodeChange();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	6	1	add
202	[BUG]  [BUGGY]      n.getType()  ==  Token.VAR;  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      n.getType()  ==  Token.VAR;  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        n.getType()  ==  Token.VAR;	  	non-compiled	[CE]  not  a  statement	6	None	add
203	[BUG]  [BUGGY]      NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.VAR;  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.VAR;  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.VAR;	  	non-compiled	[CE]  not  a  statement	6	None	add
204	[BUG]  [BUGGY]      NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION;  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION;  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION;	  	non-compiled	[CE]  not  a  statement	6	None	add
205	[BUG]  [BUGGY]      NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.NAME;  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.NAME;  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.NAME;	  	non-compiled	[CE]  not  a  statement	6	None	add
206	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent,  argumentations);  [CE]  cannot  find  symbol  argumentations  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalization(t,  n,  parent,  argumentations);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalization(t,  n,  parent,  argumentations);	  doStatementNormalization(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentations	2	None	replace
207	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  str);  [CE]  cannot  find  symbol  str  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalizations(t,  n,  parent,  str);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  str);	  doStatementNormalizations(t,    n,    parent,    argument);    	non-compiled	[CE]  cannot  find  symbol  str	3	None	replace
208	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	26	13	replace
209	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	26	13	replace
210	[BUG]  [BUGGY]  doStatementDeclarations(t,  n,  parent,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementDeclarations(t,  n,  parent,  constantMap);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementDeclarations(t,  n,  parent,  constantMap);	  doStatementDeclarations(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  constantMap	4	None	replace
211	[BUG]  [BUGGY]  Preconditions.checkState(converter.shouldTraverse(t,  n,  parent));  [CE]  cannot  find  symbol  converter  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(converter.shouldTraverse(t,  n,  parent));  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(converter.shouldTraverse(t,  n,  parent));	      Preconditions.checkState(arguments!=    null);    	non-compiled	[CE]  cannot  find  symbol  converter	10	None	replace
212	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Context.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Context  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Context.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.NAME);    Context.checkArgument(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  Context	17	None	add
213	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentations);  [CE]  cannot  find  symbol  argumentations  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  doStatementNormalizations(t,  n,  parent,  argumentations);  [BUGGY]      return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	doStatementNormalizations(t,  n,  parent,  argumentations);	  doStatementNormalizations(t,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentations	1	None	replace
214	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	25	13	add
215	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	25	13	add
216	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  forbidChanges);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  this,  forbidChanges);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	14	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkState(!isNormalized());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(!isNormalized());  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(!isNormalized());	      Preconditions.checkNotNull(parent);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
218	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Context.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  Context  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Context.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Context.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  Context	23	None	add
219	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	23	13	add
220	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	23	13	add
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  force);  [CE]  cannot  find  symbol  force  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  force);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  force);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  force	8	None	replace
222	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	21	13	add
223	[BUG]  [BUGGY]      Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	21	13	add
224	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkNotNull(parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	21	13	add
225	[BUG]  [BUGGY]      Preconditions.checkNotNull(parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkNotNull(parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkNotNull(parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	21	13	add
226	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkNotNull(parent);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	21	13	add
227	[BUG]  [BUGGY]      Preconditions.checkNotNull(parent);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkNotNull(parent);  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkNotNull(parent);    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	21	13	add
228	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	21	13	add
229	[BUG]  [BUGGY]      Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkNotNull(parent);  Preconditions.checkArgument(n.getType()  ==  Token.CALL);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkNotNull(parent);    Preconditions.checkArgument(n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	21	13	add
230	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	      Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	24	13	replace
231	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	      Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	24	13	replace
232	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	24	13	replace
233	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	24	13	replace
234	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	      Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	24	13	replace
235	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	      Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	24	13	replace
236	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	      Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	20	13	replace
237	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	      Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	20	13	replace
238	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	      Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	20	13	replace
239	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	      Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	20	13	replace
240	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  arguments.length  >  0);  [CE]  cannot  find  symbol  arguments  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  arguments.length  >  0);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  arguments.length  >  0);	      Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  arguments	20	None	replace
241	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	28	13	replace
242	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	28	13	replace
243	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	27	13	add
244	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	27	13	add
245	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	27	None	add
246	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Context.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  Context  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Context.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Context.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  Context	19	None	add
247	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	19	13	add
248	[BUG]  [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        Preconditions.checkArgument(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	19	13	add
249	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	13	13	add
250	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	13	13	add
251	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Context  [FE]      RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  Context	13	None	add
252	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	add	        NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	13	13	add
253	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	13	13	add
254	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  Context  [FE]          RuntimeException    [CONTEXT]    public  boolean  shouldTraverse(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    doStatementNormalizations(t,  n,  parent);  return  true;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	101	101	1	replace	        NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  Context	13	None	add
