bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  switch(parent.getType(),  n.cloneTree())  {  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent.getType(),  n.cloneTree())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType(),  n.cloneTree())  {	  switch(n.getType(),    parent.cloneTree())    {    	non-compiled	[CE]  ')'  expected	53	None	replace
2	[BUG]  [BUGGY]  Switch(n.getType(),  parent.cloneTree())  {  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Switch(n.getType(),  parent.cloneTree())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Switch(n.getType(),  parent.cloneTree())  {	  switch(n.getType(),    parent.cloneTree())    {    	non-compiled	[CE]  ';'  expected	53	None	replace
3	[BUG]  [BUGGY]  switch(n.getType(),  n.cloneTree())  {  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  n.cloneTree())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  n.cloneTree())  {	  switch(n.getType(),    parent.cloneTree())    {    	non-compiled	[CE]  ')'  expected	53	None	replace
4	[BUG]  [BUGGY]  switch(n.getType(),  parent.cloneTree(),  arguments)  {  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  parent.cloneTree(),  arguments)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  parent.cloneTree(),  arguments)  {	  switch(n.getType(),    parent.cloneTree())    {    	non-compiled	[CE]  ')'  expected	53	None	replace
5	[BUG]  [BUGGY]  switch(n!=  null  &&  parent.getType()  ==  Token.VAR)  {  [CE]  incompatible  types  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n!=  null  &&  parent.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n!=  null  &&  parent.getType()  ==  Token.VAR)  {	  switch(parent!=    null    &&    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  incompatible  types	59	None	replace
6	[BUG]  [BUGGY]  switch(n  ==  null  &&  parent.getType()  ==  Token.VAR)  {  [CE]  incompatible  types  [FE]              RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n  ==  null  &&  parent.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n  ==  null  &&  parent.getType()  ==  Token.VAR)  {	  switch(parent!=    null    &&    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  incompatible  types	59	None	replace
7	[BUG]  [BUGGY]  switch(parent  ==  null  &&  parent.getType()  ==  Token.VAR)  {  [CE]  incompatible  types  [FE]                RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent  ==  null  &&  parent.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent  ==  null  &&  parent.getType()  ==  Token.VAR)  {	  switch(parent!=    null    &&    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  incompatible  types	59	None	replace
8	[BUG]  [BUGGY]  switch(parent!=  null  ||  parent.getType()  ==  Token.VAR)  {  [CE]  incompatible  types  [FE]                  RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent!=  null  ||  parent.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent!=  null  ||  parent.getType()  ==  Token.VAR)  {	  switch(parent!=    null    &&    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  incompatible  types	59	None	replace
9	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argument,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argument,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argument,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    n,    parent,    argument);    	non-compiled	[CE]  orphaned  case	35	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    n,    parent,    argument);    	non-compiled	[CE]  orphaned  case	35	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argument,  false);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argument,  false);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argument,  false);	  NodeTraversal.traverse(compiler,    n,    parent,    argument);    	non-compiled	[CE]  orphaned  case	35	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argument,  null);  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argument,  null);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argument,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    argument);    	non-compiled	[CE]  orphaned  case	35	None	replace
13	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  parent.getModule());  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  parent.getModule());  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  parent.getModule());	  Context.checkState(n.getType()    ==    Token.VAR,    t.getModule());    	non-compiled	[CE]  orphaned  case	91	None	replace
14	[BUG]  [BUGGY]  Context.checkState(t.getType()  ==  Token.VAR,  n.getModule());  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(t.getType()  ==  Token.VAR,  n.getModule());  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(t.getType()  ==  Token.VAR,  n.getModule());	  Context.checkState(n.getType()    ==    Token.VAR,    t.getModule());    	non-compiled	[CE]  orphaned  case	91	None	replace
15	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.VAR,  t.getModule());  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.VAR,  t.getModule());  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.VAR,  t.getModule());	  Context.checkState(n.getType()    ==    Token.VAR,    t.getModule());    	non-compiled	[CE]  orphaned  case	91	None	replace
16	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  t.getModule(),  arguments);  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  t.getModule(),  arguments);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  t.getModule(),  arguments);	  Context.checkState(n.getType()    ==    Token.VAR,    t.getModule());    	non-compiled	[CE]  orphaned  case	91	None	replace
17	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.VAR);  break;  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.VAR);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.VAR);  break;	  Context.checkState(n.getType()    ==    Token.VAR);    break;    	non-compiled	[CE]  orphaned  case	78	None	replace
18	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  arguments);  break;  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  arguments);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  arguments);  break;	  Context.checkState(n.getType()    ==    Token.VAR);    break;    	non-compiled	[CE]  orphaned  case	78	None	replace
19	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  break;  [CE]  orphaned  case  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  break;	  Context.checkState(n.getType()    ==    Token.VAR);    break;    	non-compiled	[CE]  orphaned  case	78	None	replace
20	[BUG]  [BUGGY]  Node  expr  =  parent.getNext();  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  expr  =  parent.getNext();  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  expr  =  parent.getNext();	  Node    expr    =    n.getNext();    	non-compiled	[CE]  orphaned  case	50	None	replace
21	[BUG]  [BUGGY]  switch(n.getType(),  NodeUtil.EMPTY_OBJECT_TYPE)  {  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  NodeUtil.EMPTY_OBJECT_TYPE)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  NodeUtil.EMPTY_OBJECT_TYPE)  {	  switch(n.getType(),    NodeUtil.NO_OBJECT_TYPE)    {    	non-compiled	[CE]  ')'  expected	64	None	replace
22	[BUG]  [BUGGY]  Switch(n.getType(),  NodeUtil.NO_OBJECT_TYPE)  {  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Switch(n.getType(),  NodeUtil.NO_OBJECT_TYPE)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Switch(n.getType(),  NodeUtil.NO_OBJECT_TYPE)  {	  switch(n.getType(),    NodeUtil.NO_OBJECT_TYPE)    {    	non-compiled	[CE]  ';'  expected	64	None	replace
23	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [CE]  orphaned  case  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	20	None	replace
24	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	20	None	replace
25	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	20	None	replace
26	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	20	None	replace
27	[BUG]  [BUGGY]  Node  expr  =  parent.getParent();  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  expr  =  parent.getParent();  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  expr  =  parent.getParent();	  Node    expr    =    n.getParent();    	non-compiled	[CE]  orphaned  case	51	None	replace
28	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  break;  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getLastChild();  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  n  =  n.getLastChild();  break;	  Node    n    =    n.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	23	None	replace
29	[BUG]  [BUGGY]  Node  n  =  n.getNext();  break;  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getNext();  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  n  =  n.getNext();  break;	  Node    n    =    n.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	23	None	replace
30	[BUG]  [BUGGY]  Node  n  =  n.getParent();  break;  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getParent();  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  n  =  n.getParent();  break;	  Node    n    =    n.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	23	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  arguments);  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  arguments);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  arguments);	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  orphaned  case	60	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  argument);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  argument);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  argument);	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  orphaned  case	60	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  orphaned  case	60	None	replace
34	[BUG]  [BUGGY]  Context.checkState(n.getType()  >=  Token.VAR);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  >=  Token.VAR);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  >=  Token.VAR);	  Context.checkState(n.getType()!=    Token.VAR);    	non-compiled	[CE]  orphaned  case	45	None	replace
35	[BUG]  [BUGGY]  Context.checkState(parent.getType()!=  Token.VAR);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(parent.getType()!=  Token.VAR);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(parent.getType()!=  Token.VAR);	  Context.checkState(n.getType()!=    Token.VAR);    	non-compiled	[CE]  orphaned  case	45	None	replace
36	[BUG]  [BUGGY]  switch(n.getType()  &  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]        RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType()  &  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType()  &  NodeUtil.isFunctionDeclaration(parent))  {	  switch(parent.getType()    &    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	83	None	replace
37	[BUG]  [BUGGY]  switch(t.getType()  &  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(t.getType()  &  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(t.getType()  &  NodeUtil.isFunctionDeclaration(n))  {	  switch(parent.getType()    &    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
38	[BUG]  [BUGGY]  Switch(n.getType()  &  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Switch(n.getType()  &  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Switch(n.getType()  &  NodeUtil.isFunctionDeclaration(parent))  {	  switch(parent.getType()    &    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	83	None	replace
39	[BUG]  [BUGGY]  switch(parent.getType()  &  NodeUtil.isFunctionDeclaration(n,  parent))  {  [CE]  method  isFunctionDeclaration  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent.getType()  &  NodeUtil.isFunctionDeclaration(n,  parent))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType()  &  NodeUtil.isFunctionDeclaration(n,  parent))  {	  switch(parent.getType()    &    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  method  isFunctionDeclaration  in  class  NodeUtil  cannot  be  applied  to  given  types;	83	None	replace
40	[BUG]  [BUGGY]  switch(parent.getType()  &  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent.getType()  &  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType()  &  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {	  switch(parent.getType()    &    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	83	None	replace
41	[BUG]  [BUGGY]  Switch(n.getType(),  NodeUtil.EMPTY_STRING)  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Switch(n.getType(),  NodeUtil.EMPTY_STRING)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Switch(n.getType(),  NodeUtil.EMPTY_STRING)  {	  switch(n.getType(),    NodeUtil.EMPTY_STRING)    {    	non-compiled	[CE]  ';'  expected	63	None	replace
42	[BUG]  [BUGGY]  switch(parent.getType(),  NodeUtil.EMPTY_STRING)  {  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent.getType(),  NodeUtil.EMPTY_STRING)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType(),  NodeUtil.EMPTY_STRING)  {	  switch(n.getType(),    NodeUtil.EMPTY_STRING)    {    	non-compiled	[CE]  ')'  expected	63	None	replace
43	[BUG]  [BUGGY]  switch(n.getType(),  NodeUtil.EMPTY_LIST)  {  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  NodeUtil.EMPTY_LIST)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  NodeUtil.EMPTY_LIST)  {	  switch(n.getType(),    NodeUtil.EMPTY_STRING)    {    	non-compiled	[CE]  ')'  expected	63	None	replace
44	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  CONVERT_WHILE);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  CONVERT_WHILE);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.NAME,  CONVERT_WHILE);	  Context.checkState(n.getType()    ==    Token.NAME,    CONVERT_WHILE);    	non-compiled	[CE]  orphaned  case	73	None	replace
45	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  INVALID);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  INVALID);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  INVALID);	  Context.checkState(n.getType()    ==    Token.NAME,    CONVERT_WHILE);    	non-compiled	[CE]  orphaned  case	73	None	replace
46	[BUG]  [BUGGY]  switch(n.getType(),  NodeUtil.isAssignmentOp(n))  {  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  NodeUtil.isAssignmentOp(n))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  NodeUtil.isAssignmentOp(n))  {	  switch(n.getType(),    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ')'  expected	81	None	replace
47	[BUG]  [BUGGY]  switch(n.getType(),  NodeUtil.EMPTY)  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  NodeUtil.EMPTY)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  NodeUtil.EMPTY)  {	  switch(n.getType(),    NodeUtil.NO_TYPE)    {    	non-compiled	[CE]  ')'  expected	62	None	replace
48	[BUG]  [BUGGY]  switch(n.getType(),  Token.NO_TYPE)  {  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  Token.NO_TYPE)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  Token.NO_TYPE)  {	  switch(n.getType(),    NodeUtil.NO_TYPE)    {    	non-compiled	[CE]  ')'  expected	62	None	replace
49	[BUG]  [BUGGY]  switch(n.getLastChild(),  arguments)  {  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getLastChild(),  arguments)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getLastChild(),  arguments)  {	  switch(n.getLastChild())    {    	non-compiled	[CE]  ')'  expected	27	None	replace
50	[BUG]  [BUGGY]  switch(n.getLastChild(),  parent)  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getLastChild(),  parent)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getLastChild(),  parent)  {	  switch(n.getLastChild())    {    	non-compiled	[CE]  ')'  expected	27	None	replace
51	[BUG]  [BUGGY]  Node  parent  =  n.getLastChild();  break;  [CE]  orphaned  case  [FE]                RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getLastChild();  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  parent  =  n.getLastChild();  break;	  switch(parent.getType())    {    Node    parent    =    n.getLastChild();    break;    	non-compiled	[CE]  orphaned  case	5	None	replace
52	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild();  break;  [CE]  orphaned  case  [FE]                  RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getFirstChild();  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  parent  =  n.getFirstChild();  break;	  switch(parent.getType())    {    Node    parent    =    n.getLastChild();    break;    	non-compiled	[CE]  orphaned  case	5	None	replace
53	[BUG]  [BUGGY]  parent  =  n.getLastChild();  break;  [CE]  orphaned  case  [FE]                    RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent  =  n.getLastChild();  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent  =  n.getLastChild();  break;	  switch(parent.getType())    {    Node    parent    =    n.getLastChild();    break;    	non-compiled	[CE]  orphaned  case	5	None	replace
54	[BUG]  [BUGGY]  Node  n  =  parent.getLastChild();  break;  [CE]  orphaned  case  [FE]                      RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  parent.getLastChild();  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  n  =  parent.getLastChild();  break;	  switch(parent.getType())    {    Node    parent    =    n.getLastChild();    break;    	non-compiled	[CE]  orphaned  case	5	None	replace
55	[BUG]  [BUGGY]  parent.setType(Token.NAME);  break;  [CE]  orphaned  case  [FE]                        RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent.setType(Token.NAME);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent.setType(Token.NAME);  break;	  switch(parent.getType())    {    Node    parent    =    n.getLastChild();    break;    	non-compiled	[CE]  orphaned  case	5	None	replace
56	[BUG]  [BUGGY]  Node  parent  =  n.getNext();  break;  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getNext();  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  parent  =  n.getNext();  break;	  Node    parent    =    n.getParent();    break;    	non-compiled	[CE]  orphaned  case	22	None	replace
57	[BUG]  [BUGGY]  Node  parent  =  n.getPreviousParent();  break;  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getPreviousParent();  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  parent  =  n.getPreviousParent();  break;	  Node    parent    =    n.getParent();    break;    	non-compiled	[CE]  orphaned  case	22	None	replace
58	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  switch(n.getType())  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  switch(n.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.NAME)  {  switch(n.getType())  {	  if(n.getType()    ==    Token.NAME)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
59	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  parent.getFirstChild()!=  n)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  parent.getFirstChild()!=  n)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.NAME  &&  parent.getFirstChild()!=  n)  {  switch(parent.getType())  {	  if(n.getType()    ==    Token.NAME)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
60	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETPROP)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETPROP)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETPROP)  {  switch(parent.getType())  {	  if(n.getType()    ==    Token.NAME)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
61	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  switch(n.getType())  {  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  switch(n.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(parent.getType()  ==  Token.NAME)  {  switch(n.getType())  {	  if(n.getType()    ==    Token.NAME)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
62	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  t,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  t,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  t,  MAKE_LOCAL_NAMES_UNIQUE);	  Context.checkState(n.getType()    ==    Token.NAME,    t);    	non-compiled	[CE]  orphaned  case	70	None	replace
63	[BUG]  [BUGGY]  Context.checkState(t.getType()  ==  Token.NAME,  n);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(t.getType()  ==  Token.NAME,  n);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(t.getType()  ==  Token.NAME,  n);	  Context.checkState(n.getType()    ==    Token.NAME,    t);    	non-compiled	[CE]  orphaned  case	70	None	replace
64	[BUG]  [BUGGY]  switch(n.getType(),  NodeUtil.isExpressionNode(n))  {  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  NodeUtil.isExpressionNode(n))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  NodeUtil.isExpressionNode(n))  {	  switch(n.getType(),    NodeUtil.isExpressionNode(parent))    {    	non-compiled	[CE]  ')'  expected	55	None	replace
65	[BUG]  [BUGGY]  switch(n.getType(),  NodeUtil.isForIn(parent))  {  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  NodeUtil.isForIn(parent))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  NodeUtil.isForIn(parent))  {	  switch(n.getType(),    NodeUtil.isExpressionNode(parent))    {    	non-compiled	[CE]  ')'  expected	55	None	replace
66	[BUG]  [BUGGY]  switch(n.getType(),  NodeUtil.isAssignmentOp(parent))  {  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  NodeUtil.isAssignmentOp(parent))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  NodeUtil.isAssignmentOp(parent))  {	  switch(n.getType(),    NodeUtil.isExpressionNode(parent))    {    	non-compiled	[CE]  ')'  expected	55	None	replace
67	[BUG]  [BUGGY]  Node  expr  =  parent.removeFirstChild();  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  expr  =  parent.removeFirstChild();  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  expr  =  parent.removeFirstChild();	  Node    expr    =    n.removeFirstChild();    	non-compiled	[CE]  orphaned  case	93	None	replace
68	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()!=  Token.NAME)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()!=  Token.NAME)  {  switch(parent.getType())  {	  switch(parent.getType())    {    if(parent.getType()!=    Token.NAME)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
69	[BUG]  [BUGGY]  parent.setType(Token.NAME);  [CE]  orphaned  case  [FE]              RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent.setType(Token.NAME);  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent.setType(Token.NAME);	  switch(parent.getType())    {    if(parent.getType()!=    Token.NAME)    {    switch(parent.getType())    {    	non-compiled	[CE]  orphaned  case	89	None	replace
70	[BUG]  [BUGGY]  parent.setType(Token.NAME)  {  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent.setType(Token.NAME)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent.setType(Token.NAME)  {	  switch(parent.getType())    {    if(parent.getType()!=    Token.NAME)    {    switch(parent.getType())    {    	non-compiled	[CE]  ';'  expected	89	None	replace
71	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION);  break;  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION);  break;	  Context.checkState(n.getType()    ==    Token.FUNCTION);    break;    	non-compiled	[CE]  orphaned  case	24	None	replace
72	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  arguments);  break;  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  arguments);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  arguments);  break;	  Context.checkState(n.getType()    ==    Token.FUNCTION);    break;    	non-compiled	[CE]  orphaned  case	24	None	replace
73	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());  break;  [CE]  orphaned  case  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());  break;	  Context.checkState(n.getType()    ==    Token.FUNCTION);    break;    	non-compiled	[CE]  orphaned  case	24	None	replace
74	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  break;  [CE]  orphaned  case  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  break;	  Context.checkState(n.getType()    ==    Token.FUNCTION);    break;    	non-compiled	[CE]  orphaned  case	24	None	replace
75	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  n.getFirstChild());  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  n.getFirstChild());  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  n.getFirstChild());	  Context.checkState(n.getType()    ==    Token.VAR,    arguments);    	non-compiled	[CE]  orphaned  case	44	None	replace
76	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  argument);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  argument);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  argument);	  Context.checkState(n.getType()    ==    Token.VAR,    arguments);    	non-compiled	[CE]  orphaned  case	44	None	replace
77	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  arguments,  parent);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  arguments,  parent);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  arguments,  parent);	  Context.checkState(n.getType()    ==    Token.VAR,    arguments);    	non-compiled	[CE]  orphaned  case	44	None	replace
78	[BUG]  [BUGGY]  switch(n.getType()  &  NodeUtil.isExpressionNode(parent))  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType()  &  NodeUtil.isExpressionNode(parent))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType()  &  NodeUtil.isExpressionNode(parent))  {	  switch(parent.getType()    &    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	84	None	replace
79	[BUG]  [BUGGY]  switch(t.getType()  &  NodeUtil.isExpressionNode(n))  {  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(t.getType()  &  NodeUtil.isExpressionNode(n))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(t.getType()  &  NodeUtil.isExpressionNode(n))  {	  switch(parent.getType()    &    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
80	[BUG]  [BUGGY]  Switch(n.getType()  &  NodeUtil.isExpressionNode(parent))  {  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Switch(n.getType()  &  NodeUtil.isExpressionNode(parent))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Switch(n.getType()  &  NodeUtil.isExpressionNode(parent))  {	  switch(parent.getType()    &    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  ';'  expected	84	None	replace
81	[BUG]  [BUGGY]  switch(parent.getType()  &  NodeUtil.isExpressionNode(n,  parent))  {  [CE]  method  isExpressionNode  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent.getType()  &  NodeUtil.isExpressionNode(n,  parent))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType()  &  NodeUtil.isExpressionNode(n,  parent))  {	  switch(parent.getType()    &    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  method  isExpressionNode  in  class  NodeUtil  cannot  be  applied  to  given  types;	84	None	replace
82	[BUG]  [BUGGY]  switch(parent.getType()  &  NodeUtil.isExpressionNode(n)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                  RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent.getType()  &  NodeUtil.isExpressionNode(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType()  &  NodeUtil.isExpressionNode(n)||  parent.getType()  ==  Token.FUNCTION)  {	  switch(parent.getType()    &    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	84	None	replace
83	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  event,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  event,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  event,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    n,    parent,    event);    	non-compiled	[CE]  orphaned  case	61	None	replace
84	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  event,  arguments);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  event,  arguments);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  event,  arguments);	  NodeTraversal.traverse(compiler,    n,    parent,    event);    	non-compiled	[CE]  orphaned  case	61	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  event,  expectedConst);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  event,  expectedConst);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  event,  expectedConst);	  NodeTraversal.traverse(compiler,    n,    parent,    event);    	non-compiled	[CE]  orphaned  case	61	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  event,  argument);  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  event,  argument);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  event,  argument);	  NodeTraversal.traverse(compiler,    n,    parent,    event);    	non-compiled	[CE]  orphaned  case	61	None	replace
87	[BUG]  [BUGGY]  switch(n.getType(),  NodeUtil.isVarDeclaration(parent))  {  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  NodeUtil.isVarDeclaration(parent))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  NodeUtil.isVarDeclaration(parent))  {	  switch(n.getType(),    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  ')'  expected	82	None	replace
88	[BUG]  [BUGGY]  switch(n.getType(),  NodeUtil.isName(n))  {  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  NodeUtil.isName(n))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  NodeUtil.isName(n))  {	  switch(n.getType(),    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  ')'  expected	82	None	replace
89	[BUG]  [BUGGY]  switch(n.getType(),  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {	  switch(n.getType(),    NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  ')'  expected	54	None	replace
90	[BUG]  [BUGGY]  Node  n  =  t.getNext();  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  t.getNext();  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  n  =  t.getNext();	  Node    n    =    t.getParent();    	non-compiled	[CE]  orphaned  case	31	None	replace
91	[BUG]  [BUGGY]  Context.checkState(n.getType()  >=  Token.FUNCTION);  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  >=  Token.FUNCTION);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  >=  Token.FUNCTION);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	18	None	replace
92	[BUG]  [BUGGY]  Context.checkState(parent.getType()!=  Token.FUNCTION);  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(parent.getType()!=  Token.FUNCTION);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(parent.getType()!=  Token.FUNCTION);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	18	None	replace
93	[BUG]  [BUGGY]  Context.checkState(n.getType()  [Delete]  Token.FUNCTION);  [CE]  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  [Delete]  Token.FUNCTION);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  [Delete]  Token.FUNCTION);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	18	None	replace
94	[BUG]  [BUGGY]  parent  =  n.getParent();  [CE]  orphaned  case  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent  =  n.getParent();  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent  =  n.getParent();	  switch(parent.getType())    {    Node    parent    =    n.getParent();    	non-compiled	[CE]  orphaned  case	3	None	replace
95	[BUG]  [BUGGY]  parent  =  parent.getParent();  [CE]  orphaned  case  [FE]              RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent  =  parent.getParent();  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent  =  parent.getParent();	  switch(parent.getType())    {    Node    parent    =    n.getParent();    	non-compiled	[CE]  orphaned  case	3	None	replace
96	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	46	None	replace
97	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	46	None	replace
98	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	46	None	replace
99	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	46	None	replace
100	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  orphaned  case  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent.replaceChild(n,  new  Node(Token.EMPTY));	  switch(parent.getType())    {    switch(parent.getType())    {    	non-compiled	[CE]  orphaned  case	88	None	replace
101	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  orphaned  case  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION));	  switch(parent.getType())    {    switch(parent.getType())    {    	non-compiled	[CE]  orphaned  case	88	None	replace
102	[BUG]  [BUGGY]  Node  expr  =  parent.getLastChild();  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  expr  =  parent.getLastChild();  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  expr  =  parent.getLastChild();	  Node    expr    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	48	None	replace
103	[BUG]  [BUGGY]  parent  =  n.getParent();  break;  [CE]  orphaned  case  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent  =  n.getParent();  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent  =  n.getParent();  break;	  switch(parent.getType())    {    Node    parent    =    n.getParent();    break;    	non-compiled	[CE]  orphaned  case	2	None	replace
104	[BUG]  [BUGGY]  parent  =  parent.getParent();  break;  [CE]  orphaned  case  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent  =  parent.getParent();  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent  =  parent.getParent();  break;	  switch(parent.getType())    {    Node    parent    =    n.getParent();    break;    	non-compiled	[CE]  orphaned  case	2	None	replace
105	[BUG]  [BUGGY]  Node  n  =  parent.getParent();  break;  [CE]  orphaned  case  [FE]              RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  parent.getParent();  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  n  =  parent.getParent();  break;	  switch(parent.getType())    {    Node    parent    =    n.getParent();    break;    	non-compiled	[CE]  orphaned  case	2	None	replace
106	[BUG]  [BUGGY]  switch(n.getString(),  MAKE_LOCAL_NAMES_UNIQUE)  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getString(),  MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getString(),  MAKE_LOCAL_NAMES_UNIQUE)  {	  switch(n.getString(),    argument)    {    	non-compiled	[CE]  ')'  expected	39	None	replace
107	[BUG]  [BUGGY]  switch(n.getType(),  argument)  {  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  argument)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  argument)  {	  switch(n.getString(),    argument)    {    	non-compiled	[CE]  ')'  expected	39	None	replace
108	[BUG]  [BUGGY]  switch(n.getFirstChild(),  argument)  {  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild(),  argument)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild(),  argument)  {	  switch(n.getString(),    argument)    {    	non-compiled	[CE]  ')'  expected	39	None	replace
109	[BUG]  [BUGGY]  switch(n.getType(),  arguments)  {  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  arguments)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  arguments)  {	  switch(n.getString(),    arguments)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
110	[BUG]  [BUGGY]  switch(n.getFirstChild().getType(),  MAKE_LOCAL_NAMES_UNIQUE)  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild().getType(),  MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild().getType(),  MAKE_LOCAL_NAMES_UNIQUE)  {	  switch(n.getType(),    MAKE_LOCAL_NAMES_UNIQUE)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
111	[BUG]  [BUGGY]  switch(parent.getType(),  MAKE_LOCAL_NAMES_UNIQUE)  {  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent.getType(),  MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType(),  MAKE_LOCAL_NAMES_UNIQUE)  {	  switch(n.getType(),    MAKE_LOCAL_NAMES_UNIQUE)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
112	[BUG]  [BUGGY]  switch(n.getType(),  MAKE_LOCAL_NAMES_UNIQUE  ||  parent.getType()  ==  Token.NAME)  {  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  MAKE_LOCAL_NAMES_UNIQUE  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  MAKE_LOCAL_NAMES_UNIQUE  ||  parent.getType()  ==  Token.NAME)  {	  switch(n.getType(),    MAKE_LOCAL_NAMES_UNIQUE)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
113	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	21	None	replace
114	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);  [CE]  orphaned  case  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	21	None	replace
115	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	21	None	replace
116	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	21	None	replace
117	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CALL);  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CALL);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  orphaned  case	79	None	replace
118	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CALL);  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CALL);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CALL);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  orphaned  case	79	None	replace
119	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CALL);  [CE]  orphaned  case  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CALL);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  orphaned  case	79	None	replace
120	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [CE]  orphaned  case  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  orphaned  case	79	None	replace
121	[BUG]  [BUGGY]  parent  =  n.getLastChild();  [CE]  orphaned  case  [FE]                  RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent  =  n.getLastChild();  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent  =  n.getLastChild();	  switch(parent.getType())    {    Node    parent    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	6	None	replace
122	[BUG]  [BUGGY]  parent  =  parent.getLastChild();  [CE]  orphaned  case  [FE]                    RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent  =  parent.getLastChild();  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent  =  parent.getLastChild();	  switch(parent.getType())    {    Node    parent    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	6	None	replace
123	[BUG]  [BUGGY]  parent  =  n.getFirstChild();  [CE]  orphaned  case  [FE]              RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent  =  n.getFirstChild();  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent  =  n.getFirstChild();	  switch(parent.getType())    {    Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
124	[BUG]  [BUGGY]  parent  =  parent.getFirstChild();  [CE]  orphaned  case  [FE]                RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent  =  parent.getFirstChild();  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent  =  parent.getFirstChild();	  switch(parent.getType())    {    Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
125	[BUG]  [BUGGY]  Node  n  =  t.getFirstChild();  break;  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  t.getFirstChild();  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  n  =  t.getFirstChild();  break;	  Node    n    =    parent.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	25	None	replace
126	[BUG]  [BUGGY]  switch(n!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  incompatible  types  [FE]        RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {	  switch(parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  incompatible  types	57	None	replace
127	[BUG]  [BUGGY]  switch(n  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  incompatible  types  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {	  switch(parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  incompatible  types	57	None	replace
128	[BUG]  [BUGGY]  switch(parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  incompatible  types  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {	  switch(parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  incompatible  types	57	None	replace
129	[BUG]  [BUGGY]  switch(parent!=  null  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  incompatible  types  [FE]              RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent!=  null  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent!=  null  ||  parent.getType()  ==  Token.FUNCTION)  {	  switch(parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  incompatible  types	57	None	replace
130	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	47	None	replace
131	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	47	None	replace
132	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	47	None	replace
133	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME,  arguments);  [CE]  orphaned  case  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME,  arguments);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME,  arguments);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	47	None	replace
134	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  arguments,  parent);  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  arguments,  parent);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  arguments,  parent);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    arguments);    	non-compiled	[CE]  orphaned  case	19	None	replace
135	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());  [CE]  orphaned  case  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());	  Context.checkState(n.getType()    ==    Token.FUNCTION,    arguments);    	non-compiled	[CE]  orphaned  case	19	None	replace
136	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  parent);  [CE]  orphaned  case  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  parent);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  parent);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    arguments);    	non-compiled	[CE]  orphaned  case	19	None	replace
137	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  argument);  [CE]  orphaned  case  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  argument);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  argument);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    arguments);    	non-compiled	[CE]  orphaned  case	19	None	replace
138	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.GETPROP);  break;  [CE]  orphaned  case  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.GETPROP);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.GETPROP);  break;	  Context.checkState(n.getType()    ==    Token.GETPROP);    break;    	non-compiled	[CE]  orphaned  case	26	None	replace
139	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP,  arguments);  break;  [CE]  orphaned  case  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP,  arguments);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.GETPROP,  arguments);  break;	  Context.checkState(n.getType()    ==    Token.GETPROP);    break;    	non-compiled	[CE]  orphaned  case	26	None	replace
140	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.GETPROP);  break;  [CE]  orphaned  case  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.GETPROP);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.GETPROP);  break;	  Context.checkState(n.getType()    ==    Token.GETPROP);    break;    	non-compiled	[CE]  orphaned  case	26	None	replace
141	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP,  n.getFirstChild());  break;  [CE]  orphaned  case  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP,  n.getFirstChild());  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.GETPROP,  n.getFirstChild());  break;	  Context.checkState(n.getType()    ==    Token.GETPROP);    break;    	non-compiled	[CE]  orphaned  case	26	None	replace
142	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments);  break;  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  arguments);  break;	  NodeTraversal.traverse(compiler,    n,    parent);    break;    	non-compiled	[CE]  orphaned  case	71	None	replace
143	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  parent);  break;  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.traverse(compiler,  n,  parent);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.traverse(compiler,  n,  parent);  break;	  NodeTraversal.traverse(compiler,    n,    parent);    break;    	non-compiled	[CE]  orphaned  case	71	None	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argument);  break;  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argument);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argument);  break;	  NodeTraversal.traverse(compiler,    n,    parent);    break;    	non-compiled	[CE]  orphaned  case	71	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expectedConst);  break;  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expectedConst);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  expectedConst);  break;	  NodeTraversal.traverse(compiler,    n,    parent);    break;    	non-compiled	[CE]  orphaned  case	71	None	replace
146	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  switch(n.getType())  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  switch(n.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.GETPROP)  {  switch(n.getType())  {	  if(n.getType()    ==    Token.GETPROP)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
147	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.GETPROP)  {  switch(n.getType())  {  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.GETPROP)  {  switch(n.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(parent.getType()  ==  Token.GETPROP)  {  switch(n.getType())  {	  if(n.getType()    ==    Token.GETPROP)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
148	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  parent.getType()  ==  Token.NAME)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  parent.getType()  ==  Token.NAME)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.GETPROP  &&  parent.getType()  ==  Token.NAME)  {  switch(parent.getType())  {	  if(n.getType()    ==    Token.GETPROP)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
149	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  parent.getFirstChild()!=  n)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  parent.getFirstChild()!=  n)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.GETPROP  &&  parent.getFirstChild()!=  n)  {  switch(parent.getType())  {	  if(n.getType()    ==    Token.GETPROP)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
150	[BUG]  [BUGGY]  Switch(n.getLastChild())  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Switch(n.getLastChild())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Switch(n.getLastChild())  {	  Switch(n.getFirstChild())    {    	non-compiled	[CE]  ';'  expected	75	None	replace
151	[BUG]  [BUGGY]  Context.checkState(n.getFirstChild()  ==  null);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getFirstChild()  ==  null);  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getFirstChild()  ==  null);	  Switch(n.getFirstChild())    {    	non-compiled	[CE]  orphaned  case	75	None	replace
152	[BUG]  [BUGGY]  Context.checkState(n.getFirstChild()!=  null);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getFirstChild()!=  null);  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getFirstChild()!=  null);	  Switch(n.getFirstChild())    {    	non-compiled	[CE]  orphaned  case	75	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Preconditions.checkState(n.getFirstChild()!=  null);	  Switch(n.getFirstChild())    {    	non-compiled	[CE]  orphaned  case	75	None	replace
154	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  t,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  t,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  t,  MAKE_LOCAL_NAMES_UNIQUE);	  Context.checkState(n.getType()    ==    Token.VAR,    t);    	non-compiled	[CE]  orphaned  case	66	None	replace
155	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  t,  arguments);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  t,  arguments);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  t,  arguments);	  Context.checkState(n.getType()    ==    Token.VAR,    t);    	non-compiled	[CE]  orphaned  case	66	None	replace
156	[BUG]  [BUGGY]  Context.checkState(t.getType()  ==  Token.VAR,  n);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(t.getType()  ==  Token.VAR,  n);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(t.getType()  ==  Token.VAR,  n);	  Context.checkState(n.getType()    ==    Token.VAR,    t);    	non-compiled	[CE]  orphaned  case	66	None	replace
157	[BUG]  [BUGGY]  Switch(n.getType(),  parent)  {  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Switch(n.getType(),  parent)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Switch(n.getType(),  parent)  {	  Switch(n.getType())    {    	non-compiled	[CE]  ';'  expected	14	None	replace
158	[BUG]  [BUGGY]  Switch(n.getType()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Switch(n.getType()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Switch(n.getType()  ||  parent.getType()  ==  Token.NAME)  {	  Switch(n.getType())    {    	non-compiled	[CE]  ';'  expected	14	None	replace
159	[BUG]  [BUGGY]  Switch(n.getType()  ||  parent.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Switch(n.getType()  ||  parent.getType()  ==  Token.GETPROP)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Switch(n.getType()  ||  parent.getType()  ==  Token.GETPROP)  {	  Switch(n.getType())    {    	non-compiled	[CE]  ';'  expected	14	None	replace
160	[BUG]  [BUGGY]  Node  expr  =  node.getFirstChild();  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  expr  =  node.getFirstChild();  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  expr  =  node.getFirstChild();	  Node    expr    =    parent.getFirstChild();    	non-compiled	[CE]  orphaned  case	49	None	replace
161	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild();  switch(parent.getType())  {  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]        RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getFirstChild();  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  parent  =  n.getFirstChild();  switch(parent.getType())  {	  switch(parent.getType())    {    Node    parent    =    n.getFirstChild();    switch(parent.getType())    {    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	87	None	replace
162	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent  =  n.getFirstChild();  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	add	parent  =  n.getFirstChild();  switch(parent.getType())  {	  switch(parent.getType())    {    Node    parent    =    n.getFirstChild();    switch(parent.getType())    {    	compilable	  [FE]  RuntimeException  	87	13	replace
163	[BUG]  [BUGGY]  parent  =  n.getFirstChild();  switch(parent.getType())  {  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent  =  n.getFirstChild();  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent  =  n.getFirstChild();  switch(parent.getType())  {	  switch(parent.getType())    {    Node    parent    =    n.getFirstChild();    switch(parent.getType())    {    	compilable	  [FE]  RuntimeException  	87	13	replace
164	[BUG]  [BUGGY]  Node  parent  =  n.getLastChild();  switch(parent.getType())  {  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getLastChild();  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  parent  =  n.getLastChild();  switch(parent.getType())  {	  switch(parent.getType())    {    Node    parent    =    n.getFirstChild();    switch(parent.getType())    {    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	87	None	replace
165	[BUG]  [BUGGY]  Node  expr  =  n.getLastChild();  break;  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  expr  =  n.getLastChild();  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  expr  =  n.getLastChild();  break;	  Node    expr    =    n.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	77	None	replace
166	[BUG]  [BUGGY]  Node  expr  =  parent.getFirstChild();  break;  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  expr  =  parent.getFirstChild();  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  expr  =  parent.getFirstChild();  break;	  Node    expr    =    n.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	77	None	replace
167	[BUG]  [BUGGY]  Node  expr  =  n.getNext();  break;  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  expr  =  n.getNext();  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  expr  =  n.getNext();  break;	  Node    expr    =    n.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	77	None	replace
168	[BUG]  [BUGGY]  Node  expr  =  n.getParent();  break;  [CE]  orphaned  case  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  expr  =  n.getParent();  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  expr  =  n.getParent();  break;	  Node    expr    =    n.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	77	None	replace
169	[BUG]  [BUGGY]  switch(n,  parent.getFirstChild())  {  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n,  parent.getFirstChild())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n,  parent.getFirstChild())  {	  switch(parent.getFirstChild())    {    	non-compiled	[CE]  ')'  expected	65	None	replace
170	[BUG]  [BUGGY]  switch(parent.getFirstChild(),  arguments)  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent.getFirstChild(),  arguments)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getFirstChild(),  arguments)  {	  switch(parent.getFirstChild())    {    	non-compiled	[CE]  ')'  expected	65	None	replace
171	[BUG]  [BUGGY]  switch(n.getFirstChild(),  n)  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild(),  n)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild(),  n)  {	  switch(n.getFirstChild(),    parent)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
172	[BUG]  [BUGGY]  switch(n.getFirstChild(),  parent,  arguments)  {  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild(),  parent,  arguments)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild(),  parent,  arguments)  {	  switch(n.getFirstChild(),    parent)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
173	[BUG]  [BUGGY]  parent  =  n.getFirstChild();  break;  [CE]  orphaned  case  [FE]        RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent  =  n.getFirstChild();  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent  =  n.getFirstChild();  break;	  switch(parent.getType())    {    Node    parent    =    n.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	1	None	replace
174	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  CONVERT_WHILE_TO_FOR);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  CONVERT_WHILE_TO_FOR);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  CONVERT_WHILE_TO_FOR);	  Context.checkState(n.getType()    ==    Token.NAME,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  orphaned  case	41	None	replace
175	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE);	  Context.checkState(n.getType()    ==    Token.NAME,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  orphaned  case	41	None	replace
176	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  Context.checkState(n.getType()    ==    Token.NAME,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  orphaned  case	41	None	replace
177	[BUG]  [BUGGY]  switch(n!=  null  &&  parent.getType()  ==  Token.NAME)  {  [CE]  incompatible  types  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n!=  null  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n!=  null  &&  parent.getType()  ==  Token.NAME)  {	  switch(parent!=    null    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  incompatible  types	58	None	replace
178	[BUG]  [BUGGY]  switch(n  ==  null  &&  parent.getType()  ==  Token.NAME)  {  [CE]  incompatible  types  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n  ==  null  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n  ==  null  &&  parent.getType()  ==  Token.NAME)  {	  switch(parent!=    null    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  incompatible  types	58	None	replace
179	[BUG]  [BUGGY]  switch(parent  ==  null  &&  parent.getType()  ==  Token.NAME)  {  [CE]  incompatible  types  [FE]              RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent  ==  null  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent  ==  null  &&  parent.getType()  ==  Token.NAME)  {	  switch(parent!=    null    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  incompatible  types	58	None	replace
180	[BUG]  [BUGGY]  switch(parent!=  null  ||  parent.getType()  ==  Token.NAME)  {  [CE]  incompatible  types  [FE]                RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent!=  null  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent!=  null  ||  parent.getType()  ==  Token.NAME)  {	  switch(parent!=    null    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  incompatible  types	58	None	replace
181	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap,  expectedConst);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap,  expectedConst);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argumentMap,  expectedConst);	  NodeTraversal.traverse(compiler,    n,    parent,    argumentMap);    	non-compiled	[CE]  orphaned  case	36	None	replace
182	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap,  null);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap,  null);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argumentMap,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    argumentMap);    	non-compiled	[CE]  orphaned  case	36	None	replace
183	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.arguments);  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.arguments);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this.arguments);	  NodeTraversal.traverse(compiler,    n,    parent,    argumentMap);    	non-compiled	[CE]  orphaned  case	36	None	replace
184	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap,  arguments);  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap,  arguments);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argumentMap,  arguments);	  NodeTraversal.traverse(compiler,    n,    parent,    argumentMap);    	non-compiled	[CE]  orphaned  case	36	None	replace
185	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  parent.getModule());  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  parent.getModule());  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  parent.getModule());	  Context.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  orphaned  case	72	None	replace
186	[BUG]  [BUGGY]  Context.checkState(t.getType()  ==  Token.NAME,  n.getModule());  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(t.getType()  ==  Token.NAME,  n.getModule());  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(t.getType()  ==  Token.NAME,  n.getModule());	  Context.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  orphaned  case	72	None	replace
187	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  t.getModule());  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  t.getModule());  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.NAME,  t.getModule());	  Context.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  orphaned  case	72	None	replace
188	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getModule());  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getModule());  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getModule());	  Context.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  orphaned  case	72	None	replace
189	[BUG]  [BUGGY]  switch(n.getString(),  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getString(),  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getString(),  NodeUtil.isFunctionDeclaration(n))  {	  switch(n.getString(),    parent)    {    	non-compiled	[CE]  ')'  expected	92	None	replace
190	[BUG]  [BUGGY]  switch(n.getType()  &  NodeUtil.isLiteralValue(parent))  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType()  &  NodeUtil.isLiteralValue(parent))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType()  &  NodeUtil.isLiteralValue(parent))  {	  switch(parent.getType()    &    NodeUtil.isLiteralValue(n))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	85	None	replace
191	[BUG]  [BUGGY]  switch(t.getType()  &  NodeUtil.isLiteralValue(n))  {  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(t.getType()  &  NodeUtil.isLiteralValue(n))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(t.getType()  &  NodeUtil.isLiteralValue(n))  {	  switch(parent.getType()    &    NodeUtil.isLiteralValue(n))    {    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
192	[BUG]  [BUGGY]  Switch(n.getType()  &  NodeUtil.isLiteralValue(parent))  {  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Switch(n.getType()  &  NodeUtil.isLiteralValue(parent))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Switch(n.getType()  &  NodeUtil.isLiteralValue(parent))  {	  switch(parent.getType()    &    NodeUtil.isLiteralValue(n))    {    	non-compiled	[CE]  ';'  expected	85	None	replace
193	[BUG]  [BUGGY]  switch(parent.getType()  &  NodeUtil.isLiteralValue(n,  parent))  {  [CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent.getType()  &  NodeUtil.isLiteralValue(n,  parent))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType()  &  NodeUtil.isLiteralValue(n,  parent))  {	  switch(parent.getType()    &    NodeUtil.isLiteralValue(n))    {    	non-compiled	[CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;	85	None	replace
194	[BUG]  [BUGGY]  switch(parent.getType()  &  NodeUtil.isLiteralValue(n)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                    RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent.getType()  &  NodeUtil.isLiteralValue(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType()  &  NodeUtil.isLiteralValue(n)||  parent.getType()  ==  Token.FUNCTION)  {	  switch(parent.getType()    &    NodeUtil.isLiteralValue(n))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	85	None	replace
195	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    n,    parent,    arguments);    	non-compiled	[CE]  orphaned  case	34	None	replace
196	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  expectedConst);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  expectedConst);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  arguments,  expectedConst);	  NodeTraversal.traverse(compiler,    n,    parent,    arguments);    	non-compiled	[CE]  orphaned  case	34	None	replace
197	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  null);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  null);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  arguments,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    arguments);    	non-compiled	[CE]  orphaned  case	34	None	replace
198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  condition);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  condition);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  arguments,  condition);	  NodeTraversal.traverse(compiler,    n,    parent,    arguments);    	non-compiled	[CE]  orphaned  case	34	None	replace
199	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  type);  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  type);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  arguments,  type);	  NodeTraversal.traverse(compiler,    n,    parent,    arguments);    	non-compiled	[CE]  orphaned  case	34	None	replace
200	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  arguments);  break;  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  arguments);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  arguments);  break;	  Context.checkState(n.getType()    ==    Token.NAME);    break;    	non-compiled	[CE]  orphaned  case	76	None	replace
201	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME);  break;  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.NAME);  break;	  Context.checkState(n.getType()    ==    Token.NAME);    break;    	non-compiled	[CE]  orphaned  case	76	None	replace
202	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  parent);  break;  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  parent);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  parent);  break;	  Context.checkState(n.getType()    ==    Token.NAME);    break;    	non-compiled	[CE]  orphaned  case	76	None	replace
203	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  break;  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  break;	  Context.checkState(n.getType()    ==    Token.NAME);    break;    	non-compiled	[CE]  orphaned  case	76	None	replace
204	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());	  Context.checkState(n.getType()    ==    Token.NAME,    parent);    	non-compiled	[CE]  orphaned  case	43	None	replace
205	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  parent.getFirstChild());  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  parent.getFirstChild());  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  parent.getFirstChild());	  Context.checkState(n.getType()    ==    Token.NAME,    parent);    	non-compiled	[CE]  orphaned  case	43	None	replace
206	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getString());  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getString());  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getString());	  Context.checkState(n.getType()    ==    Token.NAME,    parent);    	non-compiled	[CE]  orphaned  case	43	None	replace
207	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n);  [CE]  orphaned  case  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n);	  Context.checkState(n.getType()    ==    Token.NAME,    parent);    	non-compiled	[CE]  orphaned  case	43	None	replace
208	[BUG]  [BUGGY]  Node  parent  =  n.getParentNode();  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getParentNode();  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  parent  =  n.getParentNode();	  Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	11	None	replace
209	[BUG]  [BUGGY]  switch(n.getLastChild()).restrictByNotNullOrUndefined()  {  [CE]  '{'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getLastChild()).restrictByNotNullOrUndefined()  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getLastChild()).restrictByNotNullOrUndefined()  {	  switch(n.getFirstChild()).restrictByNotNullOrUndefined()    {    	non-compiled	[CE]  '{'  expected	74	None	replace
210	[BUG]  [BUGGY]  switch(n.getType()).restrictByNotNullOrUndefined()  {  [CE]  '{'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType()).restrictByNotNullOrUndefined()  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType()).restrictByNotNullOrUndefined()  {	  switch(n.getFirstChild()).restrictByNotNullOrUndefined()    {    	non-compiled	[CE]  '{'  expected	74	None	replace
211	[BUG]  [BUGGY]  Switch(n.getFirstChild()).restrictByNotNullOrUndefined()  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Switch(n.getFirstChild()).restrictByNotNullOrUndefined()  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Switch(n.getFirstChild()).restrictByNotNullOrUndefined()  {	  switch(n.getFirstChild()).restrictByNotNullOrUndefined()    {    	non-compiled	[CE]  ';'  expected	74	None	replace
212	[BUG]  [BUGGY]  switch(n.getFirstChild()).restrictStrictByNotNullOrUndefined()  {  [CE]  '{'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild()).restrictStrictByNotNullOrUndefined()  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild()).restrictStrictByNotNullOrUndefined()  {	  switch(n.getFirstChild()).restrictByNotNullOrUndefined()    {    	non-compiled	[CE]  '{'  expected	74	None	replace
213	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  n);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  n);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  n);	  Context.checkState(n.getType()    ==    Token.VAR,    parent);    	non-compiled	[CE]  orphaned  case	67	None	replace
214	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  parent.getFirstChild());  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  parent.getFirstChild());  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  parent.getFirstChild());	  Context.checkState(n.getType()    ==    Token.VAR,    parent);    	non-compiled	[CE]  orphaned  case	67	None	replace
215	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  n.getLastChild());  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  n.getLastChild());  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  n.getLastChild());	  Context.checkState(n.getType()    ==    Token.VAR,    parent);    	non-compiled	[CE]  orphaned  case	67	None	replace
216	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  n.getString());  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  n.getString());  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  n.getString());	  Context.checkState(n.getType()    ==    Token.VAR,    parent);    	non-compiled	[CE]  orphaned  case	67	None	replace
217	[BUG]  [BUGGY]  Context.checkState(n.getType()  >=  Token.NAME);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  >=  Token.NAME);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  >=  Token.NAME);	  Context.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  orphaned  case	42	None	replace
218	[BUG]  [BUGGY]  Context.checkState(parent.getType()!=  Token.NAME);  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(parent.getType()!=  Token.NAME);	  Context.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  orphaned  case	42	None	replace
219	[BUG]  [BUGGY]  Context.checkState(n.getType()  [Delete]  Token.NAME);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  [Delete]  Token.NAME);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  [Delete]  Token.NAME);	  Context.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  	42	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expectedConst,  arguments);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expectedConst,  arguments);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  expectedConst,  arguments);	  NodeTraversal.traverse(compiler,    n,    parent,    expectedConst);    	non-compiled	[CE]  orphaned  case	37	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expectedConst,  isConst);  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expectedConst,  isConst);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  expectedConst,  isConst);	  NodeTraversal.traverse(compiler,    n,    parent,    expectedConst);    	non-compiled	[CE]  orphaned  case	37	None	replace
222	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expectedConst,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expectedConst,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  expectedConst,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    n,    parent,    expectedConst);    	non-compiled	[CE]  orphaned  case	37	None	replace
223	[BUG]  [BUGGY]  switch(n.getLastChild(),  argument)  {  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getLastChild(),  argument)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getLastChild(),  argument)  {	  switch(n.getFirstChild(),    arguments)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
224	[BUG]  [BUGGY]  switch(n.getLastChild().getType(),  parent)  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getLastChild().getType(),  parent)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getLastChild().getType(),  parent)  {	  switch(n.getFirstChild().getType(),    parent)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
225	[BUG]  [BUGGY]  switch(n.getFirstChild().getType(),  parent,  arguments)  {  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild().getType(),  parent,  arguments)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild().getType(),  parent,  arguments)  {	  switch(n.getFirstChild().getType(),    parent)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
226	[BUG]  [BUGGY]  switch(n.getFirstChild().getType(),  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild().getType(),  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild().getType(),  NodeUtil.isFunctionDeclaration(parent))  {	  switch(n.getFirstChild().getType(),    parent)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
227	[BUG]  [BUGGY]  switch(n.getFirstChild().getType(),  NodeUtil.isExpressionNode(parent))  {  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild().getType(),  NodeUtil.isExpressionNode(parent))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild().getType(),  NodeUtil.isExpressionNode(parent))  {	  switch(n.getFirstChild().getType(),    parent)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
228	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  switch(n.getType())  {  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  switch(n.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  switch(n.getType())  {	  if(n.getType()    ==    Token.FUNCTION)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
229	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME)  {  switch(parent.getType())  {	  if(n.getType()    ==    Token.FUNCTION)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
230	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.FUNCTION)  {  switch(n.getType())  {  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.FUNCTION)  {  switch(n.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(parent.getType()  ==  Token.FUNCTION)  {  switch(n.getType())  {	  if(n.getType()    ==    Token.FUNCTION)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
231	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(n));  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(n));	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  orphaned  case	68	None	replace
232	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  orphaned  case	68	None	replace
233	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(parent));  [CE]  orphaned  case  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(parent));  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(parent));	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  orphaned  case	68	None	replace
234	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  parent,  expr);  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.traverse(compiler,  n,  parent,  expr);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.traverse(compiler,  n,  parent,  expr);	  NodeTraversal.traverse(compiler,    n,    parent,    expr);    	non-compiled	[CE]  orphaned  case	86	None	replace
235	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expr,  arguments);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expr,  arguments);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  expr,  arguments);	  NodeTraversal.traverse(compiler,    n,    parent,    expr);    	non-compiled	[CE]  orphaned  case	86	None	replace
236	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  arguments,  parent);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  arguments,  parent);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  arguments,  parent);	  Context.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  orphaned  case	40	None	replace
237	[BUG]  [BUGGY]  switch(parent.getLastChild())  {  [CE]  incompatible  types  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent.getLastChild())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getLastChild())  {	  switch(n.getLastChild())    {    	non-compiled	[CE]  incompatible  types	27	None	replace
238	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.FUNCTION)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.FUNCTION)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(parent.getType()  ==  Token.FUNCTION)  {  switch(parent.getType())  {	  if(n.getType()    ==    Token.FUNCTION)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
239	[BUG]  [BUGGY]  if(n.getType()  ==  Token.EMPTY)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.EMPTY)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.EMPTY)  {  switch(parent.getType())  {	  if(n.getType()    ==    Token.FUNCTION)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
240	[BUG]  [BUGGY]  if(n.getType()!=  Token.GETPROP)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()!=  Token.GETPROP)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()!=  Token.GETPROP)  {  switch(parent.getType())  {	  switch(parent.getType())    {    if(parent.getType()!=    Token.NAME)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
241	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isName(n));  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isName(n));  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isName(n));	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  orphaned  case	68	None	replace
242	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSideEffects(n));  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSideEffects(n));  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSideEffects(n));	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  orphaned  case	68	None	replace
243	[BUG]  [BUGGY]  Node  parent  =  n.getfirstChild();  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getfirstChild();  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  parent  =  n.getfirstChild();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	10	None	replace
244	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  parent);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  parent);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.NAME,  parent);	  Context.checkState(n.getType()    ==    Token.NAME,    t);    	non-compiled	[CE]  orphaned  case	70	None	replace
245	[BUG]  [BUGGY]  switch(n.getFirstChild(),  NodeUtil.NO_TYPE)  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild(),  NodeUtil.NO_TYPE)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild(),  NodeUtil.NO_TYPE)  {	  switch(n.getType(),    NodeUtil.NO_TYPE)    {    	non-compiled	[CE]  ')'  expected	62	None	replace
246	[BUG]  [BUGGY]  switch(parent.getType(),  NodeUtil.NO_TYPE)  {  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent.getType(),  NodeUtil.NO_TYPE)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType(),  NodeUtil.NO_TYPE)  {	  switch(n.getType(),    NodeUtil.NO_TYPE)    {    	non-compiled	[CE]  ')'  expected	62	None	replace
247	[BUG]  [BUGGY]  Switch(n.getType(),  NodeUtil.NO_TYPE)  {  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Switch(n.getType(),  NodeUtil.NO_TYPE)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Switch(n.getType(),  NodeUtil.NO_TYPE)  {	  switch(n.getType(),    NodeUtil.NO_TYPE)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
248	[BUG]  [BUGGY]  Context.checkState(NAME.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(NAME.getType()  ==  Token.NAME);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(NAME.getType()  ==  Token.NAME);	  Context.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  orphaned  case	42	None	replace
249	[BUG]  [BUGGY]  Node  default  =  n.getFirstChild();  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  default  =  n.getFirstChild();  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  default  =  n.getFirstChild();	  switch(parent.getType())    {    Node    parent    =    n.getFirstChild();    switch(parent.getType())    {    	non-compiled	[CE]  not  a  statement	87	None	replace
250	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent  =  n.getLastChild();  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	add	parent  =  n.getLastChild();  switch(parent.getType())  {	  switch(parent.getType())    {    Node    parent    =    n.getFirstChild();    switch(parent.getType())    {    	compilable	  [FE]  RuntimeException  	87	13	replace
251	[BUG]  [BUGGY]  parent  =  n.getLastChild();  switch(parent.getType())  {  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent  =  n.getLastChild();  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent  =  n.getLastChild();  switch(parent.getType())  {	  switch(parent.getType())    {    Node    parent    =    n.getFirstChild();    switch(parent.getType())    {    	compilable	  [FE]  RuntimeException  	87	13	replace
252	[BUG]  [BUGGY]  switch(parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  incompatible  types  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.FUNCTION)  {	  switch(parent.getFirstChild())    {    	non-compiled	[CE]  incompatible  types	65	None	replace
253	[BUG]  [BUGGY]  switch(parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  incompatible  types  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.NAME)  {	  switch(parent.getFirstChild())    {    	non-compiled	[CE]  incompatible  types	65	None	replace
254	[BUG]  [BUGGY]  switch(parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.THIS)  {  [CE]  incompatible  types  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.THIS)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.THIS)  {	  switch(parent.getFirstChild())    {    	non-compiled	[CE]  incompatible  types	65	None	replace
255	[BUG]  [BUGGY]  Node  n  =  n.getfirstChild();  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  n  =  n.getfirstChild();  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  n  =  n.getfirstChild();	  Node    n    =    parent.getLastChild();    	non-compiled	[CE]  orphaned  case	17	None	replace
256	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  t,  parent);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  t,  parent);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  t,  parent);	  Context.checkState(n.getType()    ==    Token.VAR,    t);    	non-compiled	[CE]  orphaned  case	66	None	replace
257	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.VAR,  parent);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.VAR,  parent);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.VAR,  parent);	  Context.checkState(n.getType()    ==    Token.VAR,    t);    	non-compiled	[CE]  orphaned  case	66	None	replace
258	[BUG]  [BUGGY]  switch(n.getString(),  NodeUtil.EMPTY_STRING)  {  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getString(),  NodeUtil.EMPTY_STRING)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getString(),  NodeUtil.EMPTY_STRING)  {	  switch(n.getString(),    parent)    {    	non-compiled	[CE]  ')'  expected	92	None	replace
259	[BUG]  [BUGGY]  switch(n.getString(),  NodeUtil.NO_TYPE)  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getString(),  NodeUtil.NO_TYPE)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getString(),  NodeUtil.NO_TYPE)  {	  switch(n.getString(),    parent)    {    	non-compiled	[CE]  ')'  expected	92	None	replace
260	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  break;  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this);  break;	  NodeTraversal.traverse(compiler,    n,    parent);    break;    	non-compiled	[CE]  orphaned  case	71	None	replace
261	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap);  break;  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argumentMap);  break;	  NodeTraversal.traverse(compiler,    n,    parent);    break;    	non-compiled	[CE]  orphaned  case	71	None	replace
262	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false);  break;  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false);  break;	  NodeTraversal.traverse(compiler,    n,    parent);    break;    	non-compiled	[CE]  orphaned  case	71	None	replace
263	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.GETPROP)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.GETPROP)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(parent.getType()  ==  Token.GETPROP)  {  switch(parent.getType())  {	  if(n.getType()    ==    Token.GETPROP)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
264	[BUG]  [BUGGY]  Context.checkState(n.getType()  >>  Token.FUNCTION);  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  >>  Token.FUNCTION);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  >>  Token.FUNCTION);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	18	None	replace
265	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {	  switch(parent.getType())    {    switch(parent.getType())    {    	non-compiled	[CE]  not  a  statement	88	None	replace
266	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	46	None	replace
267	[BUG]  [BUGGY]  switch(parent.getType()  |  NodeUtil.isFunctionDeclaration(n))  {  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]        RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent.getType()  |  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType()  |  NodeUtil.isFunctionDeclaration(n))  {	  switch(parent.getType()    &    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	83	None	replace
268	[BUG]  [BUGGY]  switch(parent.getType()  &  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.NAME)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent.getType()  &  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType()  &  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.NAME)  {	  switch(parent.getType()    &    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	83	None	replace
269	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n);  break;  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n);  break;	  Context.checkState(n.getType()    ==    Token.NAME);    break;    	non-compiled	[CE]  orphaned  case	76	None	replace
270	[BUG]  [BUGGY]  switch(n.getFirstChild(),  MAKE_LOCAL_NAMES_UNIQUE)  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild(),  MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild(),  MAKE_LOCAL_NAMES_UNIQUE)  {	  switch(n.getType(),    MAKE_LOCAL_NAMES_UNIQUE)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
271	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION;  break;  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION;  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION;  break;	  switch(parent.getType())    {    Node    parent    =    n.getFirstChild();    break;    	non-compiled	[CE]  not  a  statement	1	None	replace
272	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.VAR;  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.VAR;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent!=  null  &&  parent.getType()  ==  Token.VAR;	  switch(parent.getType())    {    Node    parent    =    n.getFirstChild();    break;    	non-compiled	[CE]  not  a  statement	1	None	replace
273	[BUG]  [BUGGY]  Node  expr  =  n.getfirstChild();  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  expr  =  n.getfirstChild();  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  expr  =  n.getfirstChild();	  Node    expr    =    parent.getFirstChild();    	non-compiled	[CE]  orphaned  case	49	None	replace
274	[BUG]  [BUGGY]  switch(n.getNext()).restrictByNotNullOrUndefined()  {  [CE]  '{'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getNext()).restrictByNotNullOrUndefined()  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getNext()).restrictByNotNullOrUndefined()  {	  switch(n.getFirstChild()).restrictByNotNullOrUndefined()    {    	non-compiled	[CE]  '{'  expected	74	None	replace
275	[BUG]  [BUGGY]  switch(n.getType()  ==  Token.NAME)  {  [CE]  incompatible  types  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType()  ==  Token.NAME)  {	  switch(n.getFirstChild()).restrictByNotNullOrUndefined()    {    	non-compiled	[CE]  incompatible  types	74	None	replace
276	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.argument);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.argument);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this.argument);	  NodeTraversal.traverse(compiler,    n,    parent,    argument);    	non-compiled	[CE]  orphaned  case	35	None	replace
277	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.VAR;  break;  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.VAR;  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent!=  null  &&  parent.getType()  ==  Token.VAR;  break;	  switch(parent.getType())    {    Node    parent    =    n.getParent();    break;    	non-compiled	[CE]  not  a  statement	2	None	replace
278	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE  ||  n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE  ||  n.getType()  ==  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.NAME,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  orphaned  case	41	None	replace
279	[BUG]  [BUGGY]  switch(n.getType())  {  Node  parent  =  n.getParent();  [CE]  case,  default,  or  '}'  expected  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType())  {  Node  parent  =  n.getParent();  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType())  {  Node  parent  =  n.getParent();	  switch(parent.getType())    {    Node    parent    =    n.getParent();    	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	replace
280	[BUG]  [BUGGY]  Node  parent  =  t.getLastChild();  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  t.getLastChild();  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  parent  =  t.getLastChild();	  Node    parent    =    t.getParent();    	non-compiled	[CE]  orphaned  case	12	None	replace
281	[BUG]  [BUGGY]  switch(n.getType(),  NodeUtil.newNumber(parent.cloneTree()))  {  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  NodeUtil.newNumber(parent.cloneTree()))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  NodeUtil.newNumber(parent.cloneTree()))  {	  switch(n.getType(),    parent.cloneTree())    {    	non-compiled	[CE]  ')'  expected	53	None	replace
282	[BUG]  [BUGGY]  switch(n.getType(),  parent!=  null)  {  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  parent!=  null)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  parent!=  null)  {	  switch(n.getType(),    parent.cloneTree())    {    	non-compiled	[CE]  ')'  expected	53	None	replace
283	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Node  parent  =  n.getFirstChild();  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Node  parent  =  n.getFirstChild();  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Node  parent  =  n.getFirstChild();	  switch(parent.getType())    {    Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	4	None	replace
284	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  parent  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  parent  =  n.getFirstChild();  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  parent  =  n.getFirstChild();	  switch(parent.getType())    {    Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	4	None	replace
285	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	21	None	replace
286	[BUG]  [BUGGY]  switch(parent.getType()  &  NodeUtil.isLiteralValue(n)||  parent.getType()  ==  Token.NAME)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent.getType()  &  NodeUtil.isLiteralValue(n)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType()  &  NodeUtil.isLiteralValue(n)||  parent.getType()  ==  Token.NAME)  {	  switch(parent.getType()    &    NodeUtil.isLiteralValue(n))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	85	None	replace
287	[BUG]  [BUGGY]  Context.checkState(n.getType()  >>  Token.VAR);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  >>  Token.VAR);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  >>  Token.VAR);	  Context.checkState(n.getType()!=    Token.VAR);    	non-compiled	[CE]  orphaned  case	45	None	replace
288	[BUG]  [BUGGY]  Switch(parent.getType())  {  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Switch(parent.getType())  {	  Switch(n.getType())    {    	non-compiled	[CE]  ';'  expected	14	None	replace
289	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  t.getCompiler());  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  t.getCompiler());  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  t.getCompiler());	  Context.checkState(n.getType()    ==    Token.VAR,    t.getModule());    	non-compiled	[CE]  orphaned  case	91	None	replace
290	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  t.getModule()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  t.getModule()  ==  Token.FUNCTION);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  t.getModule()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.VAR,    t.getModule());    	non-compiled	[CE]  orphaned  case	91	None	replace
291	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  expr,  parent);  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  expr,  parent);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  expr,  parent);	  NodeTraversal.traverse(compiler,    n,    parent,    expr);    	non-compiled	[CE]  orphaned  case	86	None	replace
292	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  forbidChanges);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  forbidChanges);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  forbidChanges);	  NodeTraversal.traverse(compiler,    n,    parent,    expectedConst);    	non-compiled	[CE]  orphaned  case	37	None	replace
293	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.forbidChanges);  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.forbidChanges);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this.forbidChanges);	  NodeTraversal.traverse(compiler,    n,    parent,    expectedConst);    	non-compiled	[CE]  orphaned  case	37	None	replace
294	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Preconditions.checkState(n.getFirstChild()  ==  null);	  Switch(n.getFirstChild())    {    	non-compiled	[CE]  orphaned  case	75	None	replace
295	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  parent);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  parent);  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Preconditions.checkState(n.getFirstChild()  ==  parent);	  Switch(n.getFirstChild())    {    	non-compiled	[CE]  orphaned  case	75	None	replace
296	[BUG]  [BUGGY]  Context.checkState(arguments.getType()  ==  Token.VAR,  n);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(arguments.getType()  ==  Token.VAR,  n);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(arguments.getType()  ==  Token.VAR,  n);	  Context.checkState(n.getType()    ==    Token.VAR,    arguments);    	non-compiled	[CE]  orphaned  case	44	None	replace
297	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	47	None	replace
298	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(parent.getType()  ==  Token.NAME)  {  switch(parent.getType())  {	  if(n.getType()    ==    Token.NAME)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
299	[BUG]  [BUGGY]  Switch(n.getFirstChild(),  parent)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Switch(n.getFirstChild(),  parent)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Switch(n.getFirstChild(),  parent)  {	  switch(n.getFirstChild(),    parent)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
300	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false);	  NodeTraversal.traverse(compiler,    n,    parent,    event);    	non-compiled	[CE]  orphaned  case	61	None	replace
301	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  reportCodeChange( "MAKE_LOCAL_NAMES_UNIQUE "));  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  reportCodeChange( "MAKE_LOCAL_NAMES_UNIQUE "));  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  reportCodeChange( "MAKE_LOCAL_NAMES_UNIQUE "));	  NodeTraversal.traverse(compiler,    n,    parent,    event);    	non-compiled	[CE]  orphaned  case	61	None	replace
302	[BUG]  [BUGGY]  Context.checkState(arguments.getType()  ==  Token.NAME,  n);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(arguments.getType()  ==  Token.NAME,  n);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(arguments.getType()  ==  Token.NAME,  n);	  Context.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  orphaned  case	40	None	replace
303	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.VAR,  n);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.VAR,  n);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.VAR,  n);	  Context.checkState(n.getType()    ==    Token.VAR,    parent);    	non-compiled	[CE]  orphaned  case	67	None	replace
304	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  parent!=  null);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  parent!=  null);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  parent!=  null);	  Context.checkState(n.getType()    ==    Token.VAR,    parent);    	non-compiled	[CE]  orphaned  case	67	None	replace
305	[BUG]  [BUGGY]  switch(n.getFirstChild(),  NodeUtil.EMPTY_STRING)  {  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild(),  NodeUtil.EMPTY_STRING)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild(),  NodeUtil.EMPTY_STRING)  {	  switch(n.getType(),    NodeUtil.EMPTY_STRING)    {    	non-compiled	[CE]  ')'  expected	63	None	replace
306	[BUG]  [BUGGY]  switch(n.getType(),  NodeUtil.EMPTY_OBJECT)  {  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  NodeUtil.EMPTY_OBJECT)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  NodeUtil.EMPTY_OBJECT)  {	  switch(n.getType(),    NodeUtil.EMPTY_STRING)    {    	non-compiled	[CE]  ')'  expected	63	None	replace
307	[BUG]  [BUGGY]  switch(parent.getType(),  NodeUtil.NO_OBJECT_TYPE)  {  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent.getType(),  NodeUtil.NO_OBJECT_TYPE)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType(),  NodeUtil.NO_OBJECT_TYPE)  {	  switch(n.getType(),    NodeUtil.NO_OBJECT_TYPE)    {    	non-compiled	[CE]  ')'  expected	64	None	replace
308	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	20	None	replace
309	[BUG]  [BUGGY]  switch(n.getFirstChild().getType(),  n)  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild().getType(),  n)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild().getType(),  n)  {	  switch(n.getFirstChild().getType(),    parent)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
310	[BUG]  [BUGGY]  switch(n.getFirstChild().getType(),  NodeUtil.NO_TYPE)  {  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild().getType(),  NodeUtil.NO_TYPE)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild().getType(),  NodeUtil.NO_TYPE)  {	  switch(n.getFirstChild().getType(),    parent)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
311	[BUG]  [BUGGY]  switch(n.getFirstChild().getType(),  NodeUtil.EMPTY_STRING)  {  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild().getType(),  NodeUtil.EMPTY_STRING)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild().getType(),  NodeUtil.EMPTY_STRING)  {	  switch(n.getFirstChild().getType(),    parent)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
312	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP,  n);  break;  [CE]  orphaned  case  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP,  n);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.GETPROP,  n);  break;	  Context.checkState(n.getType()    ==    Token.GETPROP);    break;    	non-compiled	[CE]  orphaned  case	26	None	replace
313	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.GETELEM);  break;  [CE]  orphaned  case  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.GETELEM);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.GETELEM);  break;	  Context.checkState(n.getType()    ==    Token.GETPROP);    break;    	non-compiled	[CE]  orphaned  case	26	None	replace
314	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP,  parent);  break;  [CE]  orphaned  case  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP,  parent);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.GETPROP,  parent);  break;	  Context.checkState(n.getType()    ==    Token.GETPROP);    break;    	non-compiled	[CE]  orphaned  case	26	None	replace
315	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  arguments!=  null);  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  arguments!=  null);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  arguments!=  null);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    arguments);    	non-compiled	[CE]  orphaned  case	19	None	replace
316	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  orphaned  case  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  MAKE_LOCAL_NAMES_UNIQUE);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    arguments);    	non-compiled	[CE]  orphaned  case	19	None	replace
317	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  break;  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  break;	  Context.checkState(n.getType()    ==    Token.FUNCTION);    break;    	non-compiled	[CE]  orphaned  case	24	None	replace
318	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  parent);  break;  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  parent);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  parent);  break;	  Context.checkState(n.getType()    ==    Token.FUNCTION);    break;    	non-compiled	[CE]  orphaned  case	24	None	replace
319	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  t.getCompiler());  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  t.getCompiler());  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  t.getCompiler());	  Context.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  orphaned  case	72	None	replace
320	[BUG]  [BUGGY]  switch(parent.getType()  |  NodeUtil.isExpressionNode(n))  {  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent.getType()  |  NodeUtil.isExpressionNode(n))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType()  |  NodeUtil.isExpressionNode(n))  {	  switch(parent.getType()    &    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	84	None	replace
321	[BUG]  [BUGGY]  switch(parent.getType()  &  NodeUtil.isExpressionNode(n)||  parent.getType()  ==  Token.NAME)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent.getType()  &  NodeUtil.isExpressionNode(n)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType()  &  NodeUtil.isExpressionNode(n)||  parent.getType()  ==  Token.NAME)  {	  switch(parent.getType()    &    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	84	None	replace
322	[BUG]  [BUGGY]  switch(n.getType())  {  parent  =  n.getParent();  break;  }  [CE]  case,  default,  or  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType())  {  parent  =  n.getParent();  break;  }  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType())  {  parent  =  n.getParent();  break;  }	  switch(parent.getType())    {    Node    parent    =    n.getParent();    break;    	non-compiled	[CE]  case,  default,  or  	2	None	replace
323	[BUG]  [BUGGY]  switch(n.getType())  {  Node  parent  =  n.getParent();  break;  }  [CE]  case,  default,  or  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType())  {  Node  parent  =  n.getParent();  break;  }  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType())  {  Node  parent  =  n.getParent();  break;  }	  switch(parent.getType())    {    Node    parent    =    n.getParent();    break;    	non-compiled	[CE]  case,  default,  or  	2	None	replace
324	[BUG]  [BUGGY]  switch(n.getType(),  NodeUtil.isStatementBlock(parent))  {  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  NodeUtil.isStatementBlock(parent))  {	  switch(n.getType(),    NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  ')'  expected	54	None	replace
325	[BUG]  [BUGGY]  switch(t.getFirstChild())  {  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(t.getFirstChild())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(t.getFirstChild())  {	  switch(parent.getFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
326	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argument,  expectedConst);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argument,  expectedConst);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argument,  expectedConst);	  NodeTraversal.traverse(compiler,    n,    parent,    argument);    	non-compiled	[CE]  orphaned  case	35	None	replace
327	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  break;  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  break;	  Context.checkState(n.getType()    ==    Token.VAR);    break;    	non-compiled	[CE]  orphaned  case	78	None	replace
328	[BUG]  [BUGGY]  switch(n.getType())  {  Node  parent  =  n.getLastChild();  break;  }  [CE]  case,  default,  or  [FE]                RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType())  {  Node  parent  =  n.getLastChild();  break;  }  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType())  {  Node  parent  =  n.getLastChild();  break;  }	  switch(parent.getType())    {    Node    parent    =    n.getLastChild();    break;    	non-compiled	[CE]  case,  default,  or  	5	None	replace
329	[BUG]  [BUGGY]  switch(n.getType())  {  Node  parent  =  n.getLastChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType())  {  Node  parent  =  n.getLastChild();  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType())  {  Node  parent  =  n.getLastChild();  break;	  switch(parent.getType())    {    Node    parent    =    n.getLastChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	5	None	replace
330	[BUG]  [BUGGY]  switch(n.getFirstChild().getNext(),  arguments)  {  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild().getNext(),  arguments)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild().getNext(),  arguments)  {	  switch(n.getFirstChild(),    arguments)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
331	[BUG]  [BUGGY]  switch(n.getFirstChild().getString(),  arguments)  {  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild().getString(),  arguments)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild().getString(),  arguments)  {	  switch(n.getFirstChild(),    arguments)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
332	[BUG]  [BUGGY]  switch(n!=  parent.getType()  &&  parent.getType()  ==  Token.VAR)  {  [CE]  incomparable  types:  Node  and  int  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n!=  parent.getType()  &&  parent.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n!=  parent.getType()  &&  parent.getType()  ==  Token.VAR)  {	  switch(parent!=    null    &&    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  incomparable  types:  Node  and  int	59	None	replace
333	[BUG]  [BUGGY]  Node  parent  =  n.getParentNode();  break;  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getParentNode();  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  parent  =  n.getParentNode();  break;	  Node    parent    =    n.getParent();    break;    	non-compiled	[CE]  orphaned  case	22	None	replace
334	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expectedConst,  forbidChanges);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expectedConst,  forbidChanges);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  expectedConst,  forbidChanges);	  NodeTraversal.traverse(compiler,    n,    parent,    expectedConst);    	non-compiled	[CE]  orphaned  case	37	None	replace
335	[BUG]  [BUGGY]  switch(parent.getType()  &  NodeUtil.isLiteralValue(n)||  parent.getType()  ==  Token.VAR)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(parent.getType()  &  NodeUtil.isLiteralValue(n)||  parent.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType()  &  NodeUtil.isLiteralValue(n)||  parent.getType()  ==  Token.VAR)  {	  switch(parent.getType()    &    NodeUtil.isLiteralValue(n))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	85	None	replace
336	[BUG]  [BUGGY]  switch(n!=  parent.getType()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  incomparable  types:  Node  and  int  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n!=  parent.getType()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n!=  parent.getType()  &&  parent.getType()  ==  Token.NAME)  {	  switch(parent!=    null    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  incomparable  types:  Node  and  int	58	None	replace
337	[BUG]  [BUGGY]  switch(n.getType())  {  Node  parent  =  n.getFirstChild();  break;  }  [CE]  case,  default,  or  [FE]        RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType())  {  Node  parent  =  n.getFirstChild();  break;  }  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType())  {  Node  parent  =  n.getFirstChild();  break;  }	  switch(parent.getType())    {    Node    parent    =    n.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  	1	None	replace
338	[BUG]  [BUGGY]  switch(n.getType())  {  Node  parent  =  n.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType())  {  Node  parent  =  n.getFirstChild();  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType())  {  Node  parent  =  n.getFirstChild();  break;	  switch(parent.getType())    {    Node    parent    =    n.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	replace
339	[BUG]  [BUGGY]  switch(n.getType()  ||  NodeUtil.NO_TYPE)  {  [CE]  cannot  find  symbol  NO_TYPE  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType()  ||  NodeUtil.NO_TYPE)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType()  ||  NodeUtil.NO_TYPE)  {	  switch(n.getType(),    NodeUtil.NO_TYPE)    {    	non-compiled	[CE]  cannot  find  symbol  NO_TYPE	62	None	replace
340	[BUG]  [BUGGY]  switch(n.getType()),  NodeUtil.NO_TYPE)  {  [CE]  '{'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType()),  NodeUtil.NO_TYPE)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType()),  NodeUtil.NO_TYPE)  {	  switch(n.getType(),    NodeUtil.NO_TYPE)    {    	non-compiled	[CE]  '{'  expected	62	None	replace
341	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.VAR)  {  switch(parent.getType())  {	  switch(parent.getType())    {    Node    parent    =    n.getFirstChild();    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
342	[BUG]  [BUGGY]  if(n.getType()  ==  Token.ASSIGN)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.ASSIGN)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.ASSIGN)  {  switch(parent.getType())  {	  switch(parent.getType())    {    Node    parent    =    n.getFirstChild();    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
343	[BUG]  [BUGGY]  Node  parent  =  n.getImmediateParentNode();  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  n.getImmediateParentNode();  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  parent  =  n.getImmediateParentNode();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	10	None	replace
344	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());	  Context.checkState(n.getType()    ==    Token.NAME,    parent);    	non-compiled	[CE]  orphaned  case	43	None	replace
345	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  TEXT_WHILE);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  TEXT_WHILE);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  TEXT_WHILE);	  Context.checkState(n.getType()    ==    Token.NAME,    CONVERT_WHILE);    	non-compiled	[CE]  orphaned  case	73	None	replace
346	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expr,  this);  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expr,  this);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  expr,  this);	  NodeTraversal.traverse(compiler,    n,    parent,    expr);    	non-compiled	[CE]  orphaned  case	86	None	replace
347	[BUG]  [BUGGY]  switch(n.getType())).restrictByNotNullOrUndefined()  {  [CE]  '{'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType())).restrictByNotNullOrUndefined()  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType())).restrictByNotNullOrUndefined()  {	  switch(n.getFirstChild()).restrictByNotNullOrUndefined()    {    	non-compiled	[CE]  '{'  expected	74	None	replace
348	[BUG]  [BUGGY]  switch(n.getFirstChild()).setType(Token.NAME);  [CE]  '{'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild()).setType(Token.NAME);  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild()).setType(Token.NAME);	  switch(n.getFirstChild()).restrictByNotNullOrUndefined()    {    	non-compiled	[CE]  '{'  expected	74	None	replace
349	[BUG]  [BUGGY]  switch(n.getType())  {  Node  parent  =  n.getLastChild();  [CE]  case,  default,  or  '}'  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType())  {  Node  parent  =  n.getLastChild();  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType())  {  Node  parent  =  n.getLastChild();	  switch(parent.getType())    {    Node    parent    =    n.getLastChild();    	non-compiled	[CE]  case,  default,  or  '}'  expected	6	None	replace
350	[BUG]  [BUGGY]  switch(n.getFirstChild().getNext(),  parent)  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild().getNext(),  parent)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild().getNext(),  parent)  {	  switch(n.getFirstChild(),    parent)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
351	[BUG]  [BUGGY]  switch(n.getFirstChild().getString(),  parent)  {  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild().getString(),  parent)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild().getString(),  parent)  {	  switch(n.getFirstChild(),    parent)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
352	[BUG]  [BUGGY]  switch(n.getType(),  t.getModule())  {  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  t.getModule())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  t.getModule())  {	  switch(n.getType(),    parent.cloneTree())    {    	non-compiled	[CE]  ')'  expected	53	None	replace
353	[BUG]  [BUGGY]  switch(n.getType()  ||  parent.cloneTree())  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType()  ||  parent.cloneTree())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType()  ||  parent.cloneTree())  {	  switch(n.getType(),    parent.cloneTree())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	53	None	replace
354	[BUG]  [BUGGY]  switch(n.getString(),  NON_GLOBAL_NAMES_UNIQUE)  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getString(),  NON_GLOBAL_NAMES_UNIQUE)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getString(),  NON_GLOBAL_NAMES_UNIQUE)  {	  switch(n.getString(),    argument)    {    	non-compiled	[CE]  ')'  expected	39	None	replace
355	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  parent.getFirstChild()  ==  n)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  parent.getFirstChild()  ==  n)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.GETPROP  &&  parent.getFirstChild()  ==  n)  {  switch(parent.getType())  {	  if(n.getType()    ==    Token.GETPROP)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
356	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  parent.getType()  ==  Token.CATCH)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  parent.getType()  ==  Token.CATCH)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.GETPROP  &&  parent.getType()  ==  Token.CATCH)  {  switch(parent.getType())  {	  if(n.getType()    ==    Token.GETPROP)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
357	[BUG]  [BUGGY]  switch(n.getType())  {  Node  parent  =  n.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]              RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType())  {  Node  parent  =  n.getFirstChild();  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType())  {  Node  parent  =  n.getFirstChild();	  switch(parent.getType())    {    Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	replace
358	[BUG]  [BUGGY]  Switch(n.getType())  {  Node  parent  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Switch(n.getType())  {  Node  parent  =  n.getFirstChild();  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Switch(n.getType())  {  Node  parent  =  n.getFirstChild();	  switch(parent.getType())    {    Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	4	None	replace
359	[BUG]  [BUGGY]  switch(n.getType())  {  parent  =  n.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType())  {  parent  =  n.getFirstChild();  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType())  {  parent  =  n.getFirstChild();	  switch(parent.getType())    {    Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	replace
360	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  arguments);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  arguments);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.NAME,  arguments);	  Context.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  orphaned  case	40	None	replace
361	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.SCRIPT)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.SCRIPT)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.SCRIPT)  {  switch(parent.getType())  {	  if(n.getType()    ==    Token.FUNCTION)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
362	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CATCH)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CATCH)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CATCH)  {  switch(parent.getType())  {	  if(n.getType()    ==    Token.FUNCTION)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
363	[BUG]  [BUGGY]  switch(n.getFirstChild().getType(),  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild().getType(),  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild().getType(),  NodeUtil.isFunctionDeclaration(n))  {	  switch(n.getFirstChild().getType(),    parent)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
364	[BUG]  [BUGGY]  switch(n.getFirstChild().getType(),  NodeUtil.isVarDeclaration(n))  {  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild().getType(),  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild().getType(),  NodeUtil.isVarDeclaration(n))  {	  switch(n.getFirstChild().getType(),    parent)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
365	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  t.getReturnType());  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  t.getReturnType());  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  t.getReturnType());	  Context.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  orphaned  case	72	None	replace
366	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.CALL)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.CALL)  {  switch(parent.getType())  {	  switch(parent.getType())    {    if(parent.getType()    ==    Token.NAME)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
367	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FOR)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.FOR)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.FOR)  {  switch(parent.getType())  {	  switch(parent.getType())    {    if(parent.getType()    ==    Token.NAME)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
368	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.CALL);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.CALL);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()!=    Token.VAR);    	non-compiled	[CE]  orphaned  case	45	None	replace
369	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap,  this);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap,  this);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argumentMap,  this);	  NodeTraversal.traverse(compiler,    n,    parent,    argumentMap);    	non-compiled	[CE]  orphaned  case	36	None	replace
370	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  annotations);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  annotations);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  annotations);	  NodeTraversal.traverse(compiler,    n,    parent,    argumentMap);    	non-compiled	[CE]  orphaned  case	36	None	replace
371	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  event);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  event);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  event);	  NodeTraversal.traverse(compiler,    n,    parent,    event);    	non-compiled	[CE]  orphaned  case	61	None	replace
372	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  event,  this);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  event,  this);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  event,  this);	  NodeTraversal.traverse(compiler,    n,    parent,    event);    	non-compiled	[CE]  orphaned  case	61	None	replace
373	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expr);  break;  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expr);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  expr);  break;	  NodeTraversal.traverse(compiler,    n,    parent);    break;    	non-compiled	[CE]  orphaned  case	71	None	replace
374	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild()  ==  parent);  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild()  ==  parent);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild()  ==  parent);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	18	None	replace
375	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  parent.getFirstChild()  ==  n)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  parent.getFirstChild()  ==  n)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.NAME  &&  parent.getFirstChild()  ==  n)  {  switch(parent.getType())  {	  if(n.getType()    ==    Token.NAME)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
376	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  parent.getChildCount()  >  1)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  parent.getChildCount()  >  1)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.NAME  &&  parent.getChildCount()  >  1)  {  switch(parent.getType())  {	  if(n.getType()    ==    Token.NAME)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
377	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION)  {  switch(parent.getType())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION)  {  switch(parent.getType())  {	  if(n.getType()    ==    Token.NAME)    {    switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
378	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.VAR,  t);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.VAR,  t);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.VAR,  t);	  Context.checkState(n.getType()    ==    Token.VAR,    t);    	non-compiled	[CE]  orphaned  case	66	None	replace
379	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    arguments);    	non-compiled	[CE]  orphaned  case	19	None	replace
380	[BUG]  [BUGGY]  switch(n.getType(),  NodeUtil.UNKNOWN_SYNTHETIC)  {  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  NodeUtil.UNKNOWN_SYNTHETIC)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  NodeUtil.UNKNOWN_SYNTHETIC)  {	  switch(n.getType(),    NodeUtil.EMPTY_STRING)    {    	non-compiled	[CE]  ')'  expected	63	None	replace
381	[BUG]  [BUGGY]  switch(n.getType()  ||  NodeUtil.EMPTY_STRING)  {  [CE]  cannot  find  symbol  EMPTY_STRING  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType()  ||  NodeUtil.EMPTY_STRING)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType()  ||  NodeUtil.EMPTY_STRING)  {	  switch(n.getType(),    NodeUtil.EMPTY_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  EMPTY_STRING	63	None	replace
382	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  break;  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  break;	  Context.checkState(n.getType()    ==    Token.FUNCTION);    break;    	non-compiled	[CE]  orphaned  case	24	None	replace
383	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  t);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  t);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.NAME,  t);	  Context.checkState(n.getType()    ==    Token.NAME,    t);    	non-compiled	[CE]  orphaned  case	70	None	replace
384	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  expr);  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  expr);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  arguments,  expr);	  NodeTraversal.traverse(compiler,    n,    parent,    arguments);    	non-compiled	[CE]  orphaned  case	34	None	replace
385	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  this);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  this);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  arguments,  this);	  NodeTraversal.traverse(compiler,    n,    parent,    arguments);    	non-compiled	[CE]  orphaned  case	34	None	replace
386	[BUG]  [BUGGY]  switch(n,  parent.getLastChild())  {  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n,  parent.getLastChild())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n,  parent.getLastChild())  {	  switch(n.getLastChild())    {    	non-compiled	[CE]  ')'  expected	27	None	replace
387	[BUG]  [BUGGY]  switch(n.getLastChild().getString())  {  [CE]  incompatible  types  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getLastChild().getString())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getLastChild().getString())  {	  switch(n.getLastChild())    {    	non-compiled	[CE]  incompatible  types	27	None	replace
388	[BUG]  [BUGGY]  switch(n.getString(),  NodeUtil.isExpressionNode(parent))  {  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getString(),  NodeUtil.isExpressionNode(parent))  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getString(),  NodeUtil.isExpressionNode(parent))  {	  switch(n.getString(),    parent)    {    	non-compiled	[CE]  ')'  expected	92	None	replace
389	[BUG]  [BUGGY]  switch(n.getString(),  t.getModule())  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getString(),  t.getModule())  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getString(),  t.getModule())  {	  switch(n.getString(),    parent)    {    	non-compiled	[CE]  ')'  expected	92	None	replace
390	[BUG]  [BUGGY]  switch(n!=  parent.getType()  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  incomparable  types:  Node  and  int  [FE]        RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n!=  parent.getType()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n!=  parent.getType()  &&  parent.getType()  ==  Token.FUNCTION)  {	  switch(parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  incomparable  types:  Node  and  int	57	None	replace
391	[BUG]  [BUGGY]  Switch(n.getType()  ||  parent.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Switch(n.getType()  ||  parent.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Switch(n.getType()  ||  parent.getType()  ==  Token.VAR)  {	  Switch(n.getType())    {    	non-compiled	[CE]  ';'  expected	14	None	replace
392	[BUG]  [BUGGY]  switch(n.getFirstChild().getType(),  NodeUtil.NO_OBJECT_TYPE)  {  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getFirstChild().getType(),  NodeUtil.NO_OBJECT_TYPE)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild().getType(),  NodeUtil.NO_OBJECT_TYPE)  {	  switch(n.getType(),    NodeUtil.NO_OBJECT_TYPE)    {    	non-compiled	[CE]  ')'  expected	64	None	replace
393	[BUG]  [BUGGY]  switch(n.getType()  ||  NodeUtil.NO_OBJECT_TYPE)  {  [CE]  cannot  find  symbol  NO_OBJECT_TYPE  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType()  ||  NodeUtil.NO_OBJECT_TYPE)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType()  ||  NodeUtil.NO_OBJECT_TYPE)  {	  switch(n.getType(),    NodeUtil.NO_OBJECT_TYPE)    {    	non-compiled	[CE]  cannot  find  symbol  NO_OBJECT_TYPE	64	None	replace
394	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  n.getFirstChild());  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  n.getFirstChild());  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.NAME,  n.getFirstChild());	  Context.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  orphaned  case	42	None	replace
395	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  t.getSourceName());  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  t.getSourceName());  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.NAME,  t.getSourceName());	  Context.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  orphaned  case	42	None	replace
396	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE  ||  n.getType()  ==  Token.CALL);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE  ||  n.getType()  ==  Token.CALL);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE  ||  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.NAME,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  orphaned  case	41	None	replace
397	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE  ||  n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE  ||  n.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.NAME,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  orphaned  case	41	None	replace
398	[BUG]  [BUGGY]  Node  parent  =  t.getParentNode();  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Node  parent  =  t.getParentNode();  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  parent  =  t.getParentNode();	  Node    parent    =    t.getParent();    	non-compiled	[CE]  orphaned  case	12	None	replace
399	[BUG]  [BUGGY]  Switch(n.getType())  {  Node  parent  =  n.getParent();  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Switch(n.getType())  {  Node  parent  =  n.getParent();  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Switch(n.getType())  {  Node  parent  =  n.getParent();	  switch(parent.getType())    {    Node    parent    =    n.getParent();    	non-compiled	[CE]  ';'  expected	3	None	replace
400	[BUG]  [BUGGY]  switch(n.getType())  {  parent  =  n.getParent();  [CE]  case,  default,  or  '}'  expected  [FE]              RuntimeException      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType())  {  parent  =  n.getParent();  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType())  {  parent  =  n.getParent();	  switch(parent.getType())    {    Node    parent    =    n.getParent();    	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	replace
401	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  t.getModule());  break;  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  t.getModule());  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  t.getModule());  break;	  Context.checkState(n.getType()    ==    Token.NAME);    break;    	non-compiled	[CE]  orphaned  case	76	None	replace
402	[BUG]  [BUGGY]  switch(n.getType(),  false)  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  switch(n.getType(),  false)  {  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  false)  {	  switch(n.getType(),    MAKE_LOCAL_NAMES_UNIQUE)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
403	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.NAME);  break;  [CE]  orphaned  case  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.NAME);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.NAME);  break;	  Context.checkState(n.getType()    ==    Token.GETPROP);    break;    	non-compiled	[CE]  orphaned  case	26	None	replace
404	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.SETPROP);  break;  [CE]  orphaned  case  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.SETPROP);  break;  [BUGGY]      case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.SETPROP);  break;	  Context.checkState(n.getType()    ==    Token.GETPROP);    break;    	non-compiled	[CE]  orphaned  case	26	None	replace
405	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(n));  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(n));  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(n));	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  orphaned  case	68	None	replace
406	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isVarDeclaration(n));  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isVarDeclaration(n));  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isVarDeclaration(n));	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  orphaned  case	68	None	replace
407	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  CONVERT_WHILE_TO_FOR);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  CONVERT_WHILE_TO_FOR);  [BUGGY]      switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(     "WHILE  node     ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  CONVERT_WHILE_TO_FOR);	  Context.checkState(n.getType()    ==    Token.VAR,    arguments);    	non-compiled	[CE]  orphaned  case	44	None	replace
