bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  switch(parent.getType())  {  Node  parent  =  n.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]    RuntimeException    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(parent.getType())  {  Node  parent  =  n.getFirstChild();  break;  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType())    {    Node  parent  =  n.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
2	[BUG]  [BUGGY]  switch(parent.getType())  {  Node  parent  =  n.getParent();  break;  [CE]  case,  default,  or  '}'  expected  [FE]      RuntimeException    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(parent.getType())  {  Node  parent  =  n.getParent();  break;  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType())    {    Node  parent  =  n.getParent();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
3	[BUG]  [BUGGY]  switch(parent.getType())  {  Node  parent  =  n.getParent();  [CE]  case,  default,  or  '}'  expected  [FE]        RuntimeException    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(parent.getType())  {  Node  parent  =  n.getParent();  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType())    {    Node  parent  =  n.getParent();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
4	[BUG]  [BUGGY]  switch(parent.getType())  {  Node  parent  =  n.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]          RuntimeException    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(parent.getType())  {  Node  parent  =  n.getFirstChild();  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType())    {    Node  parent  =  n.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
5	[BUG]  [BUGGY]  switch(parent.getType())  {  Node  parent  =  n.getLastChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]            RuntimeException    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(parent.getType())  {  Node  parent  =  n.getLastChild();  break;  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType())    {    Node  parent  =  n.getLastChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
6	[BUG]  [BUGGY]  switch(parent.getType())  {  Node  parent  =  n.getLastChild();  [CE]  case,  default,  or  '}'  expected  [FE]              RuntimeException    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(parent.getType())  {  Node  parent  =  n.getLastChild();  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType())    {    Node  parent  =  n.getLastChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
7	[BUG]  [BUGGY]  Node  n  =  t.getFirstChild();  [CE]  orphaned  case  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  n  =  t.getFirstChild();  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  n  =  t.getFirstChild();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	6	None	replace
8	[BUG]  [BUGGY]  Node  n  =  n.getNext();  [CE]  orphaned  case  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  n  =  n.getNext();  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  n  =  n.getNext();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	6	None	replace
9	[BUG]  [BUGGY]  Node  parent  =  n.getNext();  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  parent  =  n.getNext();  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  parent  =  n.getNext();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  orphaned  case	9	None	replace
10	[BUG]  [BUGGY]  Node  parent  =  n.getLastChild();  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  parent  =  n.getLastChild();  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  parent  =  n.getLastChild();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  orphaned  case	9	None	replace
11	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  parent  =  n.getFirstChild();  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  parent  =  n.getFirstChild();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  orphaned  case	9	None	replace
12	[BUG]  [BUGGY]  Node  parent  =  t.getParent();  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  parent  =  t.getParent();  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  parent  =  t.getParent();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  orphaned  case	9	None	replace
13	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(n.getType()  ==  Token.NAME)  {  switch(parent.getType())  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.NAME)  {  switch(parent.getType())  {	  switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
14	[BUG]  [BUGGY]  Switch(n.getType())  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Switch(n.getType())  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Switch(n.getType())  {	  switch(parent.getType())    {    	non-compiled	[CE]  ';'  expected	4	None	replace
15	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  switch(parent.getType())  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.GETPROP)  {  switch(parent.getType())  {	  switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
16	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  switch(parent.getType())  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  switch(parent.getType())  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  switch(parent.getType())  {	  switch(parent.getType())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
17	[BUG]  [BUGGY]  Node  n  =  parent.getLastChild();  [CE]  orphaned  case  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  n  =  parent.getLastChild();  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  n  =  parent.getLastChild();	      Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
18	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION);	      Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	11	None	replace
19	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  arguments);  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  arguments);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  arguments);	      Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	11	None	replace
20	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	      Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	11	None	replace
21	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	      Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	11	None	replace
22	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  break;  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  parent  =  n.getParent();  break;  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  parent  =  n.getParent();  break;	      	non-compiled	[CE]  orphaned  case	5	None	replace
23	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  break;  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  n  =  n.getFirstChild();  break;  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  n  =  n.getFirstChild();  break;	      	non-compiled	[CE]  orphaned  case	5	None	replace
24	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  break;  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  break;  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION);  break;	      	non-compiled	[CE]  orphaned  case	5	None	replace
25	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  break;  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  n  =  parent.getFirstChild();  break;  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  n  =  parent.getFirstChild();  break;	      	non-compiled	[CE]  orphaned  case	5	None	replace
26	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP);  break;  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP);  break;  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.GETPROP);  break;	      	non-compiled	[CE]  orphaned  case	5	None	replace
27	[BUG]  [BUGGY]  switch(n.getLastChild())  {  [CE]  incompatible  types  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(n.getLastChild())  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getLastChild())  {	  switch(n.getFirstChild())    {    	non-compiled	[CE]  incompatible  types	1	None	replace
28	[BUG]  [BUGGY]  switch(n.getFirstChild(),  parent)  {  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(n.getFirstChild(),  parent)  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild(),  parent)  {	  switch(n.getFirstChild())    {    	non-compiled	[CE]  ')'  expected	1	None	replace
29	[BUG]  [BUGGY]  switch(n.getFirstChild(),  arguments)  {  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(n.getFirstChild(),  arguments)  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild(),  arguments)  {	  switch(n.getFirstChild())    {    	non-compiled	[CE]  ')'  expected	1	None	replace
30	[BUG]  [BUGGY]  Node  n  =  t.getLastChild();  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  n  =  t.getLastChild();  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  n  =  t.getLastChild();	      Node    n    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	8	None	replace
31	[BUG]  [BUGGY]  Node  n  =  t.getParent();  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  n  =  t.getParent();  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  n  =  t.getParent();	      Node    n    =    parent.getParent();    	non-compiled	[CE]  orphaned  case	10	None	replace
32	[BUG]  [BUGGY]  Node  n  =  n.getParent();  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  n  =  n.getParent();  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  n  =  n.getParent();	      Node    n    =    parent.getParent();    	non-compiled	[CE]  orphaned  case	10	None	replace
33	[BUG]  [BUGGY]  Node  n  =  parent.getNext();  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  n  =  parent.getNext();  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  n  =  parent.getNext();	      Node    n    =    parent.getParent();    	non-compiled	[CE]  orphaned  case	10	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments);  [CE]  orphaned  case  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  arguments);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  orphaned  case	12	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argument);  [CE]  orphaned  case  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argument);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argument);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  orphaned  case	12	None	replace
36	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap);  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argumentMap);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  orphaned  case	12	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expectedConst);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expectedConst);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  expectedConst);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  orphaned  case	12	None	replace
38	[BUG]  [BUGGY]  switch(n.getString(),  arguments)  {  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(n.getString(),  arguments)  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getString(),  arguments)  {	  switch(n.getString())    {    	non-compiled	[CE]  ')'  expected	16	None	replace
39	[BUG]  [BUGGY]  switch(n.getString(),  argument)  {  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(n.getString(),  argument)  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getString(),  argument)  {	  switch(n.getString())    {    	non-compiled	[CE]  ')'  expected	16	None	replace
40	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  arguments);  [CE]  orphaned  case  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  arguments);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  arguments);	      Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	13	None	replace
41	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  MAKE_LOCAL_NAMES_UNIQUE);	      Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	13	None	replace
42	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()!=  Token.NAME);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.NAME);	      Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	13	None	replace
43	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  parent);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  parent);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  parent);	      Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	13	None	replace
44	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  arguments);  [CE]  orphaned  case  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  arguments);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  arguments);	      Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	15	None	replace
45	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.VAR);  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()!=  Token.VAR);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()!=  Token.VAR);	      Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	15	None	replace
46	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	      Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	15	None	replace
47	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	      Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	15	None	replace
48	[BUG]  [BUGGY]  Node  expr  =  n.getLastChild();  [CE]  orphaned  case  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  expr  =  n.getLastChild();  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  expr  =  n.getLastChild();	      Node    expr    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	14	None	replace
49	[BUG]  [BUGGY]  Node  expr  =  parent.getFirstChild();  [CE]  orphaned  case  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  expr  =  parent.getFirstChild();  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  expr  =  parent.getFirstChild();	      Node    expr    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	14	None	replace
50	[BUG]  [BUGGY]  Node  expr  =  n.getNext();  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  expr  =  n.getNext();  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  expr  =  n.getNext();	      Node    expr    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	14	None	replace
51	[BUG]  [BUGGY]  Node  expr  =  n.getParent();  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  expr  =  n.getParent();  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  expr  =  n.getParent();	      Node    expr    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	14	None	replace
52	[BUG]  [BUGGY]  switch(n.getType(),  MAKE_LOCAL_NAMES_UNIQUE)  {  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(n.getType(),  MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  MAKE_LOCAL_NAMES_UNIQUE)  {	  switch(n.getType(),    parent)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
53	[BUG]  [BUGGY]  switch(n.getType(),  parent.cloneTree())  {  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(n.getType(),  parent.cloneTree())  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  parent.cloneTree())  {	  switch(n.getType(),    parent)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
54	[BUG]  [BUGGY]  switch(n.getType(),  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(n.getType(),  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  NodeUtil.isFunctionDeclaration(parent))  {	  switch(n.getType(),    parent)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
55	[BUG]  [BUGGY]  switch(n.getType(),  NodeUtil.isExpressionNode(parent))  {  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(n.getType(),  NodeUtil.isExpressionNode(parent))  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  NodeUtil.isExpressionNode(parent))  {	  switch(n.getType(),    parent)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
56	[BUG]  [BUGGY]  Node  n  =  node.getLastChild();  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  n  =  node.getLastChild();  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  n  =  node.getLastChild();	      Node    n    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	8	None	replace
57	[BUG]  [BUGGY]  switch(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  incompatible  types  [FE]    RuntimeException    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {	  switch(parent.getType())    {    	non-compiled	[CE]  incompatible  types	4	None	replace
58	[BUG]  [BUGGY]  switch(parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  [CE]  incompatible  types  [FE]      RuntimeException    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent!=  null  &&  parent.getType()  ==  Token.NAME)  {	  switch(parent.getType())    {    	non-compiled	[CE]  incompatible  types	4	None	replace
59	[BUG]  [BUGGY]  switch(parent!=  null  &&  parent.getType()  ==  Token.VAR)  {  [CE]  incompatible  types  [FE]        RuntimeException    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(parent!=  null  &&  parent.getType()  ==  Token.VAR)  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent!=  null  &&  parent.getType()  ==  Token.VAR)  {	  switch(parent.getType())    {    	non-compiled	[CE]  incompatible  types	4	None	replace
60	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [CE]  orphaned  case  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  orphaned  case	12	None	replace
61	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  event);  [CE]  orphaned  case  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  event);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  event);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  orphaned  case	12	None	replace
62	[BUG]  [BUGGY]  switch(n.getType(),  NodeUtil.NO_TYPE)  {  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(n.getType(),  NodeUtil.NO_TYPE)  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  NodeUtil.NO_TYPE)  {	  switch(n.getType(),    parent)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
63	[BUG]  [BUGGY]  switch(n.getType(),  NodeUtil.EMPTY_STRING)  {  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(n.getType(),  NodeUtil.EMPTY_STRING)  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  NodeUtil.EMPTY_STRING)  {	  switch(n.getType(),    parent)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
64	[BUG]  [BUGGY]  switch(n.getType(),  NodeUtil.NO_OBJECT_TYPE)  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(n.getType(),  NodeUtil.NO_OBJECT_TYPE)  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  NodeUtil.NO_OBJECT_TYPE)  {	  switch(n.getType(),    parent)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
65	[BUG]  [BUGGY]  switch(parent.getFirstChild())  {  [CE]  incompatible  types  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(parent.getFirstChild())  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getFirstChild())  {	  switch(n.getFirstChild())    {    	non-compiled	[CE]  incompatible  types	1	None	replace
66	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  t);  [CE]  orphaned  case  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  t);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  t);	      Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	15	None	replace
67	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  parent);  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  parent);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  parent);	      Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	15	None	replace
68	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	      Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	11	None	replace
69	[BUG]  [BUGGY]  Node  n  =  node.getFirstChild();  [CE]  orphaned  case  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  n  =  node.getFirstChild();  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  n  =  node.getFirstChild();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	6	None	replace
70	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  t);  [CE]  orphaned  case  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  t);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  t);	      Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	13	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  break;  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  break;  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  break;	      	non-compiled	[CE]  orphaned  case	5	None	replace
72	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [CE]  orphaned  case  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  t.getModule());	      Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	13	None	replace
73	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  CONVERT_WHILE);  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  CONVERT_WHILE);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  CONVERT_WHILE);	      Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	13	None	replace
74	[BUG]  [BUGGY]  switch(n.getFirstChild()).restrictByNotNullOrUndefined()  {  [CE]  '{'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(n.getFirstChild()).restrictByNotNullOrUndefined()  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild()).restrictByNotNullOrUndefined()  {	  switch(n.getFirstChild())    {    	non-compiled	[CE]  '{'  expected	1	None	replace
75	[BUG]  [BUGGY]  Switch(n.getFirstChild())  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Switch(n.getFirstChild())  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Switch(n.getFirstChild())  {	  switch(n.getFirstChild())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
76	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  break;  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  break;  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.NAME);  break;	      	non-compiled	[CE]  orphaned  case	5	None	replace
77	[BUG]  [BUGGY]  Node  expr  =  n.getFirstChild();  break;  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  expr  =  n.getFirstChild();  break;  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  expr  =  n.getFirstChild();  break;	      	non-compiled	[CE]  orphaned  case	5	None	replace
78	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR);  break;  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR);  break;  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR);  break;	      	non-compiled	[CE]  orphaned  case	5	None	replace
79	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);	      Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	11	None	replace
80	[BUG]  [BUGGY]  switch(n.getFirstChild().getType(),  parent)  {  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(n.getFirstChild().getType(),  parent)  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getFirstChild().getType(),  parent)  {	  switch(n.getType(),    parent)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
81	[BUG]  [BUGGY]  switch(n.getType(),  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(n.getType(),  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  NodeUtil.isFunctionDeclaration(n))  {	  switch(n.getType(),    parent)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
82	[BUG]  [BUGGY]  switch(n.getType(),  NodeUtil.isVarDeclaration(n))  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(n.getType(),  NodeUtil.isVarDeclaration(n))  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getType(),  NodeUtil.isVarDeclaration(n))  {	  switch(n.getType(),    parent)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
83	[BUG]  [BUGGY]  switch(parent.getType()  &  NodeUtil.isFunctionDeclaration(n))  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]    RuntimeException    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(parent.getType()  &  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType()  &  NodeUtil.isFunctionDeclaration(n))  {	  switch(parent.getType())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	4	None	replace
84	[BUG]  [BUGGY]  switch(parent.getType()  &  NodeUtil.isExpressionNode(n))  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]      RuntimeException    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(parent.getType()  &  NodeUtil.isExpressionNode(n))  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType()  &  NodeUtil.isExpressionNode(n))  {	  switch(parent.getType())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	4	None	replace
85	[BUG]  [BUGGY]  switch(parent.getType()  &  NodeUtil.isLiteralValue(n))  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]        RuntimeException    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(parent.getType()  &  NodeUtil.isLiteralValue(n))  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType()  &  NodeUtil.isLiteralValue(n))  {	  switch(parent.getType())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	4	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expr);  [CE]  orphaned  case  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expr);  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  expr);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  orphaned  case	12	None	replace
87	[BUG]  [BUGGY]  switch(parent.getType())  {  Node  parent  =  n.getFirstChild();  switch(parent.getType())  {  [CE]  case,  default,  or  '}'  expected  [FE]    RuntimeException    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(parent.getType())  {  Node  parent  =  n.getFirstChild();  switch(parent.getType())  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType())    {    Node  parent  =  n.getFirstChild();  switch(parent.getType())  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
88	[BUG]  [BUGGY]  switch(parent.getType())  {  switch(parent.getType())  {  [CE]  case,  default,  or  '}'  expected  [FE]      RuntimeException    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(parent.getType())  {  switch(parent.getType())  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType())    {    switch(parent.getType())  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
89	[BUG]  [BUGGY]  switch(parent.getType())  {  if(parent.getType()!=  Token.NAME)  {  switch(parent.getType())  {  [CE]  case,  default,  or  '}'  expected  [FE]        RuntimeException    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(parent.getType())  {  if(parent.getType()!=  Token.NAME)  {  switch(parent.getType())  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType())    {    if(parent.getType()!=  Token.NAME)  {  switch(parent.getType())  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
90	[BUG]  [BUGGY]  switch(parent.getType())  {  if(parent.getType()  ==  Token.NAME)  {  switch(parent.getType())  {  [CE]  case,  default,  or  '}'  expected  [FE]          RuntimeException    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(parent.getType())  {  if(parent.getType()  ==  Token.NAME)  {  switch(parent.getType())  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(parent.getType())    {    if(parent.getType()  ==  Token.NAME)  {  switch(parent.getType())  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
91	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  t.getModule());  [CE]  orphaned  case  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  t.getModule());  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  t.getModule());	      Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	15	None	replace
92	[BUG]  [BUGGY]  switch(n.getString(),  parent)  {  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  switch(n.getString(),  parent)  {  [BUGGY]    case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	switch(n.getString(),  parent)  {	  switch(n.getString())    {    	non-compiled	[CE]  ')'  expected	16	None	replace
93	[BUG]  [BUGGY]  Node  expr  =  n.removeFirstChild();  [CE]  orphaned  case  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {    [BUGGY]  Node  expr  =  n.removeFirstChild();  [BUGGY]    switch  (n.getType())  {  case  Token.WHILE:  if  (CONVERT_WHILE_TO_FOR)  {  Node  expr  =  n.getFirstChild();  n.setType(Token.FOR);  n.addChildBefore(new  Node(Token.EMPTY),  expr);  n.addChildAfter(new  Node(Token.EMPTY),  expr);  reportCodeChange(   "WHILE  node   ");  }  break;  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	235	235	1	replace	Node  expr  =  n.removeFirstChild();	      Node    expr    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	14	None	replace
