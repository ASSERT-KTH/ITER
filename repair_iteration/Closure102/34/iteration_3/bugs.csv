bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  varDeclarations  =  n.getFirstChild().getNext().getString();  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  n.getFirstChild().getNext().getString();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  n.getFirstChild().getNext().getString();	  Node    varDeclarations    =    n.getFirstChild().getString();    	non-compiled	[CE]  	123	None	replace
2	[BUG]  [BUGGY]  Node  varDeclarations  =  n.getFirstChild().getLastChild().getString();  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  n.getFirstChild().getLastChild().getString();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  n.getFirstChild().getLastChild().getString();	  Node    varDeclarations    =    n.getFirstChild().getString();    	non-compiled	[CE]  	123	None	replace
3	[BUG]  [BUGGY]  Node  varDeclarations  =  parent.getFirstChild().getString();  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  parent.getFirstChild().getString();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  parent.getFirstChild().getString();	  Node    varDeclarations    =    n.getFirstChild().getString();    	non-compiled	[CE]  	123	None	replace
4	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n.getFirstChild());  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeUtil.removeChild(parent,  n.getFirstChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeUtil.removeChild(parent,  n.getFirstChild());	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  	47	None	replace
5	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n.getLastChild());  [CE]  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeUtil.removeChild(parent,  n.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeUtil.removeChild(parent,  n.getLastChild());	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  	47	None	replace
6	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n,  arguments);  [CE]  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeUtil.removeChild(parent,  n,  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeUtil.removeChild(parent,  n,  arguments);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  	47	None	replace
7	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent);  [CE]  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeUtil.removeChild(n,  parent);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeUtil.removeChild(n,  parent);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  	47	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument,  null);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument,  null);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  this,  argument,  null);	  NodeTraversal.traverse(compiler,    n,    this,    argument);    	non-compiled	[CE]  	40	None	replace
9	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument,  false);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument,  false);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  this,  argument,  false);	  NodeTraversal.traverse(compiler,    n,    this,    argument);    	non-compiled	[CE]  	40	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument,  expectedConst);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument,  expectedConst);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  this,  argument,  expectedConst);	  NodeTraversal.traverse(compiler,    n,    this,    argument);    	non-compiled	[CE]  	40	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argument);  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argument);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argument);	  NodeTraversal.traverse(compiler,    n,    this,    argument);    	non-compiled	[CE]  	40	None	replace
12	[BUG]  [BUGGY]  splitVarDeclarations(n,  parent.getModule(),  arguments);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  parent.getModule(),  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  parent.getModule(),  arguments);	  splitVarDeclarations(n,    parent.getModule());    	non-compiled	[CE]  	67	None	replace
13	[BUG]  [BUGGY]  splitVarDeclarations(n,  parent.getLastChild());  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  parent.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  parent.getLastChild());	  splitVarDeclarations(n,    parent.getModule());    	non-compiled	[CE]  	67	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(parent.getModule()!=  Token.VAR);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(parent.getModule()!=  Token.VAR);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(parent.getModule()!=  Token.VAR);	  splitVarDeclarations(n,    parent.getModule());    	non-compiled	[CE]  	67	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  null,  new  ScopeTicklingCallback());  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  null,  new  ScopeTicklingCallback());  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  parent,  null,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    null,    new    ScopeTicklingCallback());    	non-compiled	[CE]  	76	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  getVarDeclarations(),  new  ScopeTicklingCallback());  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  getVarDeclarations(),  new  ScopeTicklingCallback());  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  getVarDeclarations(),  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    null,    new    ScopeTicklingCallback());    	non-compiled	[CE]  	76	None	replace
17	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  arguments));  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  arguments));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION,  arguments));	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	98	None	replace
18	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION),  arguments);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION),  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION),  arguments);	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	98	None	replace
19	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  argument));  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  argument));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION,  argument));	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	98	None	replace
20	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  t.getModule()));  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  t.getModule()));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION,  t.getModule()));	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	98	None	replace
21	[BUG]  [BUGGY]  Node  var  =  parent.removeFirstChild();  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  var  =  parent.removeFirstChild();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  var  =  parent.removeFirstChild();	  Node    var    =    n.removeFirstChild();    	non-compiled	[CE]  	122	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunctionDeclaration(parent));  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isFunctionDeclaration(parent));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(!NodeUtil.isFunctionDeclaration(parent));	  Preconditions.checkState(!NodeUtil.isVarDeclaration(parent));    	non-compiled	[CE]  	22	None	replace
23	[BUG]  [BUGGY]  n.setType(Token.VAR  |  Token.CALL,  arguments);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR  |  Token.CALL,  arguments);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR  |  Token.CALL,  arguments);	  n.setType(Token.VAR    |    Token.CALL);    	non-compiled	[CE]  	115	None	replace
24	[BUG]  [BUGGY]  n.setType(Token.VAR  &  Token.CALL);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR  &  Token.CALL);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR  &  Token.CALL);	  n.setType(Token.VAR    |    Token.CALL);    	non-compiled	[CE]  	115	None	replace
25	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  arguments);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeUtil.removeChild(parent,  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeUtil.removeChild(parent,  arguments);	  NodeUtil.removeChild(parent);    	non-compiled	[CE]  	45	None	replace
26	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  argument);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeUtil.removeChild(parent,  argument);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeUtil.removeChild(parent,  argument);	  NodeUtil.removeChild(parent);    	non-compiled	[CE]  	45	None	replace
27	[BUG]  [BUGGY]  NodeUtil.removeChild(n);  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeUtil.removeChild(n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeUtil.removeChild(n);	  NodeUtil.removeChild(parent);    	non-compiled	[CE]  	45	None	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  null);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  null);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  this,  arguments,  null);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  	38	None	replace
29	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  arguments);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  	38	None	replace
30	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  expectedConst);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  expectedConst);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  this,  arguments,  expectedConst);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  	38	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  parent);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  parent);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  this,  arguments,  parent);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  	38	None	replace
32	[BUG]  [BUGGY]  n.setType(Token.VAR  |  Token.NAME,  arguments);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR  |  Token.NAME,  arguments);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR  |  Token.NAME,  arguments);	  n.setType(Token.VAR    |    Token.NAME);    	non-compiled	[CE]  	94	None	replace
33	[BUG]  [BUGGY]  n.setType(Token.VAR,  Token.NAME);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR,  Token.NAME);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR,  Token.NAME);	  n.setType(Token.VAR    |    Token.NAME);    	non-compiled	[CE]  	94	None	replace
34	[BUG]  [BUGGY]  n.setType(Token.NAME  |  Token.VAR);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.NAME  |  Token.VAR);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.NAME  |  Token.VAR);	  n.setType(Token.VAR    |    Token.NAME);    	non-compiled	[CE]  	94	None	replace
35	[BUG]  [BUGGY]  n.setType(Token.VAR  |  Token.NAME,  argument);  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR  |  Token.NAME,  argument);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR  |  Token.NAME,  argument);	  n.setType(Token.VAR    |    Token.NAME);    	non-compiled	[CE]  	94	None	replace
36	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments),  n);  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments),  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.getCompiler().report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments),  n);	  t.getCompiler().report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  	31	None	replace
37	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  arguments,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  arguments,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.getCompiler().report(JSError.make(t,  n,  arguments,  MAKE_LOCAL_NAMES_UNIQUE));	  t.getCompiler().report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  	31	None	replace
38	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  parent));  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  parent));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.getCompiler().report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  parent));	  t.getCompiler().report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  	31	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  null);  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  null);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  null);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    arguments);    	non-compiled	[CE]  	72	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  parent);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  parent);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  parent);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    arguments);    	non-compiled	[CE]  	72	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  type);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  type);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  type);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    arguments);    	non-compiled	[CE]  	72	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  this);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  this);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  this);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    arguments);    	non-compiled	[CE]  	72	None	replace
43	[BUG]  [BUGGY]  Node  parent  =  n.getLastChild()  +  1;  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  parent  =  n.getLastChild()  +  1;  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  parent  =  n.getLastChild()  +  1;	  Node    parent    =    n.getParent()    +    1;    	non-compiled	[CE]  	109	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(arguments  ==  null,  arguments.length);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments  ==  null,  arguments.length);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments  ==  null,  arguments.length);	  Preconditions.checkState(arguments    ==    null);    	non-compiled	[CE]  	34	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(arguments    ==    null);    	non-compiled	[CE]  	34	None	replace
46	[BUG]  [BUGGY]  Node  v  =  parent.getNext();  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  v  =  parent.getNext();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  v  =  parent.getNext();	  Node    v    =    n.getNext();    	non-compiled	[CE]  	19	None	replace
47	[BUG]  [BUGGY]  Node  v  =  n.getNext()  ||  n.getType()  ==  Token.VAR;  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  v  =  n.getNext()  ||  n.getType()  ==  Token.VAR;  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  v  =  n.getNext()  ||  n.getType()  ==  Token.VAR;	  Node    v    =    n.getNext();    	non-compiled	[CE]  	19	None	replace
48	[BUG]  [BUGGY]  n.setType(Token.VAR  |  Token.FUNCTION,  arguments);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR  |  Token.FUNCTION,  arguments);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR  |  Token.FUNCTION,  arguments);	  n.setType(Token.VAR    |    Token.FUNCTION);    	non-compiled	[CE]  	95	None	replace
49	[BUG]  [BUGGY]  n.setType(Token.VAR  |  Token.FUNCTION  |  Token.NAME);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR  |  Token.FUNCTION  |  Token.NAME);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR  |  Token.FUNCTION  |  Token.NAME);	  n.setType(Token.VAR    |    Token.FUNCTION);    	non-compiled	[CE]  	95	None	replace
50	[BUG]  [BUGGY]  n.setType(Token.FUNCTION  |  Token.VAR);  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.FUNCTION  |  Token.VAR);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.FUNCTION  |  Token.VAR);	  n.setType(Token.VAR    |    Token.FUNCTION);    	non-compiled	[CE]  	95	None	replace
51	[BUG]  [BUGGY]  n.setType(Token.VAR  &  Token.FUNCTION);  [CE]  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR  &  Token.FUNCTION);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR  &  Token.FUNCTION);	  n.setType(Token.VAR    |    Token.FUNCTION);    	non-compiled	[CE]  	95	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  arguments);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR,  arguments);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	59	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	59	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	59	None	replace
55	[BUG]  [BUGGY]  n  =  parent.getLastChild();  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n  =  parent.getLastChild();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n  =  parent.getLastChild();	  n    =    n.getLastChild();    	non-compiled	[CE]  	6	None	replace
56	[BUG]  [BUGGY]  Node  varDeclarations  =  n.getFirstChild().getFirstChild();  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  n.getFirstChild().getFirstChild();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  n.getFirstChild().getFirstChild();	  Node    varDeclarations    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	106	None	replace
57	[BUG]  [BUGGY]  Node  varDeclarations  =  parent.getFirstChild().getLastChild();  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  parent.getFirstChild().getLastChild();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  parent.getFirstChild().getLastChild();	  Node    varDeclarations    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	106	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  arguments);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  arguments);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  arguments);	  NodeTraversal.traverse(compiler,    n,    this,    new    ScopeTicklingCallback());    	non-compiled	[CE]  	73	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  new  ScopeTicklingCallback());  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  new  ScopeTicklingCallback());  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  parent,  this,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    this,    new    ScopeTicklingCallback());    	non-compiled	[CE]  	73	None	replace
60	[BUG]  [BUGGY]  n.setType(Token.VAR,  name);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR,  name);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR,  name);	  n.setType(Token.VAR,    arguments);    	non-compiled	[CE]  	77	None	replace
61	[BUG]  [BUGGY]  n.setType(Token.VAR,  type);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR,  type);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR,  type);	  n.setType(Token.VAR,    arguments);    	non-compiled	[CE]  	77	None	replace
62	[BUG]  [BUGGY]  n.setType(Token.VAR,  getNamedFunctions());  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR,  getNamedFunctions());  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR,  getNamedFunctions());	  n.setType(Token.VAR,    arguments);    	non-compiled	[CE]  	77	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(arguments!=  null  ||  arguments.length  >  0);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments!=  null  ||  arguments.length  >  0);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments!=  null  ||  arguments.length  >  0);	  Preconditions.checkState(arguments!=    null    &&    arguments.length    >    0);    	non-compiled	[CE]  	35	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(arguments  ==  null  ||  arguments.length  >  0);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments  ==  null  ||  arguments.length  >  0);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments  ==  null  ||  arguments.length  >  0);	  Preconditions.checkState(arguments!=    null    &&    arguments.length    >    0);    	non-compiled	[CE]  	35	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(arguments  ==  null  &&  arguments.length  >  0);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments  ==  null  &&  arguments.length  >  0);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments  ==  null  &&  arguments.length  >  0);	  Preconditions.checkState(arguments!=    null    &&    arguments.length    >    0);    	non-compiled	[CE]  	35	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(arguments  >=  null  ||  arguments.length  >  0);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments  >=  null  ||  arguments.length  >  0);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments  >=  null  ||  arguments.length  >  0);	  Preconditions.checkState(arguments!=    null    &&    arguments.length    >    0);    	non-compiled	[CE]  	35	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CALL);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CALL);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CALL);	  Preconditions.checkState(parent.getType()    ==    Token.VAR    ||    parent.getType()    ==    Token.CALL);    	non-compiled	[CE]  	107	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  &&  parent.getType()  ==  Token.CALL);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  &&  parent.getType()  ==  Token.CALL);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR  &&  parent.getType()  ==  Token.CALL);	  Preconditions.checkState(parent.getType()    ==    Token.VAR    ||    parent.getType()    ==    Token.CALL);    	non-compiled	[CE]  	107	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(parent.getType()    ==    Token.VAR    ||    parent.getType()    ==    Token.CALL);    	non-compiled	[CE]  	107	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()!=  Token.CALL);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()!=  Token.CALL);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()!=  Token.CALL);	  Preconditions.checkState(parent.getType()    ==    Token.VAR    ||    parent.getType()    ==    Token.CALL);    	non-compiled	[CE]  	107	None	replace
71	[BUG]  [BUGGY]  splitVarDeclarations(t,  parent,  n);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(t,  parent,  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(t,  parent,  n);	  splitVarDeclarations(n,    parent,    t);    	non-compiled	[CE]  	85	None	replace
72	[BUG]  [BUGGY]  splitVarDeclarations(n,  parent,  t,  arguments);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  parent,  t,  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  parent,  t,  arguments);	  splitVarDeclarations(n,    parent,    t);    	non-compiled	[CE]  	85	None	replace
73	[BUG]  [BUGGY]  splitVarDeclarations(n,  t,  parent);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  t,  parent);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  t,  parent);	  splitVarDeclarations(n,    parent,    t);    	non-compiled	[CE]  	85	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(n.getModule()  ==  t.getModule());  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(n.getModule()  ==  t.getModule());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(n.getModule()  ==  t.getModule());	  Preconditions.checkState(n.getModule()!=    t.getModule());    	non-compiled	[CE]  	100	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(parent.getModule()!=  t.getModule());  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(parent.getModule()!=  t.getModule());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(parent.getModule()!=  t.getModule());	  Preconditions.checkState(n.getModule()!=    t.getModule());    	non-compiled	[CE]  	100	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(t.getModule()!=  n.getModule());  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(t.getModule()!=  n.getModule());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(t.getModule()!=  n.getModule());	  Preconditions.checkState(n.getModule()!=    t.getModule());    	non-compiled	[CE]  	100	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(n.getModule()  >=  t.getModule());  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(n.getModule()  >=  t.getModule());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(n.getModule()  >=  t.getModule());	  Preconditions.checkState(n.getModule()!=    t.getModule());    	non-compiled	[CE]  	100	None	replace
78	[BUG]  [BUGGY]  Node  var  =  getVar(n.getFirstChild());  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  var  =  getVar(n.getFirstChild());  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  var  =  getVar(n.getFirstChild());	  Node    var    =    node.getFirstChild();    	non-compiled	[CE]  	26	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parent.getType()    ==    Token.VAR    ||    parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	58	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  &&  parent.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  &&  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR  &&  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parent.getType()    ==    Token.VAR    ||    parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	58	None	replace
81	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parent.getType()    ==    Token.VAR    ||    parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	58	None	replace
82	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()!=  Token.FUNCTION);  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()!=  Token.FUNCTION);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()!=  Token.FUNCTION);	  Preconditions.checkState(parent.getType()    ==    Token.VAR    ||    parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	58	None	replace
83	[BUG]  [BUGGY]  mergeVarDeclarations(n.getFirstChild(),  arguments);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(n.getFirstChild(),  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(n.getFirstChild(),  arguments);	  mergeVarDeclarations(n.getFirstChild());    	non-compiled	[CE]  	2	None	replace
84	[BUG]  [BUGGY]  mergeVarDeclarations(n.getFirstChild(),  n);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(n.getFirstChild(),  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(n.getFirstChild(),  n);	  mergeVarDeclarations(n.getFirstChild());    	non-compiled	[CE]  	2	None	replace
85	[BUG]  [BUGGY]  mergeVarDeclarations(n.getFirstChild(),  argument);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(n.getFirstChild(),  argument);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(n.getFirstChild(),  argument);	  mergeVarDeclarations(n.getFirstChild());    	non-compiled	[CE]  	2	None	replace
86	[BUG]  [BUGGY]  moveVarDeclarations(n.getLastChild(),  arguments);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveVarDeclarations(n.getLastChild(),  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveVarDeclarations(n.getLastChild(),  arguments);	  moveVarDeclarations(n.getLastChild());    	non-compiled	[CE]  	43	None	replace
87	[BUG]  [BUGGY]  moveVarDeclarations(parent.getLastChild());  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveVarDeclarations(parent.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveVarDeclarations(parent.getLastChild());	  moveVarDeclarations(n.getLastChild());    	non-compiled	[CE]  	43	None	replace
88	[BUG]  [BUGGY]  moveVarDeclarations(n,  n.getLastChild());  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveVarDeclarations(n,  n.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveVarDeclarations(n,  n.getLastChild());	  moveVarDeclarations(n.getLastChild());    	non-compiled	[CE]  	43	None	replace
89	[BUG]  [BUGGY]  n.replaceChild(parent,  n);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.replaceChild(parent,  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.replaceChild(parent,  n);	  n.replaceChild(n,    parent);    	non-compiled	[CE]  	46	None	replace
90	[BUG]  [BUGGY]  n.replaceChild(n,  parent,  arguments);  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.replaceChild(n,  parent,  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.replaceChild(n,  parent,  arguments);	  n.replaceChild(n,    parent);    	non-compiled	[CE]  	46	None	replace
91	[BUG]  [BUGGY]  n.replaceChild(n,  parent.getFirstChild());  [CE]  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.replaceChild(n,  parent.getFirstChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.replaceChild(n,  parent.getFirstChild());	  n.replaceChild(n,    parent);    	non-compiled	[CE]  	46	None	replace
92	[BUG]  [BUGGY]  n  =  n.getFirstChild()  &&  n.getLastChild().getString().equals( "prototype   "));  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n  =  n.getFirstChild()  &&  n.getLastChild().getString().equals( "prototype   "));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n  =  n.getFirstChild()  &&  n.getLastChild().getString().equals( "prototype   "));	  n    =    n.getFirstChild()    ||    n.getLastChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	113	None	replace
93	[BUG]  [BUGGY]  n  =  parent.getFirstChild()  ||  n.getLastChild().getString().equals( "prototype   "));  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n  =  parent.getFirstChild()  ||  n.getLastChild().getString().equals( "prototype   "));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n  =  parent.getFirstChild()  ||  n.getLastChild().getString().equals( "prototype   "));	  n    =    n.getFirstChild()    ||    n.getLastChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	113	None	replace
94	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  arguments,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Context.report(JSError.make(t,  n,  arguments,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Context.report(JSError.make(t,  n,  arguments,  MAKE_LOCAL_NAMES_UNIQUE));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  	93	None	replace
95	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  STRICT_MODULE_NAMES_UNIQUE,  arguments));  [CE]  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Context.report(JSError.make(t,  n,  STRICT_MODULE_NAMES_UNIQUE,  arguments));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Context.report(JSError.make(t,  n,  STRICT_MODULE_NAMES_UNIQUE,  arguments));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  	93	None	replace
96	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  parent));  [CE]  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  parent));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  parent));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  	93	None	replace
97	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argument));  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argument));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.getCompiler().report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argument));	  t.getCompiler().report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  	105	None	replace
98	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));	  t.getCompiler().report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  	105	None	replace
99	[BUG]  [BUGGY]  Node  varDeclarations  =  n.getLastChild().getNext();  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  n.getLastChild().getNext();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  n.getLastChild().getNext();	  Node    varDeclarations    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	10	None	replace
100	[BUG]  [BUGGY]  Node  varDeclarations  =  parent.getFirstChild().getNext();  [CE]  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  parent.getFirstChild().getNext();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  parent.getFirstChild().getNext();	  Node    varDeclarations    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	10	None	replace
101	[BUG]  [BUGGY]  Node  varDeclarations  =  n.getFirstChild().getParent();  [CE]  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  n.getFirstChild().getParent();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  n.getFirstChild().getParent();	  Node    varDeclarations    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	10	None	replace
102	[BUG]  [BUGGY]  Node  parent  =  t.getLastChild();  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  parent  =  t.getLastChild();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  parent  =  t.getLastChild();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  	50	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(arguments.length  >  3);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments.length  >  3);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments.length  >  3);	  Preconditions.checkState(arguments.length    >    2);    	non-compiled	[CE]  	29	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(arguments.length  >  2  &&  arguments.length  >  0);  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments.length  >  2  &&  arguments.length  >  0);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments.length  >  2  &&  arguments.length  >  0);	  Preconditions.checkState(arguments.length    >    2);    	non-compiled	[CE]  	29	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(arguments!=  null  ||  arguments.size()  >  0);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments!=  null  ||  arguments.size()  >  0);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments!=  null  ||  arguments.size()  >  0);	  Preconditions.checkState(arguments!=    null    &&    arguments.size()    >    0);    	non-compiled	[CE]  	89	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(arguments  ==  null  ||  arguments.size()  >  0);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments  ==  null  ||  arguments.size()  >  0);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments  ==  null  ||  arguments.size()  >  0);	  Preconditions.checkState(arguments!=    null    &&    arguments.size()    >    0);    	non-compiled	[CE]  	89	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(arguments  ==  null  &&  arguments.size()  >  0);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments  ==  null  &&  arguments.size()  >  0);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments  ==  null  &&  arguments.size()  >  0);	  Preconditions.checkState(arguments!=    null    &&    arguments.size()    >    0);    	non-compiled	[CE]  	89	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkState(arguments!=  null  &&  arguments.size()  ==  0);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments!=  null  &&  arguments.size()  ==  0);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments!=  null  &&  arguments.size()  ==  0);	  Preconditions.checkState(arguments!=    null    &&    arguments.size()    >    0);    	non-compiled	[CE]  	89	None	replace
109	[BUG]  [BUGGY]  parent.replaceChild(n,  t);  [CE]  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  t);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  t);	  parent.replaceChild(n,    n);    	non-compiled	[CE]  	48	None	replace
110	[BUG]  [BUGGY]  parent.replaceChild(n,  this);  [CE]  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  this);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  this);	  parent.replaceChild(n,    n);    	non-compiled	[CE]  	48	None	replace
111	[BUG]  [BUGGY]  parent.replaceChild(n,  JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));	  parent.replaceChild(n,    n);    	non-compiled	[CE]  	48	None	replace
112	[BUG]  [BUGGY]  NodeUtil.replaceChild(parent,  n);  [CE]  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeUtil.replaceChild(parent,  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeUtil.replaceChild(parent,  n);	  parent.replaceChild(n,    n);    	non-compiled	[CE]  	48	None	replace
113	[BUG]  [BUGGY]  parent.replaceChild(n,  JSError.make(t,  n,  arguments));  [CE]  [FE]                                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  JSError.make(t,  n,  arguments));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  JSError.make(t,  n,  arguments));	  parent.replaceChild(n,    n);    	non-compiled	[CE]  	48	None	replace
114	[BUG]  [BUGGY]  splitVarDeclarations(n,  t.getModule(),  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  t.getModule(),  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  t.getModule(),  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  splitVarDeclarations(n,    t.getModule(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  	111	None	replace
115	[BUG]  [BUGGY]  splitVarDeclarations(n,  parent.getModule(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  parent.getModule(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  parent.getModule(),  MAKE_LOCAL_NAMES_UNIQUE);	  splitVarDeclarations(n,    t.getModule(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  	111	None	replace
116	[BUG]  [BUGGY]  splitVarDeclarations(t,  n.getModule(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(t,  n.getModule(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(t,  n.getModule(),  MAKE_LOCAL_NAMES_UNIQUE);	  splitVarDeclarations(n,    t.getModule(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  	111	None	replace
117	[BUG]  [BUGGY]  mergeVarDeclarations(n,  t.getModule(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(n,  t.getModule(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(n,  t.getModule(),  MAKE_LOCAL_NAMES_UNIQUE);	  splitVarDeclarations(n,    t.getModule(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  	111	None	replace
118	[BUG]  [BUGGY]  splitVarDeclarations(n,  t.getModule(),  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [CE]  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  t.getModule(),  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  t.getModule(),  MAKE_LOCAL_NAMES_UNIQUE,  argument);	  splitVarDeclarations(n,    t.getModule(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  	111	None	replace
119	[BUG]  [BUGGY]  n.addChildToFront(this);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.addChildToFront(this);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.addChildToFront(this);	  n.addChildToFront(parent);    	non-compiled	[CE]  	102	None	replace
120	[BUG]  [BUGGY]  n.addChildToFront(arguments);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.addChildToFront(arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.addChildToFront(arguments);	  n.addChildToFront(parent);    	non-compiled	[CE]  	102	None	replace
121	[BUG]  [BUGGY]  Node  varDeclarations  =  getVarDeclarations(n.getFirstChild(),  arguments);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  getVarDeclarations(n.getFirstChild(),  arguments);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  getVarDeclarations(n.getFirstChild(),  arguments);	  Node    varDeclarations    =    getVarDeclarations(n.getFirstChild());    	non-compiled	[CE]  	9	None	replace
122	[BUG]  [BUGGY]  Node  varDeclarations  =  getVarDeclarations(n.getFirstChild(),  n.getLastChild());  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  getVarDeclarations(n.getFirstChild(),  n.getLastChild());  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  getVarDeclarations(n.getFirstChild(),  n.getLastChild());	  Node    varDeclarations    =    getVarDeclarations(n.getFirstChild());    	non-compiled	[CE]  	9	None	replace
123	[BUG]  [BUGGY]  Node  varDeclarations  =  getVarDeclarations(parent.getFirstChild());  [CE]  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  getVarDeclarations(parent.getFirstChild());  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  getVarDeclarations(parent.getFirstChild());	  Node    varDeclarations    =    getVarDeclarations(n.getFirstChild());    	non-compiled	[CE]  	9	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(arguments  ==  null,  arguments.length  >  0);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments  ==  null,  arguments.length  >  0);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments  ==  null,  arguments.length  >  0);	  Preconditions.checkState(arguments!=    null,    arguments.length    >    0);    	non-compiled	[CE]  	110	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkState(arguments!=  null,  arguments.length  >  1);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments!=  null,  arguments.length  >  1);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments!=  null,  arguments.length  >  1);	  Preconditions.checkState(arguments!=    null,    arguments.length    >    0);    	non-compiled	[CE]  	110	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(arguments  >=  null,  arguments.length  >  0);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments  >=  null,  arguments.length  >  0);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments  >=  null,  arguments.length  >  0);	  Preconditions.checkState(arguments!=    null,    arguments.length    >    0);    	non-compiled	[CE]  	110	None	replace
127	[BUG]  [BUGGY]  Node  varDeclarations  =  getVarDeclarations(parent.getLastChild());  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  getVarDeclarations(parent.getLastChild());  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  getVarDeclarations(parent.getLastChild());	  Node    varDeclarations    =    getVarDeclarations(n.getLastChild());    	non-compiled	[CE]  	54	None	replace
128	[BUG]  [BUGGY]  Node  varDeclarations  =  getVarDeclarations(n.getLastChild(),  arguments);  [CE]  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  getVarDeclarations(n.getLastChild(),  arguments);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  getVarDeclarations(n.getLastChild(),  arguments);	  Node    varDeclarations    =    getVarDeclarations(n.getLastChild());    	non-compiled	[CE]  	54	None	replace
129	[BUG]  [BUGGY]  Node  varDeclarations  =  getVarDeclarations(n.getLastChild(),  n);  [CE]  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  getVarDeclarations(n.getLastChild(),  n);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  getVarDeclarations(n.getLastChild(),  n);	  Node    varDeclarations    =    getVarDeclarations(n.getLastChild());    	non-compiled	[CE]  	54	None	replace
130	[BUG]  [BUGGY]  parseVarDeclarations(t,  n);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parseVarDeclarations(t,  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parseVarDeclarations(t,  n);	  splitVarDeclarations(t,    n);    	non-compiled	[CE]  	64	None	replace
131	[BUG]  [BUGGY]  splitVarDeclarations(t,  n,  arguments);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(t,  n,  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(t,  n,  arguments);	  splitVarDeclarations(t,    n);    	non-compiled	[CE]  	64	None	replace
132	[BUG]  [BUGGY]  Node  v  =  parent.removeFirstChild();  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  v  =  parent.removeFirstChild();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  v  =  parent.removeFirstChild();	  Node    v    =    n.removeFirstChild();    	non-compiled	[CE]  	130	None	replace
133	[BUG]  [BUGGY]  n.setType(Token.VAR,  getNativeType(UNKNOWN_TYPE));  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR,  getNativeType(UNKNOWN_TYPE));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR,  getNativeType(UNKNOWN_TYPE));	  n.setType(Token.VAR,    argument);    	non-compiled	[CE]  	78	None	replace
134	[BUG]  [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  argument));  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  argument));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  Node.newString(Token.NAME,  argument));	  parent.replaceChild(n,    Node.newString(Token.NAME,    arguments));    	non-compiled	[CE]  	121	None	replace
135	[BUG]  [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  arguments),  t);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  arguments),  t);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  Node.newString(Token.NAME,  arguments),  t);	  parent.replaceChild(n,    Node.newString(Token.NAME,    arguments));    	non-compiled	[CE]  	121	None	replace
136	[BUG]  [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  JSError.make(t,  n,  arguments)));  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  JSError.make(t,  n,  arguments)));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  Node.newString(Token.NAME,  JSError.make(t,  n,  arguments)));	  parent.replaceChild(n,    Node.newString(Token.NAME,    arguments));    	non-compiled	[CE]  	121	None	replace
137	[BUG]  [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  getName()));  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  getName()));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  Node.newString(Token.NAME,  getName()));	  parent.replaceChild(n,    Node.newString(Token.NAME,    arguments));    	non-compiled	[CE]  	121	None	replace
138	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	57	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  arguments);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR,  arguments);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	57	None	replace
140	[BUG]  [BUGGY]  splitVarDeclarations(t,  n,  parent,  arguments);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(t,  n,  parent,  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(t,  n,  parent,  arguments);	  splitVarDeclarations(t,    n,    parent);    	non-compiled	[CE]  	65	None	replace
141	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));	  splitVarDeclarations(t,    n,    parent);    	non-compiled	[CE]  	65	None	replace
142	[BUG]  [BUGGY]  splitVarDeclarations(t,  n,  parent,  argument);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(t,  n,  parent,  argument);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(t,  n,  parent,  argument);	  splitVarDeclarations(t,    n,    parent);    	non-compiled	[CE]  	65	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(NodeUtil.isVarDeclaration(n));    	non-compiled	[CE]  	23	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(parent));  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(parent));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(NodeUtil.isVarDeclaration(parent));	  Preconditions.checkState(NodeUtil.isVarDeclaration(n));    	non-compiled	[CE]  	23	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isVarDeclaration(n));    	non-compiled	[CE]  	23	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.VAR);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.VAR);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(NodeUtil.isVarDeclaration(n));    	non-compiled	[CE]  	23	None	replace
147	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  n  =  parent.getFirstChild();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  n  =  parent.getFirstChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  	7	None	replace
148	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.FUNCTION,  arguments));  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.replaceChild(n,  new  Node(Token.FUNCTION,  arguments));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.replaceChild(n,  new  Node(Token.FUNCTION,  arguments));	  n.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	117	None	replace
149	[BUG]  [BUGGY]  n.replaceChild(parent,  new  Node(Token.FUNCTION));  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.replaceChild(parent,  new  Node(Token.FUNCTION));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.replaceChild(parent,  new  Node(Token.FUNCTION));	  n.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	117	None	replace
150	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.FUNCTION),  arguments);  [CE]  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.replaceChild(n,  new  Node(Token.FUNCTION),  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.replaceChild(n,  new  Node(Token.FUNCTION),  arguments);	  n.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	117	None	replace
151	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.FUNCTION,  argument));  [CE]  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.replaceChild(n,  new  Node(Token.FUNCTION,  argument));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.replaceChild(n,  new  Node(Token.FUNCTION,  argument));	  n.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	117	None	replace
152	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY,  arguments));  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY,  arguments));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.replaceChild(n,  new  Node(Token.EMPTY,  arguments));	  n.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	116	None	replace
153	[BUG]  [BUGGY]  n.replaceChild(parent,  new  Node(Token.EMPTY));  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.replaceChild(parent,  new  Node(Token.EMPTY));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.replaceChild(parent,  new  Node(Token.EMPTY));	  n.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	116	None	replace
154	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY),  arguments);  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY),  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.replaceChild(n,  new  Node(Token.EMPTY),  arguments);	  n.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	116	None	replace
155	[BUG]  [BUGGY]  Node  varDeclarations  =  parent.getLastChild().getString();  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  parent.getLastChild().getString();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  parent.getLastChild().getString();	  Node    varDeclarations    =    n.getLastChild().getString();    	non-compiled	[CE]  	112	None	replace
156	[BUG]  [BUGGY]  Node  varDeclarations  =  node.getLastChild().getString();  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  node.getLastChild().getString();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  node.getLastChild().getString();	  Node    varDeclarations    =    n.getLastChild().getString();    	non-compiled	[CE]  	112	None	replace
157	[BUG]  [BUGGY]  Node  varDeclarations  =  n.getfirstChild().getString();  [CE]  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  n.getfirstChild().getString();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  n.getfirstChild().getString();	  Node    varDeclarations    =    n.getLastChild().getString();    	non-compiled	[CE]  	112	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(arguments!=  null,  arguments.length  +  1);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments!=  null,  arguments.length  +  1);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments!=  null,  arguments.length  +  1);	  Preconditions.checkState(arguments!=    null,    arguments.length);    	non-compiled	[CE]  	37	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(arguments!=  null,  arguments.length  -  1);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments!=  null,  arguments.length  -  1);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments!=  null,  arguments.length  -  1);	  Preconditions.checkState(arguments!=    null,    arguments.length);    	non-compiled	[CE]  	37	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  arguments);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  arguments);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  arguments);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  	74	None	replace
161	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  new  ScopeTicklingCallback());  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  arguments,  new  ScopeTicklingCallback());  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  arguments,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  	74	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  argument);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  argument);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  argument);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  	74	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(1));  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(1));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(1));	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  	74	None	replace
164	[BUG]  [BUGGY]  n  =  n.getFirstChild()  &&  n.getLastChild().getString().endsWith( "__ "));  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n  =  n.getFirstChild()  &&  n.getLastChild().getString().endsWith( "__ "));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n  =  n.getFirstChild()  &&  n.getLastChild().getString().endsWith( "__ "));	  n    =    n.getFirstChild()    ||    n.getLastChild().getString().endsWith(   "__   "));    	non-compiled	[CE]  	114	None	replace
165	[BUG]  [BUGGY]  n  =  parent.getFirstChild()  ||  parent.getLastChild().getString().endsWith( "__ "));  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n  =  parent.getFirstChild()  ||  parent.getLastChild().getString().endsWith( "__ "));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n  =  parent.getFirstChild()  ||  parent.getLastChild().getString().endsWith( "__ "));	  n    =    n.getFirstChild()    ||    n.getLastChild().getString().endsWith(   "__   "));    	non-compiled	[CE]  	114	None	replace
166	[BUG]  [BUGGY]  n  =  n.getLastChild()  &&  n.getFirstChild().getString().endsWith( "__ "));  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n  =  n.getLastChild()  &&  n.getFirstChild().getString().endsWith( "__ "));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n  =  n.getLastChild()  &&  n.getFirstChild().getString().endsWith( "__ "));	  n    =    n.getFirstChild()    ||    n.getLastChild().getString().endsWith(   "__   "));    	non-compiled	[CE]  	114	None	replace
167	[BUG]  [BUGGY]  Node  v  =  parent.getLastChild();  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  v  =  parent.getLastChild();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  v  =  parent.getLastChild();	  Node    v    =    n.getLastChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
168	[BUG]  [BUGGY]  Node  v  =  node.getLastChild();  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  v  =  node.getLastChild();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  v  =  node.getLastChild();	  Node    v    =    n.getLastChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
169	[BUG]  [BUGGY]  Node  varDeclarations  =  t.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  t.getFirstChild();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  t.getFirstChild();	  Node    varDeclarations    =    parent.getFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
170	[BUG]  [BUGGY]  Node  varDeclarations  =  node.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  node.getFirstChild();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  node.getFirstChild();	  Node    varDeclarations    =    parent.getFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
171	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [CE]  class,  interface,  or  enum  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));	  t.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
172	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  argument));  [CE]  class,  interface,  or  enum  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  argument));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  argument));	  t.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
173	[BUG]  [BUGGY]  moveVarDeclarations(n.getFirstChild(),  arguments);  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveVarDeclarations(n.getFirstChild(),  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveVarDeclarations(n.getFirstChild(),  arguments);	  moveVarDeclarations(n.getFirstChild());    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
174	[BUG]  [BUGGY]  moveVarDeclarations(n.getFirstChild(),  argument);  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveVarDeclarations(n.getFirstChild(),  argument);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveVarDeclarations(n.getFirstChild(),  argument);	  moveVarDeclarations(n.getFirstChild());    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
175	[BUG]  [BUGGY]  Node  parent  =  t.getNext();  [CE]  class,  interface,  or  enum  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  parent  =  t.getNext();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  parent  =  t.getNext();	  Node    parent    =    t.getParent();    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
176	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.getCompiler().report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));	  t.getCompiler().report(JSError.make(t,    n,    CONVERT_WHILE_TO_FOR));    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
177	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  parent,  CONVERT_WHILE_TO_FOR));  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  parent,  CONVERT_WHILE_TO_FOR));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.getCompiler().report(JSError.make(t,  n,  parent,  CONVERT_WHILE_TO_FOR));	  t.getCompiler().report(JSError.make(t,    n,    CONVERT_WHILE_TO_FOR));    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
178	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR,  arguments));  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR,  arguments));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.getCompiler().report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR,  arguments));	  t.getCompiler().report(JSError.make(t,    n,    CONVERT_WHILE_TO_FOR));    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
179	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  arguments,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  arguments,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.getCompiler().report(JSError.make(t,  n,  arguments,  NON_GLOBAL_NAMES_UNIQUE));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
180	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments),  n);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments),  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments),  n);	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
181	[BUG]  [BUGGY]  splitVarDeclarations(n,  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  n.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  n.getLastChild());	  splitVarDeclarations(n,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
182	[BUG]  [BUGGY]  splitVarDeclarations(n,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  n.getFirstChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  n.getFirstChild());	  splitVarDeclarations(n,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
183	[BUG]  [BUGGY]  splitVarDeclarations(n,  parent.getFirstChild(),  arguments);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  parent.getFirstChild(),  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  parent.getFirstChild(),  arguments);	  splitVarDeclarations(n,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
184	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argument));  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argument));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argument));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
185	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  INVALID_TYPE,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Context.report(JSError.make(t,  n,  INVALID_TYPE,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Context.report(JSError.make(t,  n,  INVALID_TYPE,  MAKE_LOCAL_NAMES_UNIQUE));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
186	[BUG]  [BUGGY]  moveNamedFunctions(n.getFirstChild(),  arguments);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveNamedFunctions(n.getFirstChild(),  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveNamedFunctions(n.getFirstChild(),  arguments);	  moveNamedFunctions(n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
187	[BUG]  [BUGGY]  moveNamedFunctions(parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveNamedFunctions(parent.getFirstChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveNamedFunctions(parent.getFirstChild());	  moveNamedFunctions(n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
188	[BUG]  [BUGGY]  moveNamedFunctions(n.getFirstChild(),  n);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveNamedFunctions(n.getFirstChild(),  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveNamedFunctions(n.getFirstChild(),  n);	  moveNamedFunctions(n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
189	[BUG]  [BUGGY]  splitVarDeclarations(n,  n,  argument);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  n,  argument);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  n,  argument);	  splitVarDeclarations(n,    parent,    argument);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
190	[BUG]  [BUGGY]  splitVarDeclarations(t,  n,  argument);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(t,  n,  argument);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(t,  n,  argument);	  splitVarDeclarations(n,    parent,    argument);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
191	[BUG]  [BUGGY]  splitVarDeclarations(n,  parent,  argument,  t);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  parent,  argument,  t);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  parent,  argument,  t);	  splitVarDeclarations(n,    parent,    argument);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(arguments.length!=  1);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments.length!=  1);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments.length!=  1);	  Preconditions.checkState(arguments.length    >=    0);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
193	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  1,  new  ScopeTicklingCallback());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  1,  new  ScopeTicklingCallback());  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  1,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    arguments,    new    ScopeTicklingCallback());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
194	[BUG]  [BUGGY]  splitVarDeclarations(n.getLastChild(),  n);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n.getLastChild(),  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n.getLastChild(),  n);	  splitVarDeclarations(n.getFirstChild(),    n);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
195	[BUG]  [BUGGY]  splitVarDeclarations(n.getFirstChild(),  parent);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n.getFirstChild(),  parent);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n.getFirstChild(),  parent);	  splitVarDeclarations(n.getFirstChild(),    n);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
196	[BUG]  [BUGGY]  parseVarDeclarations(n,  parent,  arguments);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parseVarDeclarations(n,  parent,  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parseVarDeclarations(n,  parent,  arguments);	  parseVarDeclarations(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
197	[BUG]  [BUGGY]  parseVarDeclarations(t,  n,  parent);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parseVarDeclarations(t,  n,  parent);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parseVarDeclarations(t,  n,  parent);	  parseVarDeclarations(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
198	[BUG]  [BUGGY]  parseVarDeclarations(n,  t);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parseVarDeclarations(n,  t);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parseVarDeclarations(n,  t);	  parseVarDeclarations(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
199	[BUG]  [BUGGY]  parseVarDeclarations(n,  n,  parent);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parseVarDeclarations(n,  n,  parent);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parseVarDeclarations(n,  n,  parent);	  parseVarDeclarations(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(parent.getType()    ==    Token.VAR    ||    parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  &&  parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  &&  parent.getType()  ==  Token.NAME);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR  &&  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(parent.getType()    ==    Token.VAR    ||    parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME,  arguments);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME,  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME,  arguments);	  Preconditions.checkState(parent.getType()    ==    Token.VAR    ||    parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
203	[BUG]  [BUGGY]  n.setType(Token.VAR,  t.getModule());  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR,  t.getModule());  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR,  t.getModule());	  n.setType(Token.VAR,    t);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
204	[BUG]  [BUGGY]  n.setType(Token.VAR,  t.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR,  t.getFirstChild());  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR,  t.getFirstChild());	  n.setType(Token.VAR,    t);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
205	[BUG]  [BUGGY]  n.setType(Token.VAR,  t.getSourceName());  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR,  t.getSourceName());  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR,  t.getSourceName());	  n.setType(Token.VAR,    t);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
206	[BUG]  [BUGGY]  n.setType(Token.VAR,  t.getJSDocInfo());  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR,  t.getJSDocInfo());  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR,  t.getJSDocInfo());	  n.setType(Token.VAR,    t);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
207	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isName(parent));  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isName(parent));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(!NodeUtil.isName(parent));	  Preconditions.checkState(!NodeUtil.isName(n));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
208	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isName(n)||!NodeUtil.isVarDeclaration(n));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isName(n)||!NodeUtil.isVarDeclaration(n));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(!NodeUtil.isName(n)||!NodeUtil.isVarDeclaration(n));	  Preconditions.checkState(!NodeUtil.isName(n));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
209	[BUG]  [BUGGY]  moveNamedFunctions(n,  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveNamedFunctions(n,  n.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveNamedFunctions(n,  n.getLastChild());	  moveNamedFunctions(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
210	[BUG]  [BUGGY]  moveNamedFunctions(n,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveNamedFunctions(n,  n.getFirstChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveNamedFunctions(n,  n.getFirstChild());	  moveNamedFunctions(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
211	[BUG]  [BUGGY]  moveNamedFunctions(n,  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveNamedFunctions(n,  parent.getFirstChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveNamedFunctions(n,  parent.getFirstChild());	  moveNamedFunctions(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
212	[BUG]  [BUGGY]  moveNamedFunctions(n,  parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveNamedFunctions(n,  parent.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveNamedFunctions(n,  parent.getLastChild());	  moveNamedFunctions(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
213	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE,  arguments,  parent));  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE,  arguments,  parent));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.getCompiler().report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE,  arguments,  parent));	  t.getCompiler().report(JSError.make(t,    n,    INVALID_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
214	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE,  arguments),  n);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE,  arguments),  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.getCompiler().report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE,  arguments),  n);	  t.getCompiler().report(JSError.make(t,    n,    INVALID_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(arguments.length  ==  1);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments.length  ==  1);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments.length  ==  1);	  Preconditions.checkState(arguments.length!=    0);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkState(arguments.length!=  2);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments.length!=  2);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments.length!=  2);	  Preconditions.checkState(arguments.length!=    0);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(n)||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(n)||  n.getType()  ==  Token.VAR);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(NodeUtil.isGetProp(n)||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(NodeUtil.isGetProp(n));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(n)||  NodeUtil.isGetProp(n));  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(n)||  NodeUtil.isGetProp(n));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(NodeUtil.isGetProp(n)||  NodeUtil.isGetProp(n));	  Preconditions.checkState(NodeUtil.isGetProp(n));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(n)||  NodeUtil.isGetProp(parent));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(n)||  NodeUtil.isGetProp(parent));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(NodeUtil.isGetProp(n)||  NodeUtil.isGetProp(parent));	  Preconditions.checkState(NodeUtil.isGetProp(n));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
220	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  arguments,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Context.report(JSError.make(t,  n,  arguments,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Context.report(JSError.make(t,  n,  arguments,  NON_GLOBAL_NAMES_UNIQUE));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
221	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments,  parent));  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments,  parent));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments,  parent));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
222	[BUG]  [BUGGY]  Preconditions.checkState(arguments.length  >  1  ||  arguments.length  >  0);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments.length  >  1  ||  arguments.length  >  0);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments.length  >  1  ||  arguments.length  >  0);	  Preconditions.checkState(arguments.length    >    1);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
223	[BUG]  [BUGGY]  Preconditions.checkState(arguments.length  >  1  ||  arguments.length  >  1);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments.length  >  1  ||  arguments.length  >  1);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments.length  >  1  ||  arguments.length  >  1);	  Preconditions.checkState(arguments.length    >    1);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
224	[BUG]  [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE)));  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE)));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  Node.newString(Token.NAME,  JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE)));	  parent.replaceChild(n,    Node.newString(Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
225	[BUG]  [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME),  arguments);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME),  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  Node.newString(Token.NAME),  arguments);	  parent.replaceChild(n,    Node.newString(Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
226	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argument));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argument));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argument));	  t.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
227	[BUG]  [BUGGY]  mergeVarDeclarations(n,  parent,  arguments);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(n,  parent,  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(n,  parent,  arguments);	  mergeVarDeclarations(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
228	[BUG]  [BUGGY]  mergeVarDeclarations(n,  n);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(n,  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(n,  n);	  mergeVarDeclarations(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
229	[BUG]  [BUGGY]  mergeVarDeclarations(n,  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(n,  n.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(n,  n.getLastChild());	  mergeVarDeclarations(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
230	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));	  Context.report(JSError.make(t,    n,    CONVERT_WHILE_TO_FOR));    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
231	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));	  Context.report(JSError.make(t,    n,    CONVERT_WHILE_TO_FOR));    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
232	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR,  arguments));  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Context.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR,  arguments));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Context.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR,  arguments));	  Context.report(JSError.make(t,    n,    CONVERT_WHILE_TO_FOR));    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
233	[BUG]  [BUGGY]  n.addChildToBack(this);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.addChildToBack(this);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.addChildToBack(this);	  n.addChildToBack(parent);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
234	[BUG]  [BUGGY]  n.addChildToBack(arguments);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.addChildToBack(arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.addChildToBack(arguments);	  n.addChildToBack(parent);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
235	[BUG]  [BUGGY]  Preconditions.checkState(arguments!=  null,  parent);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments!=  null,  parent);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments!=  null,  parent);	  Preconditions.checkState(arguments!=    null,    arguments);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
236	[BUG]  [BUGGY]  Preconditions.checkState(arguments!=  null,  n);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments!=  null,  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments!=  null,  n);	  Preconditions.checkState(arguments!=    null,    arguments);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
237	[BUG]  [BUGGY]  Preconditions.checkState(arguments!=  null,  argumentTypes);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments!=  null,  argumentTypes);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments!=  null,  argumentTypes);	  Preconditions.checkState(arguments!=    null,    arguments);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
238	[BUG]  [BUGGY]  moveNamedFunctions(parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveNamedFunctions(parent.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveNamedFunctions(parent.getLastChild());	  moveNamedFunctions(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
239	[BUG]  [BUGGY]  moveNamedFunctions(n.getLastChild(),  arguments);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveNamedFunctions(n.getLastChild(),  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveNamedFunctions(n.getLastChild(),  arguments);	  moveNamedFunctions(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
240	[BUG]  [BUGGY]  moveFunctions(n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveFunctions(n.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveFunctions(n.getLastChild());	  moveNamedFunctions(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
241	[BUG]  [BUGGY]  moveFunction(n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveFunction(n.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveFunction(n.getLastChild());	  moveNamedFunctions(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
242	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expectedConst);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expectedConst);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  expectedConst);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
243	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentCount);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentCount);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argumentCount);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
244	[BUG]  [BUGGY]  mergeVarDeclarations(n.getLastChild(),  arguments);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(n.getLastChild(),  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(n.getLastChild(),  arguments);	  splitVarDeclarations(n.getLastChild(),    arguments);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
245	[BUG]  [BUGGY]  splitVarDeclarations(n.getLastChild(),  arguments,  parent);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n.getLastChild(),  arguments,  parent);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n.getLastChild(),  arguments,  parent);	  splitVarDeclarations(n.getLastChild(),    arguments);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
246	[BUG]  [BUGGY]  t.report(JSError.make(t,  n));  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.report(JSError.make(t,  n));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.report(JSError.make(t,  n));	  splitVarDeclarations(n,    t);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
247	[BUG]  [BUGGY]  t.report(JSError.make(t,  n),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.report(JSError.make(t,  n),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.report(JSError.make(t,  n),  MAKE_LOCAL_NAMES_UNIQUE);	  splitVarDeclarations(n,    t);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
248	[BUG]  [BUGGY]  t.report(JSError.make(t,  n),  NON_GLOBAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.report(JSError.make(t,  n),  NON_GLOBAL_NAMES_UNIQUE);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.report(JSError.make(t,  n),  NON_GLOBAL_NAMES_UNIQUE);	  splitVarDeclarations(n,    t);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
249	[BUG]  [BUGGY]  Node  var  =  parent.getNext();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  var  =  parent.getNext();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  var  =  parent.getNext();	  Node    var    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
250	[BUG]  [BUGGY]  Node  var  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  var  =  n.getParent();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  var  =  n.getParent();	  Node    var    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
251	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(parent)||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(parent)||  n.getType()  ==  Token.VAR);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(NodeUtil.isGetProp(parent)||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(NodeUtil.isGetProp(parent));    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
252	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(parent)||  NodeUtil.isGetProp(n));  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(parent)||  NodeUtil.isGetProp(n));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(NodeUtil.isGetProp(parent)||  NodeUtil.isGetProp(n));	  Preconditions.checkState(NodeUtil.isGetProp(parent));    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
253	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argumentMap,  arguments);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argumentMap,  arguments);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  this,  argumentMap,  arguments);	  NodeTraversal.traverse(compiler,    n,    this,    argumentMap);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
254	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argumentMap,  null);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argumentMap,  null);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  this,  argumentMap,  null);	  NodeTraversal.traverse(compiler,    n,    this,    argumentMap);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
255	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argumentMap,  expectedConst);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argumentMap,  expectedConst);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  this,  argumentMap,  expectedConst);	  NodeTraversal.traverse(compiler,    n,    this,    argumentMap);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
256	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argumentMap);	  NodeTraversal.traverse(compiler,    n,    this,    argumentMap);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
257	[BUG]  [BUGGY]  Preconditions.checkState(arguments.length  ==  2);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments.length  ==  2);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments.length  ==  2);	  Preconditions.checkState(arguments.length    ==    0);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
258	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  arguments);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  arguments);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  arguments);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
259	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  null);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  null);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  null);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
260	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  this);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  this);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  this);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
261	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  argument);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  argument);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  argument);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
262	[BUG]  [BUGGY]  mergeVarDeclarations(n,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(n,  n.getFirstChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(n,  n.getFirstChild());	  mergeVarDeclarations(n,    arguments);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
263	[BUG]  [BUGGY]  mergeVarDeclarations(n,  arguments,  parent);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(n,  arguments,  parent);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(n,  arguments,  parent);	  mergeVarDeclarations(n,    arguments);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
264	[BUG]  [BUGGY]  mergeVarDeclarations(n,  arguments,  t);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(n,  arguments,  t);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(n,  arguments,  t);	  mergeVarDeclarations(n,    arguments);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  arguments);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  arguments);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  arguments);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
266	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  arguments,  null);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  arguments,  null);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  arguments,  null);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
267	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  null);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  null);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  parent,  null);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
268	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  null);	  NodeTraversal.traverse(compiler,    n,    this,    null);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
269	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this);	  NodeTraversal.traverse(compiler,    n,    this,    null);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
270	[BUG]  [BUGGY]  n.setType(Token.FUNCTION  |  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.FUNCTION  |  Token.NAME);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.FUNCTION  |  Token.NAME);	  n.setType(Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
271	[BUG]  [BUGGY]  n.setType(Token.NAME);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.NAME);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.NAME);	  n.setType(Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
272	[BUG]  [BUGGY]  n.setType(Token.FUNCTION  |  Token.SCRIPT);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.FUNCTION  |  Token.SCRIPT);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.FUNCTION  |  Token.SCRIPT);	  n.setType(Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
273	[BUG]  [BUGGY]  mergeVarDeclarations(parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(parent.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(parent.getLastChild());	  mergeVarDeclarations(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
274	[BUG]  [BUGGY]  mergeVarDeclarations(n.getLastChild(),  n);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(n.getLastChild(),  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(n.getLastChild(),  n);	  mergeVarDeclarations(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
275	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isExpressionNode(n));  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isExpressionNode(n));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(!NodeUtil.isExpressionNode(n));	  Preconditions.checkState(!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
276	[BUG]  [BUGGY]  MoveNamedFunctions(n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  MoveNamedFunctions(n.getFirstChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	MoveNamedFunctions(n.getFirstChild());	  MoveNamedFunctions(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
277	[BUG]  [BUGGY]  MoveNamedFunctions(parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  MoveNamedFunctions(parent.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	MoveNamedFunctions(parent.getLastChild());	  MoveNamedFunctions(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
278	[BUG]  [BUGGY]  Preconditions.checkState(n.getLastChild()!=  n);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(n.getLastChild()!=  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(n.getLastChild()!=  n);	  MoveNamedFunctions(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
279	[BUG]  [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(n.getLastChild()  ==  n);	  MoveNamedFunctions(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
280	[BUG]  [BUGGY]  MoveNamedFunctions(n.getLastChild(),  arguments);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  MoveNamedFunctions(n.getLastChild(),  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	MoveNamedFunctions(n.getLastChild(),  arguments);	  MoveNamedFunctions(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
281	[BUG]  [BUGGY]  splitVarDeclarations(t,  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(t,  n.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(t,  n.getLastChild());	  splitVarDeclarations(t,    n.getModule());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
282	[BUG]  [BUGGY]  splitVarDeclarations(t,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(t,  n.getFirstChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(t,  n.getFirstChild());	  splitVarDeclarations(t,    n.getModule());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkState(n.getModule()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(n.getModule()!=  Token.VAR);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(n.getModule()!=  Token.VAR);	  splitVarDeclarations(t,    n.getModule());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
284	[BUG]  [BUGGY]  mergeVarDeclarations(t,  n,  parent);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(t,  n,  parent);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(t,  n,  parent);	  mergeVarDeclarations(t,    n);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
285	[BUG]  [BUGGY]  mergeVarDeclarations(t,  n,  arguments);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(t,  n,  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(t,  n,  arguments);	  mergeVarDeclarations(t,    n);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
286	[BUG]  [BUGGY]  mergeVarDeclarations(t,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(t,  n.getFirstChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(t,  n.getFirstChild());	  mergeVarDeclarations(t,    n);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
287	[BUG]  [BUGGY]  mergeVarDeclarations(t,  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(t,  n.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(t,  n.getLastChild());	  mergeVarDeclarations(t,    n);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
288	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  argument));  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  argument));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  argument));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
289	[BUG]  [BUGGY]  splitVarDeclarations(t,  n.getModule(),  arguments);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(t,  n.getModule(),  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(t,  n.getModule(),  arguments);	  splitVarDeclarations(n,    t.getModule(),    arguments);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
290	[BUG]  [BUGGY]  splitVarDeclarations(n,  t.getModule(),  arguments,  parent);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  t.getModule(),  arguments,  parent);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  t.getModule(),  arguments,  parent);	  splitVarDeclarations(n,    t.getModule(),    arguments);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
291	[BUG]  [BUGGY]  splitVarDeclarations(n,  t.getModule(),  arguments,  null);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  t.getModule(),  arguments,  null);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  t.getModule(),  arguments,  null);	  splitVarDeclarations(n,    t.getModule(),    arguments);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
292	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent);	  moveNamedFunctions(n,    t);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
293	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	MutableNodeTraversal.traverse(compiler,  n,  this);	  moveNamedFunctions(n,    t);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
294	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  arguments);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	MutableNodeTraversal.traverse(compiler,  n,  arguments);	  moveNamedFunctions(n,    t);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
295	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(n!=  null);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(n!=  null);	  Preconditions.checkState(parent!=    null);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
296	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(parent  ==  null);	  Preconditions.checkState(parent!=    null);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
297	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(n  ==  null);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(n  ==  null);	  Preconditions.checkState(parent!=    null);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
298	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parent!=    null);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
299	[BUG]  [BUGGY]  mergeVarDeclarations(n,  t,  arguments);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(n,  t,  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(n,  t,  arguments);	  mergeVarDeclarations(n,    t);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
300	[BUG]  [BUGGY]  mergeVarDeclarations(n.getLastChild(),  t);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(n.getLastChild(),  t);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(n.getLastChild(),  t);	  mergeVarDeclarations(n,    t);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
301	[BUG]  [BUGGY]  mergeVarDeclarations(n.getFirstChild(),  t);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(n.getFirstChild(),  t);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(n.getFirstChild(),  t);	  mergeVarDeclarations(n,    t);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
302	[BUG]  [BUGGY]  Node  parent  =  n.removeLastChild();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  parent  =  n.removeLastChild();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  parent  =  n.removeLastChild();	  Node    parent    =    n.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
303	[BUG]  [BUGGY]  Node  v  =  n.getLastChild().getNext();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  v  =  n.getLastChild().getNext();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  v  =  n.getLastChild().getNext();	  Node    v    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
304	[BUG]  [BUGGY]  Node  v  =  parent.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  v  =  parent.getFirstChild().getNext();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  v  =  parent.getFirstChild().getNext();	  Node    v    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
305	[BUG]  [BUGGY]  Node  v  =  n.getFirstChild().getLastChild();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  v  =  n.getFirstChild().getLastChild();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  v  =  n.getFirstChild().getLastChild();	  Node    v    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
306	[BUG]  [BUGGY]  splitVarDeclarations(n,  n,  arguments);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  n,  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  n,  arguments);	  splitVarDeclarations(n,    parent,    arguments);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
307	[BUG]  [BUGGY]  splitVarDeclarations(n,  parent,  arguments,  t);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  parent,  arguments,  t);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  parent,  arguments,  t);	  splitVarDeclarations(n,    parent,    arguments);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
308	[BUG]  [BUGGY]  splitVarDeclarations(n.getFirstChild(),  arguments,  parent);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n.getFirstChild(),  arguments,  parent);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n.getFirstChild(),  arguments,  parent);	  splitVarDeclarations(n.getFirstChild(),    arguments);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
309	[BUG]  [BUGGY]  splitVarDeclarations(n.getFirstChild(),  arguments,  null);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n.getFirstChild(),  arguments,  null);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n.getFirstChild(),  arguments,  null);	  splitVarDeclarations(n.getFirstChild(),    arguments);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
310	[BUG]  [BUGGY]  Preconditions.checkArgument(arguments  ==  null);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkArgument(arguments  ==  null);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkArgument(arguments  ==  null);	  Preconditions.checkArgument(arguments!=    null);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
311	[BUG]  [BUGGY]  Preconditions.checkNotNull(arguments);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkNotNull(arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkNotNull(arguments);	  Preconditions.checkArgument(arguments!=    null);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
312	[BUG]  [BUGGY]  Node  var  =  n.getLastChild().getNext();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  var  =  n.getLastChild().getNext();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  var  =  n.getLastChild().getNext();	  Node    var    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
313	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  var  =  parent.getFirstChild().getNext();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  var  =  parent.getFirstChild().getNext();	  Node    var    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
314	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild().getParent();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  var  =  n.getFirstChild().getParent();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  var  =  n.getFirstChild().getParent();	  Node    var    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
315	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild().getString();  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  var  =  n.getFirstChild().getString();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  var  =  n.getFirstChild().getString();	  Node    var    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
316	[BUG]  [BUGGY]  n.setType(Token.VAR,  nameNode);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR,  nameNode);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR,  nameNode);	  n.setType(Token.VAR,    argument);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
317	[BUG]  [BUGGY]  n.setType(Token.VAR,  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR,  Token.FUNCTION);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR,  Token.FUNCTION);	  n.setType(Token.VAR,    argument);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
318	[BUG]  [BUGGY]  n.setType(Token.STRING);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.STRING);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.STRING);	  n.setType(Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
319	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(parent));  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(parent));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(parent));	  Preconditions.checkState(NodeUtil.isVarDeclaration(n));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
320	[BUG]  [BUGGY]  Preconditions.checkState(t.getModule()!=  n);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(t.getModule()!=  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(t.getModule()!=  n);	  Preconditions.checkState(n.getModule()!=    t.getModule());    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
321	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  t.getModule());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  t.getModule());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(n.getType()  ==  t.getModule());	  Preconditions.checkState(n.getModule()!=    t.getModule());    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
322	[BUG]  [BUGGY]  n.removeChild(parent,  new  Node(Token.EMPTY));  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.removeChild(parent,  new  Node(Token.EMPTY));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.removeChild(parent,  new  Node(Token.EMPTY));	  n.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
323	[BUG]  [BUGGY]  Node  varDeclarations  =  n.getfirstChild();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  n.getfirstChild();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  n.getfirstChild();	  Node    varDeclarations    =    node.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
324	[BUG]  [BUGGY]  n.removeChild(parent,  new  Node(Token.FUNCTION));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.removeChild(parent,  new  Node(Token.FUNCTION));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.removeChild(parent,  new  Node(Token.FUNCTION));	  n.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
325	[BUG]  [BUGGY]  mergeVarDeclarations(n,  t.getModule(),  arguments);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(n,  t.getModule(),  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(n,  t.getModule(),  arguments);	  splitVarDeclarations(n,    t.getModule(),    arguments);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
326	[BUG]  [BUGGY]  n.setType(Token.VAR,  0);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR,  0);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR,  0);	  n.setType(Token.VAR,    arguments);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
327	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(parent.getType()    ==    Token.VAR    ||    parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
328	[BUG]  [BUGGY]  Preconditions.checkState(arguments  ==  null,  arguments);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments  ==  null,  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments  ==  null,  arguments);	  Preconditions.checkState(arguments!=    null,    arguments);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
329	[BUG]  [BUGGY]  splitVarDeclarations(t,  n,  parent,  argumentCount);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(t,  n,  parent,  argumentCount);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(t,  n,  parent,  argumentCount);	  splitVarDeclarations(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
330	[BUG]  [BUGGY]  divideVarDeclarations(t,  n,  parent,  arguments);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  divideVarDeclarations(t,  n,  parent,  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	divideVarDeclarations(t,  n,  parent,  arguments);	  splitVarDeclarations(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
331	[BUG]  [BUGGY]  splitVarDeclarations(t,  n,  parent,  argumentNode);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(t,  n,  parent,  argumentNode);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(t,  n,  parent,  argumentNode);	  splitVarDeclarations(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
332	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  arguments);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  arguments);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  null,  arguments);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
333	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parser);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parser);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  parser);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
334	[BUG]  [BUGGY]  n.addChildToBack(new  Node(Token.NAME,  n.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.addChildToBack(new  Node(Token.NAME,  n.getFirstChild()));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.addChildToBack(new  Node(Token.NAME,  n.getFirstChild()));	  n.addChildToBack(parent);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
335	[BUG]  [BUGGY]  n.addChildToBack(new  Node(Token.GETPROP,  n.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.addChildToBack(new  Node(Token.GETPROP,  n.getFirstChild()));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.addChildToBack(new  Node(Token.GETPROP,  n.getFirstChild()));	  n.addChildToBack(parent);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
336	[BUG]  [BUGGY]  moveNamedFunctions(n.getFirstChild(),  t);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveNamedFunctions(n.getFirstChild(),  t);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveNamedFunctions(n.getFirstChild(),  t);	  moveNamedFunctions(n,    t);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
337	[BUG]  [BUGGY]  moveNamedFunctions(n.getLastChild(),  t);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveNamedFunctions(n.getLastChild(),  t);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveNamedFunctions(n.getLastChild(),  t);	  moveNamedFunctions(n,    t);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
338	[BUG]  [BUGGY]  Preconditions.checkState(arguments!=  null,  arguments.length  <  0);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments!=  null,  arguments.length  <  0);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments!=  null,  arguments.length  <  0);	  Preconditions.checkState(arguments!=    null,    arguments.length    >    0);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
339	[BUG]  [BUGGY]  Preconditions.checkState(arguments!=  null  &&  arguments.size()  >  1);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments!=  null  &&  arguments.size()  >  1);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments!=  null  &&  arguments.size()  >  1);	  Preconditions.checkState(arguments!=    null    &&    arguments.size()    >    0);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
340	[BUG]  [BUGGY]  Node  varDeclarations  =  n.getFirstChild().getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  n.getFirstChild().getQualifiedName();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  n.getFirstChild().getQualifiedName();	  Node    varDeclarations    =    n.getFirstChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
341	[BUG]  [BUGGY]  Node  var  =  n.getlastChild();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  var  =  n.getlastChild();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  var  =  n.getlastChild();	  Node    var    =    parent.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
342	[BUG]  [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  n));  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  n));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  Node.newString(Token.NAME,  n));	  moveNamedFunctions(parent);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
343	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argumentNames));  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argumentNames));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.getCompiler().report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argumentNames));	  t.getCompiler().report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
344	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE  |  CONVERT_WHILE_TO_FOR));  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE  |  CONVERT_WHILE_TO_FOR));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.getCompiler().report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE  |  CONVERT_WHILE_TO_FOR));	  t.getCompiler().report(JSError.make(t,    n,    CONVERT_WHILE_TO_FOR));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
345	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  getVarDeclarations());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  getVarDeclarations());  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  getVarDeclarations());	  NodeTraversal.traverse(compiler,    n,    null,    new    ScopeTicklingCallback());    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
346	[BUG]  [BUGGY]  splitVarDeclarations(n,  n,  t);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  n,  t);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  n,  t);	  splitVarDeclarations(n,    parent,    t);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
347	[BUG]  [BUGGY]  splitVarDeclarations(t,  parent);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(t,  parent);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(t,  parent);	  splitVarDeclarations(n,    parent,    t);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
348	[BUG]  [BUGGY]  splitVarDeclarations(n,  parent.getParent());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  parent.getParent());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  parent.getParent());	  splitVarDeclarations(n,    parent.getModule());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
349	[BUG]  [BUGGY]  splitVarDeclarations(n,  n.getModule());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  n.getModule());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  n.getModule());	  splitVarDeclarations(n,    parent.getModule());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
350	[BUG]  [BUGGY]  Preconditions.checkArgument(arguments!=  null  &&  arguments.length  >  0);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkArgument(arguments!=  null  &&  arguments.length  >  0);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkArgument(arguments!=  null  &&  arguments.length  >  0);	  Preconditions.checkArgument(arguments!=    null);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
351	[BUG]  [BUGGY]  Preconditions.checkArgument(arguments!=  null  ||  arguments.length  ==  0);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkArgument(arguments!=  null  ||  arguments.length  ==  0);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkArgument(arguments!=  null  ||  arguments.length  ==  0);	  Preconditions.checkArgument(arguments!=    null);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
352	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetProp(parent)||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetProp(parent)||  n.getType()  ==  Token.VAR);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(!NodeUtil.isGetProp(parent)||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(!NodeUtil.isGetProp(parent));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
353	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  null);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  null);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  null);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
354	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n.cloneTree());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeUtil.removeChild(parent,  n.cloneTree());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeUtil.removeChild(parent,  n.cloneTree());	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
355	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n  +  1);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeUtil.removeChild(parent,  n  +  1);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeUtil.removeChild(parent,  n  +  1);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
356	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  parent,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  parent,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.getCompiler().report(JSError.make(t,  n,  parent,  NON_GLOBAL_NAMES_UNIQUE,  arguments));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
357	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.getCompiler().report(JSError.make(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE));	  t.getCompiler().report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
358	[BUG]  [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  0));  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  0));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  Node.newString(Token.NAME,  0));	  parent.replaceChild(n,    Node.newString(Token.NAME,    arguments));    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
359	[BUG]  [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  str));  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  str));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  Node.newString(Token.NAME,  str));	  parent.replaceChild(n,    Node.newString(Token.NAME,    arguments));    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
360	[BUG]  [BUGGY]  moveVarDeclarations(n.getLastChild(),  n);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveVarDeclarations(n.getLastChild(),  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveVarDeclarations(n.getLastChild(),  n);	  moveVarDeclarations(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
361	[BUG]  [BUGGY]  moveNamedDeclarations(n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveNamedDeclarations(n.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveNamedDeclarations(n.getLastChild());	  moveVarDeclarations(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
362	[BUG]  [BUGGY]  n  =  n.getFirstChild()  +  n.getLastChild().getString().equals( "prototype "));  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n  =  n.getFirstChild()  +  n.getLastChild().getString().equals( "prototype "));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n  =  n.getFirstChild()  +  n.getLastChild().getString().equals( "prototype "));	  n    =    n.getFirstChild()    ||    n.getLastChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
363	[BUG]  [BUGGY]  splitVarDeclarations(n,  parent,  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  parent,  n.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  parent,  n.getLastChild());	  splitVarDeclarations(n,    parent,    argument);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
364	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(parent)||  NodeUtil.isGetProp(parent));  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(parent)||  NodeUtil.isGetProp(parent));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(NodeUtil.isGetProp(parent)||  NodeUtil.isGetProp(parent));	  Preconditions.checkState(NodeUtil.isGetProp(parent));    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
365	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(parent)||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(parent)||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(NodeUtil.isGetProp(parent)||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isGetProp(parent));    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
366	[BUG]  [BUGGY]  n.addChildToFront(parent,  n);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.addChildToFront(parent,  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.addChildToFront(parent,  n);	  n.addChildToFront(parent);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
367	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION),  t);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION),  t);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION),  t);	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
368	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION),  n);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION),  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION),  n);	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
369	[BUG]  [BUGGY]  Node  var  =  n.getfirstChild();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  var  =  n.getfirstChild();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  var  =  n.getfirstChild();	  Node    var    =    node.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
370	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  MoveNamedFunctions(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
371	[BUG]  [BUGGY]  MoveNamedFunctions(n,  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  MoveNamedFunctions(n,  n.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	MoveNamedFunctions(n,  n.getLastChild());	  MoveNamedFunctions(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
372	[BUG]  [BUGGY]  MutableMutableState.checkState(n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  MutableMutableState.checkState(n.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	MutableMutableState.checkState(n.getLastChild());	  MoveNamedFunctions(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
373	[BUG]  [BUGGY]  mergeVarDeclarations(n.getFirstChild(),  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(n.getFirstChild(),  n.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(n.getFirstChild(),  n.getLastChild());	  mergeVarDeclarations(n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
374	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments),  n);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments),  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments),  n);	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
375	[BUG]  [BUGGY]  Node  parent  =  n.getPreviousChild();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  parent  =  n.getPreviousChild();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  parent  =  n.getPreviousChild();	  Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
376	[BUG]  [BUGGY]  parseVarDeclarations(n,  n);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parseVarDeclarations(n,  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parseVarDeclarations(n,  n);	  parseVarDeclarations(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
377	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  null);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  null);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  null);	  NodeTraversal.traverse(compiler,    n,    this,    new    ScopeTicklingCallback());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
378	[BUG]  [BUGGY]  n.setType(Token.VAR  |  Token.SCRIPT);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR  |  Token.SCRIPT);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR  |  Token.SCRIPT);	  n.setType(Token.VAR    |    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
379	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.NAME);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(parent!=    null);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
380	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE,  argument));  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE,  argument));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.getCompiler().report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE,  argument));	  t.getCompiler().report(JSError.make(t,    n,    INVALID_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
381	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
382	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
383	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  null);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  null);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  null);	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
384	[BUG]  [BUGGY]  parent.replaceChild(n,  JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));	  parent.replaceChild(n,    n);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
385	[BUG]  [BUGGY]  parent.replaceChild(n,  JSError.make(t,  n,  INVALID_TYPE));  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  JSError.make(t,  n,  INVALID_TYPE));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  JSError.make(t,  n,  INVALID_TYPE));	  parent.replaceChild(n,    n);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
386	[BUG]  [BUGGY]  moveVarDeclarations(n.getFirstChild(),  n);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveVarDeclarations(n.getFirstChild(),  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveVarDeclarations(n.getFirstChild(),  n);	  moveVarDeclarations(n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
387	[BUG]  [BUGGY]  moveVarDeclarations(n.getFirstChild(),  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveVarDeclarations(n.getFirstChild(),  n.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveVarDeclarations(n.getFirstChild(),  n.getLastChild());	  moveVarDeclarations(n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
388	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild()  +  1;  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  parent  =  n.getFirstChild()  +  1;  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  parent  =  n.getFirstChild()  +  1;	  Node    parent    =    n.getParent()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
389	[BUG]  [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  1));  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  1));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  Node.newString(Token.NAME,  1));	  parent.replaceChild(n,    Node.newString(Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
390	[BUG]  [BUGGY]  Node  v  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  v  =  n.getParent();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  v  =  n.getParent();	  Node    v    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
391	[BUG]  [BUGGY]  Preconditions.checkState(arguments  >=  null);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments  >=  null);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments  >=  null);	  Preconditions.checkState(arguments    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
392	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(n)||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(n)||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(NodeUtil.isGetProp(n)||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isGetProp(n));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
393	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.VAR  ||  parent.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.VAR  ||  parent.getType()  ==  Token.CALL);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(parent.getType()!=  Token.VAR  ||  parent.getType()  ==  Token.CALL);	  Preconditions.checkState(parent.getType()    ==    Token.VAR    ||    parent.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
394	[BUG]  [BUGGY]  moveFunctionDeclarations(n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveFunctionDeclarations(n.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveFunctionDeclarations(n.getLastChild());	  moveNamedFunctions(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
395	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n));  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(!NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n));	  Preconditions.checkState(!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
396	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  parent,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Context.report(JSError.make(t,  n,  parent,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Context.report(JSError.make(t,  n,  parent,  NON_GLOBAL_NAMES_UNIQUE));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
397	[BUG]  [BUGGY]  moveNamedFunctions(n,  n);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveNamedFunctions(n,  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveNamedFunctions(n,  n);	  moveNamedFunctions(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
398	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isName(n)||!NodeUtil.mayHaveSideEffects(n));  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isName(n)||!NodeUtil.mayHaveSideEffects(n));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(!NodeUtil.isName(n)||!NodeUtil.mayHaveSideEffects(n));	  Preconditions.checkState(!NodeUtil.isName(n));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
399	[BUG]  [BUGGY]  Preconditions.checkState(arguments  >=  null  &&  arguments.length  >  0);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments  >=  null  &&  arguments.length  >  0);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments  >=  null  &&  arguments.length  >  0);	  Preconditions.checkState(arguments!=    null    &&    arguments.length    >    0);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
400	[BUG]  [BUGGY]  n.setType(Token.VAR,  t)&&  NodeUtil.isStatementBlock(parent);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR,  t)&&  NodeUtil.isStatementBlock(parent);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR,  t)&&  NodeUtil.isStatementBlock(parent);	  n.setType(Token.VAR,    t);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
401	[BUG]  [BUGGY]  n.setType(Token.VAR,  t  +  1);  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR,  t  +  1);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR,  t  +  1);	  n.setType(Token.VAR,    t);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
402	[BUG]  [BUGGY]  n.setType(Token.VAR,  t)&&  NodeUtil.mayHaveSideEffects(n);  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR,  t)&&  NodeUtil.mayHaveSideEffects(n);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR,  t)&&  NodeUtil.mayHaveSideEffects(n);	  n.setType(Token.VAR,    t);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
403	[BUG]  [BUGGY]  n.setType(Token.VAR,  t)&&!NodeUtil.mayHaveSideEffects(n);  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR,  t)&&!NodeUtil.mayHaveSideEffects(n);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR,  t)&&!NodeUtil.mayHaveSideEffects(n);	  n.setType(Token.VAR,    t);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
404	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	  splitVarDeclarations(n,    t);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
405	[BUG]  [BUGGY]  n.setType(Token.VAR  |  Token.LABEL);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR  |  Token.LABEL);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR  |  Token.LABEL);	  n.setType(Token.VAR    |    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
406	[BUG]  [BUGGY]  Node  varDeclarations  =  findVarDeclarations(n.getFirstChild());  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  findVarDeclarations(n.getFirstChild());  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  findVarDeclarations(n.getFirstChild());	  Node    varDeclarations    =    getVarDeclarations(n.getLastChild());    	non-compiled	[CE]  <identifier>  expected	54	None	replace
407	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  parent,  CONVERT_WHILE_TO_FOR));  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Context.report(JSError.make(t,  n,  parent,  CONVERT_WHILE_TO_FOR));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Context.report(JSError.make(t,  n,  parent,  CONVERT_WHILE_TO_FOR));	  Context.report(JSError.make(t,    n,    CONVERT_WHILE_TO_FOR));    	non-compiled	[CE]  <identifier>  expected	91	None	replace
408	[BUG]  [BUGGY]  n  =  n.getLastChild()  ||  n.getFirstChild().getString().endsWith( "__ "));  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n  =  n.getLastChild()  ||  n.getFirstChild().getString().endsWith( "__ "));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n  =  n.getLastChild()  ||  n.getFirstChild().getString().endsWith( "__ "));	  n    =    n.getFirstChild()    ||    n.getLastChild().getString().endsWith(   "__   "));    	non-compiled	[CE]  <identifier>  expected	114	None	replace
409	[BUG]  [BUGGY]  divideVarDeclarations(n.getFirstChild(),  arguments);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  divideVarDeclarations(n.getFirstChild(),  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	divideVarDeclarations(n.getFirstChild(),  arguments);	  splitVarDeclarations(n.getLastChild(),    arguments);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
410	[BUG]  [BUGGY]  moveNamedFunctions(n.getFirstChild(),  n.getLastChild());  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveNamedFunctions(n.getFirstChild(),  n.getLastChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveNamedFunctions(n.getFirstChild(),  n.getLastChild());	  moveNamedFunctions(n.getFirstChild());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
411	[BUG]  [BUGGY]  Node  v  =  n.getFirstChild().getParent();  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  v  =  n.getFirstChild().getParent();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  v  =  n.getFirstChild().getParent();	  Node    v    =    n.getFirstChild().getNext();    	non-compiled	[CE]  <identifier>  expected	131	None	replace
412	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.arguments,  new  ScopeTicklingCallback());  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.arguments,  new  ScopeTicklingCallback());  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  this.arguments,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    arguments,    new    ScopeTicklingCallback());    	non-compiled	[CE]  <identifier>  expected	75	None	replace
413	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argumentNames));  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argumentNames));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argumentNames));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  <identifier>  expected	93	None	replace
414	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMESPACE_ERROR,  arguments));  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMESPACE_ERROR,  arguments));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMESPACE_ERROR,  arguments));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  <identifier>  expected	93	None	replace
415	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments),  n);  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments),  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments),  n);	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  <identifier>  expected	93	None	replace
416	[BUG]  [BUGGY]  Node  parent  =  t.getParentNode();  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  parent  =  t.getParentNode();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  parent  =  t.getParentNode();	  Node    parent    =    t.getParent();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
417	[BUG]  [BUGGY]  Node  varDeclarations  =  getVarDeclarations(n.getFirstChild(),  n);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  getVarDeclarations(n.getFirstChild(),  n);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  getVarDeclarations(n.getFirstChild(),  n);	  Node    varDeclarations    =    getVarDeclarations(n.getFirstChild());    	non-compiled	[CE]  <identifier>  expected	9	None	replace
418	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_INIT_ERROR,  arguments));  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_INIT_ERROR,  arguments));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_INIT_ERROR,  arguments));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  <identifier>  expected	92	None	replace
419	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMESPACE_ERROR));  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMESPACE_ERROR));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMESPACE_ERROR));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  <identifier>  expected	92	None	replace
420	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild().getLastChild();  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  var  =  n.getFirstChild().getLastChild();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  var  =  n.getFirstChild().getLastChild();	  Node    var    =    n.getFirstChild().getNext();    	non-compiled	[CE]  <identifier>  expected	90	None	replace
421	[BUG]  [BUGGY]  n.replaceChild(n,  this);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.replaceChild(n,  this);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.replaceChild(n,  this);	  n.replaceChild(n,    parent);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
422	[BUG]  [BUGGY]  n.replaceChild(n,  next);  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.replaceChild(n,  next);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.replaceChild(n,  next);	  n.replaceChild(n,    parent);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
423	[BUG]  [BUGGY]  n.addChildToFront(t);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.addChildToFront(t);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.addChildToFront(t);	  n.addChildToFront(parent);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
424	[BUG]  [BUGGY]  Preconditions.checkState(arguments.length  >=  2);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(arguments.length  >=  2);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(arguments.length  >=  2);	  Preconditions.checkState(arguments.length    >=    0);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
425	[BUG]  [BUGGY]  moveNamedFunctions(t,  n);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveNamedFunctions(t,  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveNamedFunctions(t,  n);	  moveNamedFunctions(n,    t);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
426	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  STRICT_MODULE_NAMES_UNIQUE,  arguments));  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  STRICT_MODULE_NAMES_UNIQUE,  arguments));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.getCompiler().report(JSError.make(t,  n,  STRICT_MODULE_NAMES_UNIQUE,  arguments));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  <identifier>  expected	32	None	replace
427	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeUtil.redeclareVarsInsideBranch(n);	  NodeUtil.removeChild(parent);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
428	[BUG]  [BUGGY]  NodeUtil.addChildToFront(parent,  n);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeUtil.addChildToFront(parent,  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeUtil.addChildToFront(parent,  n);	  NodeUtil.removeChild(parent);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
429	[BUG]  [BUGGY]  Node  var  =  node.removeFirstChild();  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  var  =  node.removeFirstChild();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  var  =  node.removeFirstChild();	  Node    var    =    n.removeFirstChild();    	non-compiled	[CE]  <identifier>  expected	122	None	replace
430	[BUG]  [BUGGY]  Preconditions.checkArgument(arguments!=  null  &&  arguments.size()  >  0);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkArgument(arguments!=  null  &&  arguments.size()  >  0);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkArgument(arguments!=  null  &&  arguments.size()  >  0);	  Preconditions.checkState(arguments!=    null    &&    arguments.size()    >    0);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
431	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_INIT_ERROR,  arguments));  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_INIT_ERROR,  arguments));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_INIT_ERROR,  arguments));	  t.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  <identifier>  expected	69	None	replace
432	[BUG]  [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  arguments),  n);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  arguments),  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  Node.newString(Token.NAME,  arguments),  n);	  parent.replaceChild(n,    Node.newString(Token.NAME,    arguments));    	non-compiled	[CE]  <identifier>  expected	121	None	replace
433	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  false);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  false);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  false);	  NodeTraversal.traverse(compiler,    n,    null,    new    ScopeTicklingCallback());    	non-compiled	[CE]  <identifier>  expected	76	None	replace
434	[BUG]  [BUGGY]  n.setType(Token.VAR,  getNativeType(VOID_TYPE));  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR,  getNativeType(VOID_TYPE));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR,  getNativeType(VOID_TYPE));	  n.setType(Token.VAR,    arguments);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
435	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null,  arguments);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null,  arguments);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  this,  null,  arguments);	  NodeTraversal.traverse(compiler,    n,    this,    null);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
436	[BUG]  [BUGGY]  splitVarDeclarations(n.getFirstChild(),  arguments,  true);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n.getFirstChild(),  arguments,  true);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n.getFirstChild(),  arguments,  true);	  splitVarDeclarations(n.getFirstChild(),    arguments);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
437	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetProp(n));  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetProp(n));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkArgument(NodeUtil.isGetProp(n));	  Preconditions.checkState(NodeUtil.isGetProp(parent));    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
438	[BUG]  [BUGGY]  n  =  n.getFirstChild();  n.getLastChild().getString().equals( "prototype "));  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n  =  n.getFirstChild();  n.getLastChild().getString().equals( "prototype "));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n  =  n.getFirstChild();  n.getLastChild().getString().equals( "prototype "));	  n    =    n.getFirstChild()    ||    n.getLastChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
439	[BUG]  [BUGGY]  Node  parent  =  n.getImmediateParentNode();  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  parent  =  n.getImmediateParentNode();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  parent  =  n.getImmediateParentNode();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
440	[BUG]  [BUGGY]  mergeVarDeclarations(n,  parent,  t);  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(n,  parent,  t);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(n,  parent,  t);	  mergeVarDeclarations(n,    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
441	[BUG]  [BUGGY]  mergeVarDeclarations(n,  parent,  argument);  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(n,  parent,  argument);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(n,  parent,  argument);	  mergeVarDeclarations(n,    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
442	[BUG]  [BUGGY]  mergeVarDeclarations(n,  parent.getFirstChild());  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(n,  parent.getFirstChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(n,  parent.getFirstChild());	  mergeVarDeclarations(n,    parent);    	non-compiled	[CE]  ')'  expected	3	None	replace
443	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  STRICT_MODULE_NAMES_UNIQUE));  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  STRICT_MODULE_NAMES_UNIQUE));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.getCompiler().report(JSError.make(t,  n,  STRICT_MODULE_NAMES_UNIQUE));	  t.getCompiler().report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  ')'  expected	105	None	replace
444	[BUG]  [BUGGY]  moveNamedFunctions(n,  parent.getParent());  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveNamedFunctions(n,  parent.getParent());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveNamedFunctions(n,  parent.getParent());	  moveNamedFunctions(n,    parent);    	non-compiled	[CE]  ')'  expected	80	None	replace
445	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  expectedConst);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  expectedConst);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  expectedConst);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    arguments);    	non-compiled	[CE]  ')'  expected	72	None	replace
446	[BUG]  [BUGGY]  mergeVarDeclarations(t,  n.getModule(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(t,  n.getModule(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(t,  n.getModule(),  MAKE_LOCAL_NAMES_UNIQUE);	  splitVarDeclarations(n,    t.getModule(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  ')'  expected	111	None	replace
447	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(parent.getType()!=  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parent.getType()    ==    Token.VAR    ||    parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	58	None	replace
448	[BUG]  [BUGGY]  n  =  n.getFirstChild();  n.getLastChild().getString().endsWith( "__ "));  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n  =  n.getFirstChild();  n.getLastChild().getString().endsWith( "__ "));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n  =  n.getFirstChild();  n.getLastChild().getString().endsWith( "__ "));	  n    =    n.getFirstChild()    ||    n.getLastChild().getString().endsWith(   "__   "));    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
449	[BUG]  [BUGGY]  n  =  parent.getFirstChild()  ||  n.getLastChild().getString().endsWith( "__ "));  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n  =  parent.getFirstChild()  ||  n.getLastChild().getString().endsWith( "__ "));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n  =  parent.getFirstChild()  ||  n.getLastChild().getString().endsWith( "__ "));	  n    =    n.getFirstChild()    ||    n.getLastChild().getString().endsWith(   "__   "));    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
450	[BUG]  [BUGGY]  n  =  n.getFirstChild()  ||  n.getLastChild().getString().endsWith( "_ "));  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n  =  n.getFirstChild()  ||  n.getLastChild().getString().endsWith( "_ "));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n  =  n.getFirstChild()  ||  n.getLastChild().getString().endsWith( "_ "));	  n    =    n.getFirstChild()    ||    n.getLastChild().getString().endsWith(   "__   "));    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
451	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  str);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  str);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  this,  str);	  NodeTraversal.traverse(compiler,    n,    this,    argumentMap);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
452	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  extractForVarDeclarations(n);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  extractForVarDeclarations(n);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  this,  extractForVarDeclarations(n);	  NodeTraversal.traverse(compiler,    n,    this,    argumentMap);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
453	[BUG]  [BUGGY]  parseVarDeclarations(n,  parent,  argument);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parseVarDeclarations(n,  parent,  argument);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parseVarDeclarations(n,  parent,  argument);	  parseVarDeclarations(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
454	[BUG]  [BUGGY]  moveVarDeclarations(t,  n.getModule());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  moveVarDeclarations(t,  n.getModule());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	moveVarDeclarations(t,  n.getModule());	  splitVarDeclarations(t,    n.getModule());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
455	[BUG]  [BUGGY]  NodeVarDeclarations  varDeclarations  =  getVarDeclarations(n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeVarDeclarations  varDeclarations  =  getVarDeclarations(n.getFirstChild());  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeVarDeclarations  varDeclarations  =  getVarDeclarations(n.getFirstChild());	  Node    varDeclarations    =    getVarDeclarations(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
456	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments,  expectedConst));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments,  expectedConst));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments,  expectedConst));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
457	[BUG]  [BUGGY]  n.setType(Token.VAR,  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR,  Token.CALL);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR,  Token.CALL);	  n.setType(Token.VAR    |    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
458	[BUG]  [BUGGY]  n.setType(Token.VAR  |  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR  |  Token.BLOCK);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR  |  Token.BLOCK);	  n.setType(Token.VAR    |    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
459	[BUG]  [BUGGY]  n.replaceChild(n,  NodeUtil.newExpr(parent));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.replaceChild(n,  NodeUtil.newExpr(parent));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.replaceChild(n,  NodeUtil.newExpr(parent));	  n.replaceChild(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
460	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE,  arguments,  expectedConst));  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE,  arguments,  expectedConst));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.getCompiler().report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE,  arguments,  expectedConst));	  t.getCompiler().report(JSError.make(t,    n,    INVALID_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
461	[BUG]  [BUGGY]  Node  parent  =  n.getOwnerDocument();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  parent  =  n.getOwnerDocument();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  parent  =  n.getOwnerDocument();	  Node    parent    =    n.getParentNode();    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
462	[BUG]  [BUGGY]  mergeVarDeclarations(parent,  arguments);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(parent,  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(parent,  arguments);	  mergeVarDeclarations(n,    arguments);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
463	[BUG]  [BUGGY]  Node  parent  =  n.getOwnerChild();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  parent  =  n.getOwnerChild();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  parent  =  n.getOwnerChild();	  Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
464	[BUG]  [BUGGY]  Node  parent  =  n.getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  parent  =  n.getNext()  +  1;  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  parent  =  n.getNext()  +  1;	  Node    parent    =    n.getParent()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
465	[BUG]  [BUGGY]  Node  v  =  getVarDeclarations(n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  v  =  getVarDeclarations(n.getFirstChild());  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  v  =  getVarDeclarations(n.getFirstChild());	  Node    v    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
466	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(n));  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(n));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(!NodeUtil.isFunction(n));	  Preconditions.checkState(!NodeUtil.isName(n));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
467	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(parent));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(parent));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(!NodeUtil.isFunction(parent));	  Preconditions.checkState(!NodeUtil.isName(n));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
468	[BUG]  [BUGGY]  divideVarDeclarations(t,  parent,  n);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  divideVarDeclarations(t,  parent,  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	divideVarDeclarations(t,  parent,  n);	  splitVarDeclarations(n,    parent,    t);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
469	[BUG]  [BUGGY]  n.setType(Token.VAR,  t)&&!NodeUtil.isFunctionDeclaration(n);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR,  t)&&!NodeUtil.isFunctionDeclaration(n);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR,  t)&&!NodeUtil.isFunctionDeclaration(n);	  n.setType(Token.VAR,    t);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
470	[BUG]  [BUGGY]  n.setType(Token.VAR,  t)&&!NodeUtil.isFunctionDeclaration(parent);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  n.setType(Token.VAR,  t)&&!NodeUtil.isFunctionDeclaration(parent);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	n.setType(Token.VAR,  t)&&!NodeUtil.isFunctionDeclaration(parent);	  n.setType(Token.VAR,    t);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
471	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE));  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE));	  splitVarDeclarations(t,    n);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
472	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE),  arguments);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  t.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE),  arguments);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	t.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE),  arguments);	  splitVarDeclarations(t,    n);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
473	[BUG]  [BUGGY]  splitVarDeclarations(t,  n,  parent.getParent());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(t,  n,  parent.getParent());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(t,  n,  parent.getParent());	  splitVarDeclarations(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
474	[BUG]  [BUGGY]  divideVarDeclarations(t,  n,  parent,  argument);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  divideVarDeclarations(t,  n,  parent,  argument);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	divideVarDeclarations(t,  n,  parent,  argument);	  splitVarDeclarations(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
475	[BUG]  [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE)));  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE)));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  Node.newString(Token.NAME,  JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE)));	  parent.replaceChild(n,    Node.newString(Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
476	[BUG]  [BUGGY]  parent.replaceChild(n,  NodeUtil.newExpr(n));  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  NodeUtil.newExpr(n));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  NodeUtil.newExpr(n));	  parent.replaceChild(n,    n);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
477	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
478	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(0));  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(0));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(0));	  NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
479	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  DUPLICATE_VAR_DECLUSIONS,  new  ScopeTicklingCallback());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  DUPLICATE_VAR_DECLUSIONS,  new  ScopeTicklingCallback());  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  DUPLICATE_VAR_DECLUSIONS,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    arguments,    new    ScopeTicklingCallback());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
480	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  false);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  false);  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  false);	  NodeTraversal.traverse(compiler,    n,    this,    new    ScopeTicklingCallback());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
481	[BUG]  [BUGGY]  Preconditions.checkArgument(arguments!=  null,  arguments.length  >  0);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkArgument(arguments!=  null,  arguments.length  >  0);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkArgument(arguments!=  null,  arguments.length  >  0);	  Preconditions.checkArgument(arguments!=    null);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
482	[BUG]  [BUGGY]  splitVarDeclarations(n,  t.getModule(),  NON_GLOBAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  t.getModule(),  NON_GLOBAL_NAMES_UNIQUE);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  t.getModule(),  NON_GLOBAL_NAMES_UNIQUE);	  splitVarDeclarations(n,    t.getModule(),    arguments);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
483	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_NAME,  arguments));  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_NAME,  arguments));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_NAME,  arguments));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
484	[BUG]  [BUGGY]  Node  varDeclarations  =  n.getlastChild();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  varDeclarations  =  n.getlastChild();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  varDeclarations  =  n.getlastChild();	  Node    varDeclarations    =    parent.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
485	[BUG]  [BUGGY]  Node  parent  =  t.next();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Node  parent  =  t.next();  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Node  parent  =  t.next();	  Node    parent    =    t.getParent();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
486	[BUG]  [BUGGY]  MoveNamedFunctions(n,  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  MoveNamedFunctions(n,  parent.getFirstChild());  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	MoveNamedFunctions(n,  parent.getFirstChild());	  MoveNamedFunctions(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
487	[BUG]  [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  n.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  n.getFirstChild()));  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	parent.replaceChild(n,  Node.newString(Token.NAME,  n.getFirstChild()));	  moveNamedFunctions(parent);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
488	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  extractForVarDeclarations(n));  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  extractForVarDeclarations(n));  [BUGGY]      splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	NodeTraversal.traverse(compiler,  n,  this,  extractForVarDeclarations(n));	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
489	[BUG]  [BUGGY]  mergeVarDeclarations(n,  t,  argument);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  mergeVarDeclarations(n,  t,  argument);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	mergeVarDeclarations(n,  t,  argument);	  mergeVarDeclarations(n,    t);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
490	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
491	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getFirstChild()  ==  n);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	Preconditions.checkState(parent!=  null  &&  parent.getFirstChild()  ==  n);	  Preconditions.checkState(parent!=    null);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
492	[BUG]  [BUGGY]  splitVarDeclarations(n,  parent,  arguments,  false);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]        if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {      [BUGGY]  splitVarDeclarations(n,  parent,  arguments,  false);  [BUGGY]      }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  }  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	265	265	1	replace	splitVarDeclarations(n,  parent,  arguments,  false);	  splitVarDeclarations(n,    parent,    arguments);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
