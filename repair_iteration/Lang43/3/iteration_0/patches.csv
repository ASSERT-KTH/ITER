bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    char[]  c  =  pattern.toCharArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  [BUGGY]    char[]  c  =  pattern.toCharArray();  [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	    char[]  c  =  pattern.toCharArray();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	add
2	[BUG]  [BUGGY]    int  lastHold  =  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  [BUGGY]    int  lastHold  =  pos.getIndex();  [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	    int  lastHold  =  pos.getIndex();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	add
3	[BUG]  [BUGGY]    char  lastHold  =  pattern.charAt(pos.getIndex()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  [BUGGY]    char  lastHold  =  pattern.charAt(pos.getIndex()  -  1);  [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	    char  lastHold  =  pattern.charAt(pos.getIndex()  -  1);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	add
4	[BUG]  [BUGGY]    char  lastHold  =  pattern.charAt(pos.getIndex()  -  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  [BUGGY]    char  lastHold  =  pattern.charAt(pos.getIndex()  -  escapingOn);  [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	    char  lastHold  =  pattern.charAt(pos.getIndex()  -  escapingOn);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	add
5	[BUG]  [BUGGY]    StringBuffer  pos  =  new  StringBuffer(pattern.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  [BUGGY]    StringBuffer  pos  =  new  StringBuffer(pattern.length());  [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	    StringBuffer  pos  =  new  StringBuffer(pattern.length());		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	add
6	[BUG]  [BUGGY]  int  start  =  pattern.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  [BUGGY]  int  start  =  pattern.getIndex();  [BUGGY]  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  start  =  pattern.getIndex();	int  start  =  pos.getIndex();  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
7	[BUG]  [BUGGY]  int  start  =  pos.getIndex()  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  [BUGGY]  int  start  =  pos.getIndex()  +  1;  [BUGGY]  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  start  =  pos.getIndex()  +  1;	int  start  =  pos.getIndex();  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
8	[BUG]  [BUGGY]  int  start  =  pattern.getStartIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  [BUGGY]  int  start  =  pattern.getStartIndex();  [BUGGY]  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  start  =  pattern.getStartIndex();	int  start  =  pos.getIndex();  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
9	[BUG]  [BUGGY]  int  start  =  pos.getIndex()  -  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  [BUGGY]  int  start  =  pos.getIndex()  -  1;  [BUGGY]  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  start  =  pos.getIndex()  -  1;	int  start  =  pos.getIndex();  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
10	[BUG]  [BUGGY]    char  escapedOn  =  pattern.charAt(pos.getIndex()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  [BUGGY]    char  escapedOn  =  pattern.charAt(pos.getIndex()  -  1);  [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	    char  escapedOn  =  pattern.charAt(pos.getIndex()  -  1);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	add
11	[BUG]  [BUGGY]    char  escapingOn  =  pattern.charAt(pos.getIndex()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  [BUGGY]    char  escapingOn  =  pattern.charAt(pos.getIndex()  -  1);  [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	    char  escapingOn  =  pattern.charAt(pos.getIndex()  -  1);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	add
12	[BUG]  [BUGGY]    char  escapedOn  =  pattern.charAt(pos.length()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  [BUGGY]    char  escapedOn  =  pattern.charAt(pos.length()  -  1);  [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	    char  escapedOn  =  pattern.charAt(pos.length()  -  1);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	add
13	[BUG]  [BUGGY]    StringBuffer  pattern  =  new  StringBuffer();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  [BUGGY]    StringBuffer  pattern  =  new  StringBuffer();  [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	    StringBuffer  pattern  =  new  StringBuffer();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	add
14	[BUG]  [BUGGY]    char  escapingOn  =  pattern.charAt(pos.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  [BUGGY]    char  escapingOn  =  pattern.charAt(pos.getIndex());  [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	    char  escapingOn  =  pattern.charAt(pos.getIndex());		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	add
15	[BUG]  [BUGGY]    char  c  =  pattern.charAt(pos.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  [BUGGY]    char  c  =  pattern.charAt(pos.getIndex());  [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	    char  c  =  pattern.charAt(pos.getIndex());		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	add
