bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  char  escapedOn  =  pattern.charAt(pos.getIndex()  -  1)-  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapedOn  =  pattern.charAt(pos.getIndex()  -  1)-  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapedOn  =  pattern.charAt(pos.getIndex()  -  1)-  1;	  char    escapedOn    =    pattern.charAt(pos.getIndex())-    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
2	[BUG]  [BUGGY]  char  escapedOn  =  pattern.charAt(pos.getIndex()  -  1)/  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapedOn  =  pattern.charAt(pos.getIndex()  -  1)/  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapedOn  =  pattern.charAt(pos.getIndex()  -  1)/  1;	  char    escapedOn    =    pattern.charAt(pos.getIndex())-    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
3	[BUG]  [BUGGY]  char  escapedOn  =  pattern.charAt(pos.getIndex()  +  1)-  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapedOn  =  pattern.charAt(pos.getIndex()  +  1)-  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapedOn  =  pattern.charAt(pos.getIndex()  +  1)-  1;	  char    escapedOn    =    pattern.charAt(pos.getIndex())-    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
4	[BUG]  [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex()  *  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex()  *  escapingOn);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  lastHold  =  pattern.charAt(pos.getIndex()  *  escapingOn);	  char    lastHold    =    pattern.charAt(pos.getIndex()    +    escapingOn);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
5	[BUG]  [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex()  /  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex()  /  escapingOn);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  lastHold  =  pattern.charAt(pos.getIndex()  /  escapingOn);	  char    lastHold    =    pattern.charAt(pos.getIndex()    +    escapingOn);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
6	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(0,  pos.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char[]  c  =  pattern.substring(0,  pos.length());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char[]  c  =  pattern.substring(0,  pos.length());	  char[]    c    =    pattern.substring(0,    pos.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
7	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(0,  pos.length()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char[]  c  =  pattern.substring(0,  pos.length()  +  1);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char[]  c  =  pattern.substring(0,  pos.length()  +  1);	  char[]    c    =    pattern.substring(0,    pos.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
8	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(0,  pattern.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char[]  c  =  pattern.substring(0,  pattern.length());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char[]  c  =  pattern.substring(0,  pattern.length());	  char[]    c    =    pattern.substring(0,    pos.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
9	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(0,  pos.length()));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char[]  c  =  pattern.substring(0,  pos.length()));  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char[]  c  =  pattern.substring(0,  pos.length()));	  char[]    c    =    pattern.substring(0,    pos.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
10	[BUG]  [BUGGY]  String  escapedOn  =  pattern.charAt(pos.getIndex()  -  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  String  escapedOn  =  pattern.charAt(pos.getIndex()  -  2);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	String  escapedOn  =  pattern.charAt(pos.getIndex()  -  2);	  char    escapedOn    =    pattern.charAt(pos.getIndex()    -    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
11	[BUG]  [BUGGY]  char  escapedOn  =  pattern.charAt(p.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapedOn  =  pattern.charAt(p.getIndex());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapedOn  =  pattern.charAt(p.getIndex());	  char    escapedOn    =    pattern.charAt(pos.getIndex()    -    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
12	[BUG]  [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getIndex()  -  2;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getIndex()  -  2;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapingOn  =  pattern.charAt(pos.getIndex()  -  2;	  char    escapingOn    =    pattern.charAt(pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
13	[BUG]  [BUGGY]  char  escapedOn  =  pattern.charAt(p.length()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapedOn  =  pattern.charAt(p.length()  -  1);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapedOn  =  pattern.charAt(p.length()  -  1);	  char    escapedOn    =    pattern.charAt(p.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
14	[BUG]  [BUGGY]  char  escapedOn  =  pattern.charAt(p.length()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapedOn  =  pattern.charAt(p.length()  +  1);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapedOn  =  pattern.charAt(p.length()  +  1);	  char    escapedOn    =    pattern.charAt(p.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
15	[BUG]  [BUGGY]  char  escapedOn  =  pattern.charAt(p.length()  -  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapedOn  =  pattern.charAt(p.length()  -  2);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapedOn  =  pattern.charAt(p.length()  -  2);	  char    escapedOn    =    pattern.charAt(p.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
16	[BUG]  [BUGGY]  StringBuffer  pos  =  new  StringBuffer(patter.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  StringBuffer  pos  =  new  StringBuffer(patter.length());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	StringBuffer  pos  =  new  StringBuffer(patter.length());	  StringBuffer    pos    =    new    StringBuffer(pattern.length()    +    4);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
17	[BUG]  [BUGGY]  pos  =  new  StringBuffer(pattern.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  pos  =  new  StringBuffer(pattern.length());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	pos  =  new  StringBuffer(pattern.length());	  StringBuffer    pos    =    new    StringBuffer(pattern.length()    +    4);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
18	[BUG]  [BUGGY]  int  lastHold  =  pattern.getIndex()  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  int  lastHold  =  pattern.getIndex()  +  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  lastHold  =  pattern.getIndex()  +  1;	  int    lastHold    =    pos.getIndex()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
19	[BUG]  [BUGGY]  int  start  =  pos.getStartIndex()  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  int  start  =  pos.getStartIndex()  +  1;  [BUGGY]      char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  start  =  pos.getStartIndex()  +  1;	  int    start    =    pos.getStartIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
20	[BUG]  [BUGGY]  int  start  =  pos.getEndIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  int  start  =  pos.getEndIndex();  [BUGGY]      char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  start  =  pos.getEndIndex();	  int    start    =    pos.getStartIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
21	[BUG]  [BUGGY]  int  start  =  pos.getStartIndex()  -  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  int  start  =  pos.getStartIndex()  -  1;  [BUGGY]      char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  start  =  pos.getStartIndex()  -  1;	  int    start    =    pos.getStartIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
22	[BUG]  [BUGGY]  String  escapedOn  =  pattern.charAt(pattern.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  String  escapedOn  =  pattern.charAt(pattern.length());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	String  escapedOn  =  pattern.charAt(pattern.length());	  char    escapedOn    =    pattern.charAt(pattern.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
23	[BUG]  [BUGGY]  char  escapedOn  =  pattern.charAt(i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapedOn  =  pattern.charAt(i);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapedOn  =  pattern.charAt(i);	  char    escapedOn    =    pattern.charAt(pattern.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
24	[BUG]  [BUGGY]  char  escapedOn  =  pattern.charAt(pattern.length()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapedOn  =  pattern.charAt(pattern.length()  -  1);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapedOn  =  pattern.charAt(pattern.length()  -  1);	  char    escapedOn    =    pattern.charAt(pattern.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
25	[BUG]  [BUGGY]  int  start  =  pattern.getStartIndex()  /  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  int  start  =  pattern.getStartIndex()  /  1;  [BUGGY]      char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  start  =  pattern.getStartIndex()  /  1;	  int    start    =    pattern.getStartIndex()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
26	[BUG]  [BUGGY]  String  lastHold  =  pattern.charAt(pos.getIndex()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  String  lastHold  =  pattern.charAt(pos.getIndex()  +  1);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	String  lastHold  =  pattern.charAt(pos.getIndex()  +  1);	  char    lastHold    =    pattern.charAt(pos.getIndex()    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
27	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(0,  Pattern.compile(pos.length()));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char[]  c  =  pattern.substring(0,  Pattern.compile(pos.length()));  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char[]  c  =  pattern.substring(0,  Pattern.compile(pos.length()));	  char[]    c    =    pattern.substring(0,    pos.length()    -    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	57	None	replace
28	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(0,  path.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char[]  c  =  pattern.substring(0,  path.length());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char[]  c  =  pattern.substring(0,  path.length());	  char[]    c    =    pattern.substring(0,    pos.length()    -    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	57	None	replace
29	[BUG]  [BUGGY]  String  escapedOn  =  pattern.charAt(pos.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  String  escapedOn  =  pattern.charAt(pos.getIndex());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	String  escapedOn  =  pattern.charAt(pos.getIndex());	  String    escapedOn    =    pattern.charAt(pos.getIndex()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
30	[BUG]  [BUGGY]  String  escapedOn  =  pattern.charAt(pos.getIndex()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  String  escapedOn  =  pattern.charAt(pos.getIndex()  +  1);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	String  escapedOn  =  pattern.charAt(pos.getIndex()  +  1);	  String    escapedOn    =    pattern.charAt(pos.getIndex()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
31	[BUG]  [BUGGY]  String  escapedOn  =  pattern.charAt(pos.getIndex())+  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  String  escapedOn  =  pattern.charAt(pos.getIndex())+  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	String  escapedOn  =  pattern.charAt(pos.getIndex())+  1;	  String    escapedOn    =    pattern.charAt(pos.getIndex()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
32	[BUG]  [BUGGY]  char  c  =  pattern.charAt(p.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  c  =  pattern.charAt(p.getIndex());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  c  =  pattern.charAt(p.getIndex());	  char    c    =    pattern.charAt(pos.getIndex()    -    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
33	[BUG]  [BUGGY]  char  c  =  pattern.charAt(position.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  c  =  pattern.charAt(position.getIndex());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  c  =  pattern.charAt(position.getIndex());	  char    c    =    pattern.charAt(pos.getIndex()    -    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
34	[BUG]  [BUGGY]  int  start  =  pattern.getEndIndex()  -  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  int  start  =  pattern.getEndIndex()  -  1;  [BUGGY]      char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  start  =  pattern.getEndIndex()  -  1;	  int    start    =    pattern.getStartIndex()    -    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
35	[BUG]  [BUGGY]  Buffer  pos  =  new  StringBuffer(pattern.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  Buffer  pos  =  new  StringBuffer(pattern.length());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	Buffer  pos  =  new  StringBuffer(pattern.length());	  StringBuffer    pos    =    new    StringBuffer(pattern.length()    +    3);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
36	[BUG]  [BUGGY]  int  start  =  pattern.getLength()  -  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  int  start  =  pattern.getLength()  -  1;  [BUGGY]      char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  start  =  pattern.getLength()  -  1;	  int    start    =    pattern.getIndex()    -    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
37	[BUG]  [BUGGY]  String  escapingOn  =  pattern.charAt(pos.getIndex()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  String  escapingOn  =  pattern.charAt(pos.getIndex()  +  1);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	String  escapingOn  =  pattern.charAt(pos.getIndex()  +  1);	  char    escapingOn    =    pattern.charAt(pos.getIndex()    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
38	[BUG]  [BUGGY]  String  lastHold  =  pattern.charAt(pos.getIndex()  -  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  String  lastHold  =  pattern.charAt(pos.getIndex()  -  2);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	String  lastHold  =  pattern.charAt(pos.getIndex()  -  2);	  char    lastHold    =    pattern.charAt(pos.getIndex()    -    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
39	[BUG]  [BUGGY]  String  lastHold  =  pattern.charAt(pos.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  String  lastHold  =  pattern.charAt(pos.getIndex());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	String  lastHold  =  pattern.charAt(pos.getIndex());	  char    lastHold    =    pattern.charAt(pos.getIndex()    -    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
40	[BUG]  [BUGGY]  char[]  c  =  toPattern.toString();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char[]  c  =  toPattern.toString();  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char[]  c  =  toPattern.toString();	  char[]    c    =    pattern.toString();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
41	[BUG]  [BUGGY]  char[]  c  =  Pattern.toCharArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char[]  c  =  Pattern.toCharArray();  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char[]  c  =  Pattern.toCharArray();	  char[]    c    =    pattern.toCharArray()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
42	[BUG]  [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(255);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(255);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	StringBuffer  pattern  =  new  StringBuffer(255);	  StringBuffer    pattern    =    new    StringBuffer(256);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
43	[BUG]  [BUGGY]  int  start  =  pattern.getEndIndex()  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  int  start  =  pattern.getEndIndex()  +  1;  [BUGGY]      char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  start  =  pattern.getEndIndex()  +  1;	  int    start    =    pattern.getEndIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
44	[BUG]  [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex()  -  1)-  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex()  -  1)-  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  lastHold  =  pattern.charAt(pos.getIndex()  -  1)-  1;	  char    lastHold    =    pattern.charAt(pos.getIndex())-    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
45	[BUG]  [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex()  -  1)/  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex()  -  1)/  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  lastHold  =  pattern.charAt(pos.getIndex()  -  1)/  1;	  char    lastHold    =    pattern.charAt(pos.getIndex())-    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
46	[BUG]  [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex()  +  1)-  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex()  +  1)-  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  lastHold  =  pattern.charAt(pos.getIndex()  +  1)-  1;	  char    lastHold    =    pattern.charAt(pos.getIndex())-    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
47	[BUG]  [BUGGY]  String  lastHold  =  pattern.charAt(pos.getIndex())-  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  String  lastHold  =  pattern.charAt(pos.getIndex())-  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	String  lastHold  =  pattern.charAt(pos.getIndex())-  1;	  char    lastHold    =    pattern.charAt(pos.getIndex())-    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
48	[BUG]  [BUGGY]  char  escapedOn  =  pattern.charAt(pos.getIndex()  +  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapedOn  =  pattern.charAt(pos.getIndex()  +  2);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapedOn  =  pattern.charAt(pos.getIndex()  +  2);	  char    escapedOn    =    pattern.charAt(pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
49	[BUG]  [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex()  -  start  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex()  -  start  +  1);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  lastHold  =  pattern.charAt(pos.getIndex()  -  start  +  1);	  char    lastHold    =    pattern.charAt(pos.getIndex()    -    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
50	[BUG]  [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getIndex()  -  1)+  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getIndex()  -  1)+  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapingOn  =  pattern.charAt(pos.getIndex()  -  1)+  1;	  char    escapingOn    =    pattern.charAt(pos.getIndex())+    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
51	[BUG]  [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getIndex()  +  1)+  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getIndex()  +  1)+  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapingOn  =  pattern.charAt(pos.getIndex()  +  1)+  1;	  char    escapingOn    =    pattern.charAt(pos.getIndex())+    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
52	[BUG]  [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getIndex())+  2;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getIndex())+  2;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapingOn  =  pattern.charAt(pos.getIndex())+  2;	  char    escapingOn    =    pattern.charAt(pos.getIndex())+    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
53	[BUG]  [BUGGY]  String  c  =  pattern.charAt(pos.getIndex()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  String  c  =  pattern.charAt(pos.getIndex()  +  1);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	String  c  =  pattern.charAt(pos.getIndex()  +  1);	  char    c    =    pattern.charAt(pos.getIndex()    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
54	[BUG]  [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(100);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(100);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	StringBuffer  pattern  =  new  StringBuffer(100);	  StringBuffer    pattern    =    new    StringBuffer(1024);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
55	[BUG]  [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(10);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(10);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	StringBuffer  pattern  =  new  StringBuffer(10);	  StringBuffer    pattern    =    new    StringBuffer(1024);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
56	[BUG]  [BUGGY]  char  lastHold  =  pattern.charAt(p.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  lastHold  =  pattern.charAt(p.getIndex());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  lastHold  =  pattern.charAt(p.getIndex());	  char    lastHold    =    pattern.charAt(pos.getIndex()    -    4);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	28	None	replace
57	[BUG]  [BUGGY]  int  start  =  pattern.length()  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  int  start  =  pattern.length()  +  1;  [BUGGY]      char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  start  =  pattern.length()  +  1;	  int    start    =    pattern.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
58	[BUG]  [BUGGY]  int  start  =  pattern.length()  -  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  int  start  =  pattern.length()  -  1;  [BUGGY]      char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  start  =  pattern.length()  -  1;	  int    start    =    pattern.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
59	[BUG]  [BUGGY]  int  start  =  pattern.length()  -  2;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  int  start  =  pattern.length()  -  2;  [BUGGY]      char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  start  =  pattern.length()  -  2;	  int    start    =    pattern.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
60	[BUG]  [BUGGY]  int  start  =  pattern.length()  +  2;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  int  start  =  pattern.length()  +  2;  [BUGGY]      char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  start  =  pattern.length()  +  2;	  int    start    =    pattern.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
61	[BUG]  [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(128);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(128);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	StringBuffer  pattern  =  new  StringBuffer(128);	  StringBuffer    pattern    =    new    StringBuffer(64);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
62	[BUG]  [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(40);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(40);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	StringBuffer  pattern  =  new  StringBuffer(40);	  StringBuffer    pattern    =    new    StringBuffer(64);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
63	[BUG]  [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(str.length()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(str.length()  +  1);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	StringBuffer  pattern  =  new  StringBuffer(str.length()  +  1);	  StringBuffer    pattern    =    new    StringBuffer(str.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
64	[BUG]  [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(str.length()  +  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(str.length()  +  2);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	StringBuffer  pattern  =  new  StringBuffer(str.length()  +  2);	  StringBuffer    pattern    =    new    StringBuffer(str.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
65	[BUG]  [BUGGY]  int  lastHold  =  pattern.getIndex()  -  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  int  lastHold  =  pattern.getIndex()  -  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  lastHold  =  pattern.getIndex()  -  1;	  int    lastHold    =    pos.getIndex()    -    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
66	[BUG]  [BUGGY]  String  escapedOn  =  pattern.charAt(pos.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  String  escapedOn  =  pattern.charAt(pos.length());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	String  escapedOn  =  pattern.charAt(pos.length());	  String    escapedOn    =    pattern.charAt(pos.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
67	[BUG]  [BUGGY]  String  escapedOn  =  pattern.charAt(p.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  String  escapedOn  =  pattern.charAt(p.length());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	String  escapedOn  =  pattern.charAt(p.length());	  String    escapedOn    =    pattern.charAt(pos.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
68	[BUG]  [BUGGY]  int  start  =  lastHold.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  int  start  =  lastHold.getIndex();  [BUGGY]      char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  start  =  lastHold.getIndex();	  int    start    =    lastHold.getIndex()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
69	[BUG]  [BUGGY]  int  start  =  this.pattern.getIndex()  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  int  start  =  this.pattern.getIndex()  +  1;  [BUGGY]      char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  start  =  this.pattern.getIndex()  +  1;	  int    start    =    lastHold.getIndex()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
70	[BUG]  [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(pattern.length()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(pattern.length()  +  1);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	StringBuffer  pattern  =  new  StringBuffer(pattern.length()  +  1);	  StringBuffer    pattern    =    new    StringBuffer(pattern.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
71	[BUG]  [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(pattern.length()  +  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(pattern.length()  +  2);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	StringBuffer  pattern  =  new  StringBuffer(pattern.length()  +  2);	  StringBuffer    pattern    =    new    StringBuffer(pattern.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
72	[BUG]  [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(pattern.length()  +  4);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(pattern.length()  +  4);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	StringBuffer  pattern  =  new  StringBuffer(pattern.length()  +  4);	  StringBuffer    pattern    =    new    StringBuffer(pattern.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
73	[BUG]  [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(pattern.length()  +  3);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(pattern.length()  +  3);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	StringBuffer  pattern  =  new  StringBuffer(pattern.length()  +  3);	  StringBuffer    pattern    =    new    StringBuffer(pattern.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
74	[BUG]  [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getIndex()  -  1)-  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getIndex()  -  1)-  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapingOn  =  pattern.charAt(pos.getIndex()  -  1)-  1;	  char    escapingOn    =    pattern.charAt(pos.getIndex())-    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
75	[BUG]  [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getIndex()  -  1)/  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getIndex()  -  1)/  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapingOn  =  pattern.charAt(pos.getIndex()  -  1)/  1;	  char    escapingOn    =    pattern.charAt(pos.getIndex())-    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
76	[BUG]  [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getIndex()  +  1)-  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getIndex()  +  1)-  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapingOn  =  pattern.charAt(pos.getIndex()  +  1)-  1;	  char    escapingOn    =    pattern.charAt(pos.getIndex())-    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
77	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(pos.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char[]  c  =  pattern.substring(pos.getIndex());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char[]  c  =  pattern.substring(pos.getIndex());	  char[]    c    =    pattern.substring(pos.getIndex()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
78	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(pos.getIndex()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char[]  c  =  pattern.substring(pos.getIndex()  +  1);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char[]  c  =  pattern.substring(pos.getIndex()  +  1);	  char[]    c    =    pattern.substring(pos.getIndex()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
79	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(pos.getIndex())+  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char[]  c  =  pattern.substring(pos.getIndex())+  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char[]  c  =  pattern.substring(pos.getIndex())+  1;	  char[]    c    =    pattern.substring(pos.getIndex()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
80	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(pos.getIndex()).toCharArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char[]  c  =  pattern.substring(pos.getIndex()).toCharArray();  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char[]  c  =  pattern.substring(pos.getIndex()).toCharArray();	  char[]    c    =    pattern.substring(pos.getIndex()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
81	[BUG]  [BUGGY]  char  escapedOn  =  pattern.charAt(pos.getIndex()  -  1)+  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapedOn  =  pattern.charAt(pos.getIndex()  -  1)+  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapedOn  =  pattern.charAt(pos.getIndex()  -  1)+  1;	  char    escapedOn    =    pattern.charAt(pos.getIndex())+    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
82	[BUG]  [BUGGY]  char  escapedOn  =  pattern.charAt(pos.getIndex()  +  1)+  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapedOn  =  pattern.charAt(pos.getIndex()  +  1)+  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapedOn  =  pattern.charAt(pos.getIndex()  +  1)+  1;	  char    escapedOn    =    pattern.charAt(pos.getIndex())+    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
83	[BUG]  [BUGGY]  char  escapedOn  =  pattern.charAt(pos.getIndex())+  2;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapedOn  =  pattern.charAt(pos.getIndex())+  2;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapedOn  =  pattern.charAt(pos.getIndex())+  2;	  char    escapedOn    =    pattern.charAt(pos.getIndex())+    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
84	[BUG]  [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex()  -  1)+  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex()  -  1)+  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  lastHold  =  pattern.charAt(pos.getIndex()  -  1)+  1;	  char    lastHold    =    pattern.charAt(pos.getIndex())+    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
85	[BUG]  [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex()  +  1)+  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex()  +  1)+  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  lastHold  =  pattern.charAt(pos.getIndex()  +  1)+  1;	  char    lastHold    =    pattern.charAt(pos.getIndex())+    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
86	[BUG]  [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex())+  2;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex())+  2;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  lastHold  =  pattern.charAt(pos.getIndex())+  2;	  char    lastHold    =    pattern.charAt(pos.getIndex())+    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
87	[BUG]  [BUGGY]  char  c  =  pattern.charAt(pos.getIndex())+  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  c  =  pattern.charAt(pos.getIndex())+  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  c  =  pattern.charAt(pos.getIndex())+  1;	  char    c    =    pattern.charAt(pos.getIndex()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
88	[BUG]  [BUGGY]  char  c  =  pattern.charAt(pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  c  =  pattern.charAt(pos.getIndex();  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  c  =  pattern.charAt(pos.getIndex();	  char    c    =    pattern.charAt(pos.getIndex()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
89	[BUG]  [BUGGY]  int  lastHold  =  pattern.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  int  lastHold  =  pattern.length();  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  lastHold  =  pattern.length();	  int    lastHold    =    pattern.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
90	[BUG]  [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(16);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(16);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	StringBuffer  pattern  =  new  StringBuffer(16);	  StringBuffer    pattern    =    new    StringBuffer(32);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
91	[BUG]  [BUGGY]  char  escapedOn  =  pattern.charAt(pos.length()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapedOn  =  pattern.charAt(pos.length()  +  1);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapedOn  =  pattern.charAt(pos.length()  +  1);	  char    escapedOn    =    pattern.charAt(pos.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
92	[BUG]  [BUGGY]  char  escapedOn  =  pattern.charAt(pos.length()  -  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapedOn  =  pattern.charAt(pos.length()  -  2);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapedOn  =  pattern.charAt(pos.length()  -  2);	  char    escapedOn    =    pattern.charAt(pos.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
93	[BUG]  [BUGGY]  char  escapedOn  =  pattern.charAt(pos.length()  +  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapedOn  =  pattern.charAt(pos.length()  +  2);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapedOn  =  pattern.charAt(pos.length()  +  2);	  char    escapedOn    =    pattern.charAt(pos.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
94	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharBuffer(0,  0);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char[]  c  =  pattern.toCharBuffer(0,  0);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char[]  c  =  pattern.toCharBuffer(0,  0);	  char[]    c    =    pattern.toCharBuffer();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
95	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharBuffer(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char[]  c  =  pattern.toCharBuffer(pos);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char[]  c  =  pattern.toCharBuffer(pos);	  char[]    c    =    pattern.toCharBuffer();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
96	[BUG]  [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getStartIndex()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getStartIndex()  +  1);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapingOn  =  pattern.charAt(pos.getStartIndex()  +  1);	  char    escapingOn    =    pattern.charAt(pos.getStartIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
97	[BUG]  [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getStartIndex()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getStartIndex()  -  1);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapingOn  =  pattern.charAt(pos.getStartIndex()  -  1);	  char    escapingOn    =    pattern.charAt(pos.getStartIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
98	[BUG]  [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getEndIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getEndIndex());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapingOn  =  pattern.charAt(pos.getEndIndex());	  char    escapingOn    =    pattern.charAt(pos.getStartIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
99	[BUG]  [BUGGY]  String  escapingOn  =  pattern.charAt(pos.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  String  escapingOn  =  pattern.charAt(pos.getIndex());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	String  escapingOn  =  pattern.charAt(pos.getIndex());	  char    escapingOn    =    pattern.charAt(pos.getIndex()    +    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
100	[BUG]  [BUGGY]  char  escapingOn  =  pattern.charAt(p.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapingOn  =  pattern.charAt(p.getIndex());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapingOn  =  pattern.charAt(p.getIndex());	  char    escapingOn    =    pattern.charAt(pos.getIndex()    +    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
101	[BUG]  [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(1028);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(1028);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	StringBuffer  pattern  =  new  StringBuffer(1028);	  StringBuffer    pattern    =    new    StringBuffer(1024);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
102	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(0,  p.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char[]  c  =  pattern.substring(0,  p.length());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char[]  c  =  pattern.substring(0,  p.length());	  char[]    c    =    pattern.substring(0,    pos.length()    -    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	57	None	replace
103	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(0,  pos.length())+  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char[]  c  =  pattern.substring(0,  pos.length())+  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char[]  c  =  pattern.substring(0,  pos.length())+  1;	  char[]    c    =    pattern.substring(0,    pos.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
104	[BUG]  [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(pattern.length()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(pattern.length()  -  1);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	StringBuffer  pattern  =  new  StringBuffer(pattern.length()  -  1);	  StringBuffer    pattern    =    new    StringBuffer(pattern.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
105	[BUG]  [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(256,  charBuffer.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(256,  charBuffer.length());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	StringBuffer  pattern  =  new  StringBuffer(256,  charBuffer.length());	  StringBuffer    pattern    =    new    StringBuffer(256);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
106	[BUG]  [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex()  -  start)+  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex()  -  start)+  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  lastHold  =  pattern.charAt(pos.getIndex()  -  start)+  1;	  char    lastHold    =    pattern.charAt(pos.getIndex()    -    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
107	[BUG]  [BUGGY]  char  escapedOn  =  pattern.charAt(pattern.length()  -  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapedOn  =  pattern.charAt(pattern.length()  -  2);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapedOn  =  pattern.charAt(pattern.length()  -  2);	  char    escapedOn    =    pattern.charAt(pattern.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
108	[BUG]  [BUGGY]  char  escapedOn  =  pattern.charAt(pattern.length()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapedOn  =  pattern.charAt(pattern.length()  +  1);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapedOn  =  pattern.charAt(pattern.length()  +  1);	  char    escapedOn    =    pattern.charAt(pattern.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
109	[BUG]  [BUGGY]  Integer  lastHold  =  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  Integer  lastHold  =  pos.getIndex();  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	Integer  lastHold  =  pos.getIndex();	  int    lastHold    =    pos.getIndex()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
110	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(pos.getIndex()  -  1,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char[]  c  =  pattern.substring(pos.getIndex()  -  1,  escapingOn);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char[]  c  =  pattern.substring(pos.getIndex()  -  1,  escapingOn);	  char[]    c    =    pattern.substring(pos.getIndex()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
111	[BUG]  [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getIndex()  -  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getIndex()  -  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapingOn  =  pattern.charAt(pos.getIndex()  -  1;	  char    escapingOn    =    pattern.charAt(pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
112	[BUG]  [BUGGY]  StringBuffer  pos  =  new  StringBuffer(pattern,  pattern.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  StringBuffer  pos  =  new  StringBuffer(pattern,  pattern.length());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	StringBuffer  pos  =  new  StringBuffer(pattern,  pattern.length());	  StringBuffer    pos    =    new    StringBuffer(pattern.length()    +    4);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
113	[BUG]  [BUGGY]  StringBuilder  pattern  =  new  StringBuilder(pattern.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  StringBuilder  pattern  =  new  StringBuilder(pattern.length());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	StringBuilder  pattern  =  new  StringBuilder(pattern.length());	  StringBuffer    pattern    =    new    StringBuffer(str.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
114	[BUG]  [BUGGY]  Char  escapedOn  =  pattern.charAt(pos.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  Char  escapedOn  =  pattern.charAt(pos.getIndex());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	Char  escapedOn  =  pattern.charAt(pos.getIndex());	  char    escapedOn    =    pattern.charAt(pos.getIndex()    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
115	[BUG]  [BUGGY]  Char[]  c  =  pattern.substring(0,  pos.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  Char[]  c  =  pattern.substring(0,  pos.length());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	Char[]  c  =  pattern.substring(0,  pos.length());	  char[]    c    =    pattern.substring(0,    pos.length()    -    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	57	None	replace
116	[BUG]  [BUGGY]  char  escapedOn  =  pattern.charAt(pos.getIndex())/  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapedOn  =  pattern.charAt(pos.getIndex())/  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapedOn  =  pattern.charAt(pos.getIndex())/  1;	  char    escapedOn    =    pattern.charAt(pos.getIndex())+    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
117	[BUG]  [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getIndex())/  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  escapingOn  =  pattern.charAt(pos.getIndex())/  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  escapingOn  =  pattern.charAt(pos.getIndex())/  1;	  char    escapingOn    =    pattern.charAt(pos.getIndex())+    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
118	[BUG]  [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(256,  pattern.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  StringBuffer  pattern  =  new  StringBuffer(256,  pattern.length());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	StringBuffer  pattern  =  new  StringBuffer(256,  pattern.length());	  StringBuffer    pattern    =    new    StringBuffer(256);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
119	[BUG]  [BUGGY]  char  c  =  pattern.charAt(pattern.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  c  =  pattern.charAt(pattern.getIndex());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  c  =  pattern.charAt(pattern.getIndex());	  char    c    =    pattern.charAt(pos.getIndex()    +    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
120	[BUG]  [BUGGY]  int  start  =  pattern.lastIndexOf('.');  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  int  start  =  pattern.lastIndexOf('.');  [BUGGY]      char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  start  =  pattern.lastIndexOf('.');	  int    start    =    pattern.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
121	[BUG]  [BUGGY]  Char  lastHold  =  pattern.charAt(pos.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  Char  lastHold  =  pattern.charAt(pos.getIndex());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	Char  lastHold  =  pattern.charAt(pos.getIndex());	  char    lastHold    =    pattern.charAt(pos.getIndex()    -    4);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	28	None	replace
122	[BUG]  [BUGGY]  int  start  =  pos.getStartIndex()  -  pattern.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  int  start  =  pos.getStartIndex()  -  pattern.length();  [BUGGY]      char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  start  =  pos.getStartIndex()  -  pattern.length();	  int    start    =    pos.getStartIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
123	[BUG]  [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex())/  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex())/  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  lastHold  =  pattern.charAt(pos.getIndex())/  1;	  char    lastHold    =    pattern.charAt(pos.getIndex())+    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
124	[BUG]  [BUGGY]  char  c  =  pattern.charAt(pos.getIndex())-  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  c  =  pattern.charAt(pos.getIndex())-  1;  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  c  =  pattern.charAt(pos.getIndex())-  1;	  char    c    =    pattern.charAt(pos.getIndex()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
125	[BUG]  [BUGGY]  Char  escapingOn  =  pattern.charAt(pos.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  Char  escapingOn  =  pattern.charAt(pos.getIndex());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	Char  escapingOn  =  pattern.charAt(pos.getIndex());	  char    escapingOn    =    pattern.charAt(pos.getIndex()    +    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
126	[BUG]  [BUGGY]  String  lastHold  =  pattern.charAt(pos.getIndex()  +  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  String  lastHold  =  pattern.charAt(pos.getIndex()  +  escapingOn);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	String  lastHold  =  pattern.charAt(pos.getIndex()  +  escapingOn);	  char    lastHold    =    pattern.charAt(pos.getIndex()    +    escapingOn);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
127	[BUG]  [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex()  +  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  char  lastHold  =  pattern.charAt(pos.getIndex()  +  2);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	char  lastHold  =  pattern.charAt(pos.getIndex()  +  2);	  char    lastHold    =    pattern.charAt(pos.getIndex()    +    escapingOn);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
128	[BUG]  [BUGGY]  Char[]  c  =  pattern.toCharArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  Char[]  c  =  pattern.toCharArray();  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	Char[]  c  =  pattern.toCharArray();	  char[]    c    =    pattern.toCharArray()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
129	[BUG]  [BUGGY]  int  lastHold  =  pattern.charAt(pos.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  int  lastHold  =  pattern.charAt(pos.getIndex());  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  lastHold  =  pattern.charAt(pos.getIndex());	  int    lastHold    =    pattern.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
130	[BUG]  [BUGGY]  int  lastHold  =  pattern.charAt(pos.getIndex()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {      [BUGGY]  int  lastHold  =  pattern.charAt(pos.getIndex()  -  1);  [BUGGY]      int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	int  lastHold  =  pattern.charAt(pos.getIndex()  -  1);	  int    lastHold    =    pattern.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
