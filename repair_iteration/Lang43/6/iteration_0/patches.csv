bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  appendTo  ==  null?  null  :  appendTo.append(c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  [BUGGY]  return  appendTo  ==  null?  null  :  appendTo.append(c);  [BUGGY]  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo  ==  null?  null  :  appendTo.append(c);	return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
2	[BUG]  [BUGGY]  return  c  ==  null?  null  :  c.append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  [BUGGY]  return  c  ==  null?  null  :  c.append(QUOTE);  [BUGGY]  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c  ==  null?  null  :  c.append(QUOTE);	return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
3	[BUG]  [BUGGY]  return  appendTo  ==  null?  null  :  appendTo.append(c,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  [BUGGY]  return  appendTo  ==  null?  null  :  appendTo.append(c,  start);  [BUGGY]  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo  ==  null?  null  :  appendTo.append(c,  start);	return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
4	[BUG]  [BUGGY]  return  appendTo!=  null?  null  :  appendTo.append(c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  [BUGGY]  return  appendTo!=  null?  null  :  appendTo.append(c);  [BUGGY]  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo!=  null?  null  :  appendTo.append(c);	return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
5	[BUG]  [BUGGY]    [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  [BUGGY]    [BUGGY]  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	  	return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
6	[BUG]  [BUGGY]    char[]  c  =  pattern.toCharArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  [BUGGY]    char[]  c  =  pattern.toCharArray();  [BUGGY]  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	    char[]  c  =  pattern.toCharArray();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	add
7	[BUG]  [BUGGY]    appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  [BUGGY]    appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  [BUGGY]  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	    appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	add
8	[BUG]  [BUGGY]    pos.setIndex(i  +  c.length());  lastHold  =  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  [BUGGY]    pos.setIndex(i  +  c.length());  lastHold  =  pos.getIndex();  [BUGGY]  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	    pos.setIndex(i  +  c.length());  lastHold  =  pos.getIndex();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	add
9	[BUG]  [BUGGY]    pos.setIndex(i  +  c.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  [BUGGY]    pos.setIndex(i  +  c.length());  [BUGGY]  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	    pos.setIndex(i  +  c.length());		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	add
10	[BUG]  [BUGGY]    appendTo.append(c,  start,  pos.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  [BUGGY]    appendTo.append(c,  start,  pos.getIndex());  [BUGGY]  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	    appendTo.append(c,  start,  pos.getIndex());		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	add
11	[BUG]  [BUGGY]  return  appendTo  ==  null?  null  :  appendTo.append(END_FE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  [BUGGY]  return  appendTo  ==  null?  null  :  appendTo.append(END_FE);  [BUGGY]  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo  ==  null?  null  :  appendTo.append(END_FE);	return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
12	[BUG]  [BUGGY]    char  c  =  pattern.toCharArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  [BUGGY]    char  c  =  pattern.toCharArray();  [BUGGY]  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	    char  c  =  pattern.toCharArray();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	add
13	[BUG]  [BUGGY]    appendTo.append(c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  [BUGGY]    appendTo.append(c);  [BUGGY]  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	    appendTo.append(c);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	add
14	[BUG]  [BUGGY]    appendTo.append(c,  start,  i  +  c.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  [BUGGY]    appendTo.append(c,  start,  i  +  c.length());  [BUGGY]  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	    appendTo.append(c,  start,  i  +  c.length());		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	add
15	[BUG]  [BUGGY]  return  appendTo  ==  null  ||  escapingOn?  null  :  appendTo.append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  [BUGGY]  return  appendTo  ==  null  ||  escapingOn?  null  :  appendTo.append(QUOTE);  [BUGGY]  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo  ==  null  ||  escapingOn?  null  :  appendTo.append(QUOTE);	return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
16	[BUG]  [BUGGY]  return  appendTo  ==  null?  null  :  c.append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  [BUGGY]  return  appendTo  ==  null?  null  :  c.append(QUOTE);  [BUGGY]  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo  ==  null?  null  :  c.append(QUOTE);	return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
17	[BUG]  [BUGGY]    appendTo.append(c,  start,  lastHold);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  [BUGGY]    appendTo.append(c,  start,  lastHold);  [BUGGY]  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	    appendTo.append(c,  start,  lastHold);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	add
18	[BUG]  [BUGGY]    appendTo.append(c,  start,  i  +  ESCAPED_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  [BUGGY]    appendTo.append(c,  start,  i  +  ESCAPED_QUOTE);  [BUGGY]  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	    appendTo.append(c,  start,  i  +  ESCAPED_QUOTE);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	add
