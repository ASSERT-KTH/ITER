bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  appendTo.append(c,  start,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  escapingOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  escapingOn);	  appendTo.append(c,    escapingOn);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
2	[BUG]  [BUGGY]  appendTo.append(c,  escapingOn,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  escapingOn,  start);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  escapingOn,  start);	  appendTo.append(c,    escapingOn);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
3	[BUG]  [BUGGY]  appendTo.append(c,  start,  lastHold  +  c.charAt(i));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  lastHold  +  c.charAt(i));  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  lastHold  +  c.charAt(i));	  appendTo.append(c,    start,    lastHold    +    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
4	[BUG]  [BUGGY]  appendTo.append(c,  start,  lastHold  +  c.length()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  lastHold  +  c.length()  -  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  lastHold  +  c.length()  -  1);	  appendTo.append(c,    start,    lastHold    +    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
5	[BUG]  [BUGGY]  appendTo.append(c,  start,  lastHold  +  c[start].length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  lastHold  +  c[start].length());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  lastHold  +  c[start].length());	  appendTo.append(c,    start,    lastHold    +    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
6	[BUG]  [BUGGY]  appendTo.append(c,  start,  i  +  pattern.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  i  +  pattern.length());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  i  +  pattern.length());	  appendTo.append(c,    start,    i    +    c.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
7	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos  +  c.length()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos  +  c.length()  -  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos  +  c.length()  -  1);	  appendTo.append(c,    start,    i    +    c.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
8	[BUG]  [BUGGY]  appendTo.append(c,  start,  lastHold  +  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  lastHold  +  2);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  lastHold  +  2);	  appendTo.append(c,    start,    i    +    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
9	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos  +  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos  +  2);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos  +  2);	  appendTo.append(c,    start,    i    +    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
10	[BUG]  [BUGGY]  return  c  ==  null?  null  :  c.append(END_FE,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c  ==  null?  null  :  c.append(END_FE,  start);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c  ==  null?  null  :  c.append(END_FE,  start);	  return    c    ==    null?    null    :    c.append(START_FE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
11	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray()  +  escapingOn;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.toCharArray()  +  escapingOn;  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.toCharArray()  +  escapingOn;	  char    c    =    pattern.toCharArray()    +    start;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
12	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray()  +  i;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.toCharArray()  +  i;  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.toCharArray()  +  i;	  char    c    =    pattern.toCharArray()    +    start;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
13	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray()  +  start  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.toCharArray()  +  start  +  1;  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.toCharArray()  +  start  +  1;	  char    c    =    pattern.toCharArray()    +    start;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
14	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray()  *  start;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.toCharArray()  *  start;  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.toCharArray()  *  start;	  char    c    =    pattern.toCharArray()    +    start;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
15	[BUG]  [BUGGY]  String  c  =  pattern.toCharArray()  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  String  c  =  pattern.toCharArray()  +  1;  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	String  c  =  pattern.toCharArray()  +  1;	  String    c    =    pattern.toCharArray();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
16	[BUG]  [BUGGY]  String  c  =  pattern.toString();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  String  c  =  pattern.toString();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	String  c  =  pattern.toString();	  String    c    =    pattern.toCharArray();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
17	[BUG]  [BUGGY]  appendTo.append(c,  start,  lastHold  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  lastHold  +  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  lastHold  +  1);	  appendTo.append(c,    start,    i    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
18	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos  +  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos  +  1);	  appendTo.append(c,    start,    i    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
19	[BUG]  [BUGGY]  appendTo.append(c,  start,  i  +  1,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  i  +  1,  escapingOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  i  +  1,  escapingOn);	  appendTo.append(c,    start,    i    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
20	[BUG]  [BUGGY]  return  c!=  null?  null  :  c.append(START_FE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c!=  null?  null  :  c.append(START_FE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c!=  null?  null  :  c.append(START_FE);	  return    c!=    null?    null    :    c.append(END_FE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	69	None	replace
21	[BUG]  [BUGGY]  return  c!=  null?  null  :  c.append(END_FE,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c!=  null?  null  :  c.append(END_FE,  start);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c!=  null?  null  :  c.append(END_FE,  start);	  return    c!=    null?    null    :    c.append(END_FE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	69	None	replace
22	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray()  +  escapingOn;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.toCharArray()  +  escapingOn;  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.toCharArray()  +  escapingOn;	  char[]    c    =    pattern.toCharArray()    +    start;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
23	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray()  +  i;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.toCharArray()  +  i;  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.toCharArray()  +  i;	  char[]    c    =    pattern.toCharArray()    +    start;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
24	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray()  *  start;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.toCharArray()  *  start;  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.toCharArray()  *  start;	  char[]    c    =    pattern.toCharArray()    +    start;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
25	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(start,  pos.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.substring(start,  pos.length());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.substring(start,  pos.length());	  char[]    c    =    pattern.substring(start,    pos.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	78	None	replace
26	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(pos,  start.length()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.substring(pos,  start.length()  -  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.substring(pos,  start.length()  -  1);	  char[]    c    =    pattern.substring(start,    pos.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	78	None	replace
27	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(0,  pos.length()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.substring(0,  pos.length()  -  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.substring(0,  pos.length()  -  1);	  char[]    c    =    pattern.substring(start,    pos.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	78	None	replace
28	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(start,  pos.length()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.substring(start,  pos.length()  +  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.substring(start,  pos.length()  +  1);	  char[]    c    =    pattern.substring(start,    pos.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	78	None	replace
29	[BUG]  [BUGGY]  appendTo.append(c,  start,  i  +  lastHold);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  i  +  lastHold);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  i  +  lastHold);	  appendTo.append(c,    start,    lastHold    +    i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
30	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos  +  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos  +  i);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos  +  i);	  appendTo.append(c,    start,    lastHold    +    i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
31	[BUG]  [BUGGY]  appendTo.append(c,  start,  lastHold  +  i,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  lastHold  +  i,  escapingOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  lastHold  +  i,  escapingOn);	  appendTo.append(c,    start,    lastHold    +    i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
32	[BUG]  [BUGGY]  char[]  c  =  Pattern.toCharArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  Pattern.toCharArray();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  Pattern.toCharArray();	  char[]    c    =    pattern.toCharArray()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
33	[BUG]  [BUGGY]  char[]  c  =  pattern.toString();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.toString();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.toString();	  char[]    c    =    pattern.toCharArray()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
34	[BUG]  [BUGGY]  char[]  c  =  pattern.toCHARArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.toCHARArray();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.toCHARArray();	  char[]    c    =    pattern.toCharArray()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
35	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos,  escapingOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos,  escapingOn);	  appendTo.append(c,    start,    lastHold,    escapingOn);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
36	[BUG]  [BUGGY]  appendTo.append(c,  start,  escapingOn,  lastHold);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  escapingOn,  lastHold);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  escapingOn,  lastHold);	  appendTo.append(c,    start,    lastHold,    escapingOn);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
37	[BUG]  [BUGGY]  appendTo.append(c,  start,  lastHold,  pattern.charAt(i));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  lastHold,  pattern.charAt(i));  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  lastHold,  pattern.charAt(i));	  appendTo.append(c,    start,    lastHold,    escapingOn);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
38	[BUG]  [BUGGY]  return  appendTo  ==  null  &&  escapingOn?  null  :  c.append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo  ==  null  &&  escapingOn?  null  :  c.append(QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo  ==  null  &&  escapingOn?  null  :  c.append(QUOTE);	  return    appendTo    ==    null    ||    escapingOn?    null    :    c.append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	71	None	replace
39	[BUG]  [BUGGY]  return  escapingOn  &&  escapingOn?  null  :  c.append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  escapingOn  &&  escapingOn?  null  :  c.append(QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  escapingOn  &&  escapingOn?  null  :  c.append(QUOTE);	  return    appendTo    ==    null    ||    escapingOn?    null    :    c.append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	71	None	replace
40	[BUG]  [BUGGY]  return  appendTo  ==  null  ||  escapingOn?  null  :  c.append(ESCAPED_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo  ==  null  ||  escapingOn?  null  :  c.append(ESCAPED_QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo  ==  null  ||  escapingOn?  null  :  c.append(ESCAPED_QUOTE);	  return    appendTo    ==    null    ||    escapingOn?    null    :    c.append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	71	None	replace
41	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  firstHold).append(ESCAPED_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  firstHold).append(ESCAPED_QUOTE);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  firstHold).append(ESCAPED_QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    -    firstHold).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
42	[BUG]  [BUGGY]  appendTo.setCharAt(start,  c,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.setCharAt(start,  c,  escapingOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.setCharAt(start,  c,  escapingOn);	  appendTo.setCharAt(start,    c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
43	[BUG]  [BUGGY]  appendTo.setCharAt(i,  c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.setCharAt(i,  c);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.setCharAt(i,  c);	  appendTo.setCharAt(start,    c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
44	[BUG]  [BUGGY]  appendTo.setCharAt(start,  c,  escapeOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.setCharAt(start,  c,  escapeOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.setCharAt(start,  c,  escapeOn);	  appendTo.setCharAt(start,    c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
45	[BUG]  [BUGGY]  appendTo.setCharAt(start,  c  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.setCharAt(start,  c  +  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.setCharAt(start,  c  +  1);	  appendTo.setCharAt(start,    c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
46	[BUG]  [BUGGY]  return  appendTo!=  null?  null  :  appendTo.append(c,  start,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo!=  null?  null  :  appendTo.append(c,  start,  escapingOn);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo!=  null?  null  :  appendTo.append(c,  start,  escapingOn);	  return    appendTo!=    null?    null    :    appendTo.append(c,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
47	[BUG]  [BUGGY]  return  appendTo!=  null?  null  :  appendTo.append(c,  starting  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo!=  null?  null  :  appendTo.append(c,  starting  +  1);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo!=  null?  null  :  appendTo.append(c,  starting  +  1);	  return    appendTo!=    null?    null    :    appendTo.append(c,    starting);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
48	[BUG]  [BUGGY]  return  c!=  null?  null  :  appendTo.append(c,  starting);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c!=  null?  null  :  appendTo.append(c,  starting);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c!=  null?  null  :  appendTo.append(c,  starting);	  return    appendTo!=    null?    null    :    appendTo.append(c,    starting);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
49	[BUG]  [BUGGY]  return  appendTo!=  null?  null  :  appendTo.append(c,  starting,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo!=  null?  null  :  appendTo.append(c,  starting,  escapingOn);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo!=  null?  null  :  appendTo.append(c,  starting,  escapingOn);	  return    appendTo!=    null?    null    :    appendTo.append(c,    starting);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
50	[BUG]  [BUGGY]  return  c!=  null?  null  :  c.append(SCAPED_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c!=  null?  null  :  c.append(SCAPED_QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c!=  null?  null  :  c.append(SCAPED_QUOTE);	  return    c!=    null?    null    :    c.append(ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	72	None	replace
51	[BUG]  [BUGGY]  pos.setIndex(i  +  c.length);  lastHold  =  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  c.length);  lastHold  =  pos.getIndex();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  c.length);  lastHold  =  pos.getIndex();	  pos.setIndex(i    +    start);    lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	62	None	replace
52	[BUG]  [BUGGY]  pos.setIndex(i  +  lastHold);  lastHold  =  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  lastHold);  lastHold  =  pos.getIndex();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  lastHold);  lastHold  =  pos.getIndex();	  pos.setIndex(i    +    start);    lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	62	None	replace
53	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  pattern.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  pattern.getIndex());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  pattern.getIndex());	  appendTo.append(c,    start,    pos.getIndex()    -    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
54	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  pos.getIndex()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  pos.getIndex()  +  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  pos.getIndex()  +  1);	  appendTo.append(c,    start,    pos.getIndex()    -    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
55	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(pos.getIndex(),  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.substring(pos.getIndex(),  start);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.substring(pos.getIndex(),  start);	  char[]    c    =    pattern.substring(start,    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
56	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(pos,  start.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.substring(pos,  start.getIndex());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.substring(pos,  start.getIndex());	  char[]    c    =    pattern.substring(start,    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
57	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(start,  pos.getIndex()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.substring(start,  pos.getIndex()  -  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.substring(start,  pos.getIndex()  -  1);	  char[]    c    =    pattern.substring(start,    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
58	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(start,  pos.getIndex()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.substring(start,  pos.getIndex()  +  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.substring(start,  pos.getIndex()  +  1);	  char[]    c    =    pattern.substring(start,    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
59	[BUG]  [BUGGY]  return  c!=  null?  null  :  pattern.appendTo.append(c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c!=  null?  null  :  pattern.appendTo.append(c);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c!=  null?  null  :  pattern.appendTo.append(c);	  return    c!=    null?    null    :    appendTo.append(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
60	[BUG]  [BUGGY]  return  c!=  null?  null  :  c.append(escapingOn?  START_FE  :  c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c!=  null?  null  :  c.append(escapingOn?  START_FE  :  c);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c!=  null?  null  :  c.append(escapingOn?  START_FE  :  c);	  return    c!=    null?    null    :    appendTo.append(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
61	[BUG]  [BUGGY]  return  c!=  null?  null  :  c.append(escapingOn?  null  :  c.append(c));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c!=  null?  null  :  c.append(escapingOn?  null  :  c.append(c));  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c!=  null?  null  :  c.append(escapingOn?  null  :  c.append(c));	  return    c!=    null?    null    :    appendTo.append(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
62	[BUG]  [BUGGY]  return  c!=  null?  null  :  c.append(escapingOn?  START_FE  :  appendTo.append(c));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c!=  null?  null  :  c.append(escapingOn?  START_FE  :  appendTo.append(c));  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c!=  null?  null  :  c.append(escapingOn?  START_FE  :  appendTo.append(c));	  return    c!=    null?    null    :    appendTo.append(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
63	[BUG]  [BUGGY]  appendTo.append(c,  start,  pattern.getIndex()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pattern.getIndex()  -  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pattern.getIndex()  -  1);	  appendTo.append(c,    start,    pos.getIndex()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
64	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex();	  appendTo.append(c,    start,    pos.getIndex()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
65	[BUG]  [BUGGY]  pos.setIndex(i  +  lastHold.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  lastHold.length());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  lastHold.length());	  pos.setIndex(i    +    start.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
66	[BUG]  [BUGGY]  pos.setIndex(i  +  start.length()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  start.length()  -  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  start.length()  -  1);	  pos.setIndex(i    +    start.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
67	[BUG]  [BUGGY]  pos.setIndex(i  +  pattern.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  pattern.length());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  pattern.length());	  pos.setIndex(i    +    start.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
68	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  p.getIndex()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  p.getIndex()  +  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  p.getIndex()  +  1);	  appendTo.append(c,    start,    pos.getIndex()    -    p.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
69	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  START_FE.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  START_FE.getIndex());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  START_FE.getIndex());	  appendTo.append(c,    start,    pos.getIndex()    -    p.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
70	[BUG]  [BUGGY]  char  c  =  pattern.toCharBuffer(start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.toCharBuffer(start);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.toCharBuffer(start);	  char    c    =    pattern.toCharBuffer();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
71	[BUG]  [BUGGY]  String  c  =  pattern.toCharBuffer();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  String  c  =  pattern.toCharBuffer();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	String  c  =  pattern.toCharBuffer();	  char    c    =    pattern.toCharBuffer();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
72	[BUG]  [BUGGY]  char  c  =  pattern.toCharBuffer(2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.toCharBuffer(2);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.toCharBuffer(2);	  char    c    =    pattern.toCharBuffer();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
73	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  lastHold).append(ESCAPED_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  lastHold).append(ESCAPED_QUOTE);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  +  lastHold).append(ESCAPED_QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    +    lastHold).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
74	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  1).append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  1).append(QUOTE);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  +  1).append(QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    +    lastHold).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
75	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  2).append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  2).append(QUOTE);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  +  2).append(QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    +    lastHold).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
76	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(SUMMY_PATTERN);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(SUMMY_PATTERN);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(SUMMY_PATTERN);	  appendTo.append(c,    start,    pos.getIndex()    -    lastHold).append(ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
77	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharBuffer(start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.toCharBuffer(start);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.toCharBuffer(start);	  char[]    c    =    pattern.toCharBuffer();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
78	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharBuffer(start,  0);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.toCharBuffer(start,  0);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.toCharBuffer(start,  0);	  char[]    c    =    pattern.toCharBuffer();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
79	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()).append(ESCAPED_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()).append(ESCAPED_QUOTE);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()).append(ESCAPED_QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    -    1).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
80	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()).append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()).append(QUOTE);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()).append(QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    -    1).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
81	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()).append(SECAPED_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()).append(SECAPED_QUOTE);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()).append(SECAPED_QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    -    1).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
82	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()).append(SECOND_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()).append(SECOND_QUOTE);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()).append(SECOND_QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    -    1).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
83	[BUG]  [BUGGY]  return  appendTo  ==  null  &&  escapingOn?  null  :  appendTo.append(c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo  ==  null  &&  escapingOn?  null  :  appendTo.append(c);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo  ==  null  &&  escapingOn?  null  :  appendTo.append(c);	  return    appendTo    ==    null    &&    escapingOn?    null    :    appendTo.append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
84	[BUG]  [BUGGY]  return  escapingOn  &&  appendTo!=  null?  null  :  appendTo.append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  escapingOn  &&  appendTo!=  null?  null  :  appendTo.append(QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  escapingOn  &&  appendTo!=  null?  null  :  appendTo.append(QUOTE);	  return    appendTo    ==    null    &&    escapingOn?    null    :    appendTo.append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
85	[BUG]  [BUGGY]  return  appendTo!=  null  &&  escapingOn?  null  :  appendTo.append(c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo!=  null  &&  escapingOn?  null  :  appendTo.append(c);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo!=  null  &&  escapingOn?  null  :  appendTo.append(c);	  return    appendTo    ==    null    &&    escapingOn?    null    :    appendTo.append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
86	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(0,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.toCharArray(0,  start);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.toCharArray(0,  start);	  char    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
87	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.toCharArray(i);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.toCharArray(i);	  char    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
88	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(start  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.toCharArray(start  +  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.toCharArray(start  +  1);	  char    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
89	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.toCharArray(pos);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.toCharArray(pos);	  char    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
90	[BUG]  [BUGGY]  return  c  ==  null?  null  :  pattern.appendTo.append(c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c  ==  null?  null  :  pattern.appendTo.append(c);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c  ==  null?  null  :  pattern.appendTo.append(c);	  return    c    ==    null?    null    :    appendTo.append(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
91	[BUG]  [BUGGY]  return  c  ==  null?  null  :  c.append(escapingOn?  null  :  c.append(c));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c  ==  null?  null  :  c.append(escapingOn?  null  :  c.append(c));  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c  ==  null?  null  :  c.append(escapingOn?  null  :  c.append(c));	  return    c    ==    null?    null    :    appendTo.append(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
92	[BUG]  [BUGGY]  return  c  ==  null?  null  :  c.append(escapingOn?  START_FE  :  c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c  ==  null?  null  :  c.append(escapingOn?  START_FE  :  c);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c  ==  null?  null  :  c.append(escapingOn?  START_FE  :  c);	  return    c    ==    null?    null    :    appendTo.append(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
93	[BUG]  [BUGGY]  appendTo.append(c,  start,  i);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  i);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  i);  pos.setIndex(i  +  ESCAPED_QUOTE.length());	  appendTo.append(c,    start,    lastHold);    pos.setIndex(i    +    ESCAPED_QUOTE.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	79	None	replace
94	[BUG]  [BUGGY]  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  ESCAPED_QUOTE.length());	  appendTo.append(c,    start,    lastHold);    pos.setIndex(i    +    ESCAPED_QUOTE.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	79	None	replace
95	[BUG]  [BUGGY]  appendTo.append(c,  start,  lastHold);  pos.setIndex(i  +  pattern.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  lastHold);  pos.setIndex(i  +  pattern.length());  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  lastHold);  pos.setIndex(i  +  pattern.length());	  appendTo.append(c,    start,    lastHold);    pos.setIndex(i    +    ESCAPED_QUOTE.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	79	None	replace
96	[BUG]  [BUGGY]  return  appendTo  ==  null?  null  :  appendTo.append(c,  starting  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo  ==  null?  null  :  appendTo.append(c,  starting  +  1);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo  ==  null?  null  :  appendTo.append(c,  starting  +  1);	  return    appendTo    ==    null?    null    :    appendTo.append(c,    starting);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
97	[BUG]  [BUGGY]  return  appendTo  ==  null?  null  :  appendTo.append(c,  starting,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo  ==  null?  null  :  appendTo.append(c,  starting,  escapingOn);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo  ==  null?  null  :  appendTo.append(c,  starting,  escapingOn);	  return    appendTo    ==    null?    null    :    appendTo.append(c,    starting);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
98	[BUG]  [BUGGY]  return  c  ==  null?  null  :  appendTo.append(c,  starting);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c  ==  null?  null  :  appendTo.append(c,  starting);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c  ==  null?  null  :  appendTo.append(c,  starting);	  return    appendTo    ==    null?    null    :    appendTo.append(c,    starting);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
99	[BUG]  [BUGGY]  appendTo.append(c,  pos,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  pos,  start);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  pos,  start);	  appendTo.append(c,    start,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
100	[BUG]  [BUGGY]  return  escapingOn?  null  :  appendTo.append(c,  start  +  1,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  escapingOn?  null  :  appendTo.append(c,  start  +  1,  escapingOn);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  escapingOn?  null  :  appendTo.append(c,  start  +  1,  escapingOn);	  return    appendTo    ==    null?    null    :    appendTo.append(c,    start    +    1,    escapingOn);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	83	None	replace
101	[BUG]  [BUGGY]  return  appendTo  ==  null?  null  :  appendTo.append(c,  start  +  1,  pattern.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo  ==  null?  null  :  appendTo.append(c,  start  +  1,  pattern.length());  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo  ==  null?  null  :  appendTo.append(c,  start  +  1,  pattern.length());	  return    appendTo    ==    null?    null    :    appendTo.append(c,    start    +    1,    escapingOn);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	83	None	replace
102	[BUG]  [BUGGY]  appendTo.append(c,  start,  escapeOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  escapeOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  escapeOn);	  appendTo.append(c,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
103	[BUG]  [BUGGY]  appendTo.append(c,  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  i);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  i);	  appendTo.append(c,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
104	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(0,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.toCharArray(0,  start);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.toCharArray(0,  start);	  char[]    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
105	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.toCharArray(escapingOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.toCharArray(escapingOn);	  char[]    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
106	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.toCharArray(i);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.toCharArray(i);	  char[]    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
107	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.toCharArray(pos);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.toCharArray(pos);	  char[]    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
108	[BUG]  [BUGGY]  pos.setIndex(start  +  2);  lastHold  =  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(start  +  2);  lastHold  =  pos.getIndex();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(start  +  2);  lastHold  =  pos.getIndex();	  pos.setIndex(i    +    2);    lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	82	None	replace
109	[BUG]  [BUGGY]  pos.setIndex(i  +  3);  lastHold  =  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  3);  lastHold  =  pos.getIndex();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  3);  lastHold  =  pos.getIndex();	  pos.setIndex(i    +    2);    lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	82	None	replace
110	[BUG]  [BUGGY]  return  appendTo  ==  null  &&  escapingOn?  null  :  appendTo.append(END_FE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo  ==  null  &&  escapingOn?  null  :  appendTo.append(END_FE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo  ==  null  &&  escapingOn?  null  :  appendTo.append(END_FE);	  return    appendTo    ==    null    ||    escapingOn?    null    :    appendTo.append(END_FE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
111	[BUG]  [BUGGY]  lastHold  =  pos.getIndex()  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  lastHold  =  pos.getIndex()  +  1;  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	lastHold  =  pos.getIndex()  +  1;	  lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
112	[BUG]  [BUGGY]  lastHold  =  pos.getIndex()  +  start;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  lastHold  =  pos.getIndex()  +  start;  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	lastHold  =  pos.getIndex()  +  start;	  lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
113	[BUG]  [BUGGY]  lastHold  =  pos.getIndex()  +  2;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  lastHold  =  pos.getIndex()  +  2;  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	lastHold  =  pos.getIndex()  +  2;	  lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
114	[BUG]  [BUGGY]  appendTo.append(c,  start,  p.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  p.getIndex());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  p.getIndex());	  appendTo.append(c,    start,    pos.getIndex()    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
115	[BUG]  [BUGGY]  appendTo.append(c,  start,  pattern.getIndex()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pattern.getIndex()  +  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pattern.getIndex()  +  1);	  appendTo.append(c,    start,    pos.getIndex()    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
116	[BUG]  [BUGGY]  appendTo.append(c,  start,  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  1);	  appendTo.append(c,    start,    0);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	67	None	replace
117	[BUG]  [BUGGY]  appendTo.append(c,  start,  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  2);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  2);	  appendTo.append(c,    start,    0);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	67	None	replace
118	[BUG]  [BUGGY]  appendTo.append(c,  start,  3);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  3);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  3);	  appendTo.append(c,    start,    0);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	67	None	replace
119	[BUG]  [BUGGY]  pos.setIndex(start  +  c.length()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(start  +  c.length()  -  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(start  +  c.length()  -  1);	  pos.setIndex(start    +    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
120	[BUG]  [BUGGY]  pos.setIndex(start  +  c.length()  -  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(start  +  c.length()  -  2);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(start  +  c.length()  -  2);	  pos.setIndex(start    +    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
121	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(0,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.substring(0,  start);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.substring(0,  start);	  char[]    c    =    pattern.substring(start,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
122	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(start,  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.substring(start,  i);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.substring(start,  i);	  char[]    c    =    pattern.substring(start,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
123	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(start,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.substring(start,  pos);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.substring(start,  pos);	  char[]    c    =    pattern.substring(start,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
124	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  2);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  2);	  appendTo.append(c,    start,    pos.getIndex()    -    ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
125	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  i);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  i);	  appendTo.append(c,    start,    pos.getIndex()    -    ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
126	[BUG]  [BUGGY]  char  c  =  pattern.substring(0,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.substring(0,  start);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.substring(0,  start);	  char    c    =    pattern.substring(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
127	[BUG]  [BUGGY]  char  c  =  pattern.substring(start,  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.substring(start,  i);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.substring(start,  i);	  char    c    =    pattern.substring(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
128	[BUG]  [BUGGY]  char  c  =  pattern.substring(pos.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.substring(pos.getIndex());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.substring(pos.getIndex());	  char    c    =    pattern.substring(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
129	[BUG]  [BUGGY]  char  c  =  pattern.substring(start,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.substring(start,  pos);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.substring(start,  pos);	  char    c    =    pattern.substring(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
130	[BUG]  [BUGGY]  appendTo.append(c,  start,  lastHold  -  ESCAPED_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  lastHold  -  ESCAPED_QUOTE);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  lastHold  -  ESCAPED_QUOTE);	  appendTo.append(c,    start,    lastHold    +    ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	66	None	replace
131	[BUG]  [BUGGY]  appendTo.append(c,  start,  i  +  1,  pattern.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  i  +  1,  pattern.length());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  i  +  1,  pattern.length());	  appendTo.append(c,    start,    i    +    1,    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	84	None	replace
132	[BUG]  [BUGGY]  appendTo.append(c,  start,  i  +  1,  c.length()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  i  +  1,  c.length()  -  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  i  +  1,  c.length()  -  1);	  appendTo.append(c,    start,    i    +    1,    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	84	None	replace
133	[BUG]  [BUGGY]  appendTo.append(c,  start,  lastHold  +  1,  c.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  lastHold  +  1,  c.length());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  lastHold  +  1,  c.length());	  appendTo.append(c,    start,    i    +    1,    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	84	None	replace
134	[BUG]  [BUGGY]  appendTo.append(c,  start,  i  +  1,  c.charAt(i  +  1));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  i  +  1,  c.charAt(i  +  1));  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  i  +  1,  c.charAt(i  +  1));	  appendTo.append(c,    start,    i    +    1,    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	84	None	replace
135	[BUG]  [BUGGY]  return  c  ==  null?  null  :  c.append(SCAPED_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c  ==  null?  null  :  c.append(SCAPED_QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c  ==  null?  null  :  c.append(SCAPED_QUOTE);	  return    c    ==    null?    null    :    c.append(ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
136	[BUG]  [BUGGY]  return  c  ==  null?  null  :  c.append(END_FE,  ESCAPED_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c  ==  null?  null  :  c.append(END_FE,  ESCAPED_QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c  ==  null?  null  :  c.append(END_FE,  ESCAPED_QUOTE);	  return    c    ==    null?    null    :    c.append(ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
137	[BUG]  [BUGGY]  return  escapingOn  &&  c  ==  null  ||  escapingOn?  null  :  appendTo.append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  escapingOn  &&  c  ==  null  ||  escapingOn?  null  :  appendTo.append(QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  escapingOn  &&  c  ==  null  ||  escapingOn?  null  :  appendTo.append(QUOTE);	  return    escapingOn    &&    appendTo    ==    null    ||    escapingOn?    null    :    appendTo.append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
138	[BUG]  [BUGGY]  return  escapingOn  &&  pattern  ==  null  ||  escapingOn?  null  :  appendTo.append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  escapingOn  &&  pattern  ==  null  ||  escapingOn?  null  :  appendTo.append(QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  escapingOn  &&  pattern  ==  null  ||  escapingOn?  null  :  appendTo.append(QUOTE);	  return    escapingOn    &&    appendTo    ==    null    ||    escapingOn?    null    :    appendTo.append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
139	[BUG]  [BUGGY]  pos.setIndex(i  +  1,  c.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  1,  c.length());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  1,  c.length());	  pos.setIndex(i    +    start,    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
140	[BUG]  [BUGGY]  pos.setIndex(i  +  lastHold,  c.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  lastHold,  c.length());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  lastHold,  c.length());	  pos.setIndex(i    +    start,    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
141	[BUG]  [BUGGY]  pos.setIndex(i  +  start,  c.length()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  start,  c.length()  -  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  start,  c.length()  -  1);	  pos.setIndex(i    +    start,    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
142	[BUG]  [BUGGY]  pos.setIndex(i  +  start,  pattern.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  start,  pattern.length());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  start,  pattern.length());	  pos.setIndex(i    +    start,    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
143	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  c.length()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  c.length()  -  1);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  +  c.length()  -  1);	  appendTo.append(c,    start,    pos.getIndex()    +    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
144	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  c[start].length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  c[start].length());  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  +  c[start].length());	  appendTo.append(c,    start,    pos.getIndex()    +    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
145	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  c.charAt(i));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  c.charAt(i));  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  +  c.charAt(i));	  appendTo.append(c,    start,    pos.getIndex()    +    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
146	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos  +  pattern.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos  +  pattern.length());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos  +  pattern.length());	  appendTo.append(c,    start,    pos    +    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
147	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos  +  escapeOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos  +  escapeOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos  +  escapeOn);	  appendTo.append(c,    start,    pos    +    ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
148	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos  +  3);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos  +  3);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos  +  3);	  appendTo.append(c,    start,    pos    +    ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
149	[BUG]  [BUGGY]  appendTo.append(c,  i,  pos.getIndex()  -  lastHold).append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  i,  pos.getIndex()  -  lastHold).append(QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  i,  pos.getIndex()  -  lastHold).append(QUOTE);	  appendTo.append(c,    lastHold,    pos.getIndex()    -    lastHold).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
150	[BUG]  [BUGGY]  appendTo.append(c,  pos.getIndex()  -  lastHold).append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  pos.getIndex()  -  lastHold).append(QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  pos.getIndex()  -  lastHold).append(QUOTE);	  appendTo.append(c,    lastHold,    pos.getIndex()    -    lastHold).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
151	[BUG]  [BUGGY]  appendTo.append(c,  starting,  pos.getIndex()  -  lastHold).append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  starting,  pos.getIndex()  -  lastHold).append(QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  starting,  pos.getIndex()  -  lastHold).append(QUOTE);	  appendTo.append(c,    lastHold,    pos.getIndex()    -    lastHold).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
152	[BUG]  [BUGGY]  appendTo.append(c,  starting,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  starting,  escapingOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  starting,  escapingOn);	  appendTo.append(c,    starting);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
153	[BUG]  [BUGGY]  appendTo.append(c,  starting,  escapeOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  starting,  escapeOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  starting,  escapeOn);	  appendTo.append(c,    starting);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
154	[BUG]  [BUGGY]  appendTo.append(c,  i,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  i,  start);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  i,  start);	  appendTo.append(c,    i,    lastHold);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
155	[BUG]  [BUGGY]  appendTo.append(c,  i,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  i,  escapingOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  i,  escapingOn);	  appendTo.append(c,    i,    lastHold);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
156	[BUG]  [BUGGY]  appendTo.append(c,  pos,  lastHold);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  pos,  lastHold);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  pos,  lastHold);	  appendTo.append(c,    i,    lastHold);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
157	[BUG]  [BUGGY]  pos.setIndex(start  +  1);  lastHold  =  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(start  +  1);  lastHold  =  pos.getIndex();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(start  +  1);  lastHold  =  pos.getIndex();	  pos.setIndex(i    +    1);    lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	28	None	replace
158	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  QUOTE).append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  QUOTE).append(QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  QUOTE).append(QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    -    START_FMT).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	81	None	replace
159	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  END_FE).append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  END_FE).append(QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  END_FE).append(QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    -    START_FMT).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	81	None	replace
160	[BUG]  [BUGGY]  pos.setIndex(start  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(start  +  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(start  +  1);	  pos.setIndex(i    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
161	[BUG]  [BUGGY]  pos.setIndex(i  +  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  2);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  2);	  pos.setIndex(i    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
162	[BUG]  [BUGGY]  pos.setIndex(i  +  3);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  3);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  3);	  pos.setIndex(i    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
163	[BUG]  [BUGGY]  pos.setIndex(i  +  c.length()  -  start,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  c.length()  -  start,  escapingOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  c.length()  -  start,  escapingOn);	  pos.setIndex(i    +    c.length()    -    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
164	[BUG]  [BUGGY]  pos.setIndex(i  +  c.length()  *  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  c.length()  *  start);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  c.length()  *  start);	  pos.setIndex(i    +    c.length()    -    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
165	[BUG]  [BUGGY]  return  appendTo  ==  null?  null  :  c.append(escapingOn?  START_FE  :  ESCAPED_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo  ==  null?  null  :  c.append(escapingOn?  START_FE  :  ESCAPED_QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo  ==  null?  null  :  c.append(escapingOn?  START_FE  :  ESCAPED_QUOTE);	  return    appendTo    ==    null?    null    :    c.append(ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
166	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  2);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  +  2);	  appendTo.append(c,    start,    pos.getIndex()    +    ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	80	None	replace
167	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  i);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  +  i);	  appendTo.append(c,    start,    pos.getIndex()    +    ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	80	None	replace
168	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  3);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  3);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  +  3);	  appendTo.append(c,    start,    pos.getIndex()    +    ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	80	None	replace
169	[BUG]  [BUGGY]  pos.setIndex(i  +  lastHold.length());  lastHold  =  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  lastHold.length());  lastHold  =  pos.getIndex();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  lastHold.length());  lastHold  =  pos.getIndex();	  pos.setIndex(i    +    c.length()    -    1);    lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
170	[BUG]  [BUGGY]  return  appendTo!=  null?  null  :  c.toString();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo!=  null?  null  :  c.toString();  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo!=  null?  null  :  c.toString();	  return    appendTo    ==    null?    null    :    c.toString();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	73	None	replace
171	[BUG]  [BUGGY]  pos.setIndex(i  +  start.length());  lastHold  =  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  start.length());  lastHold  =  pos.getIndex();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  start.length());  lastHold  =  pos.getIndex();	  pos.setIndex(i    +    START_FE.length());    lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
172	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  ESCAPED_QUOTE).append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  ESCAPED_QUOTE).append(QUOTE);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  +  ESCAPED_QUOTE).append(QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    -    ESCAPED_QUOTE).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
173	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  2).append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  2).append(QUOTE);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  2).append(QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    -    ESCAPED_QUOTE).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
174	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  ESCAPED_QUOTE).append(SUMMY_PATTERN);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  ESCAPED_QUOTE).append(SUMMY_PATTERN);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  ESCAPED_QUOTE).append(SUMMY_PATTERN);	  appendTo.append(c,    start,    pos.getIndex()    -    ESCAPED_QUOTE).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
175	[BUG]  [BUGGY]  return  c!=  null?  null  :  c.toString();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c!=  null?  null  :  c.toString();  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c!=  null?  null  :  c.toString();	  return    c    ==    null?    null    :    c.toString();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	70	None	replace
176	[BUG]  [BUGGY]  return  appendTo  ==  null  ||  escapingOn?  null  :  appendTo.append(c,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo  ==  null  ||  escapingOn?  null  :  appendTo.append(c,  start);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo  ==  null  ||  escapingOn?  null  :  appendTo.append(c,  start);	  return    appendTo    ==    null    ||    escapingOn?    null    :    appendTo.append(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
177	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  CSCAPED_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  CSCAPED_QUOTE);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  +  CSCAPED_QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    -    CSCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
178	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  escapeOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  escapeOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  escapeOn);	  appendTo.append(c,    start,    pos.getIndex()    -    CSCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
179	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos  +  QUOTE.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos  +  QUOTE.length());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos  +  QUOTE.length());	  appendTo.append(c,    start,    pos    +    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
180	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos  +  c.charAt(i));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos  +  c.charAt(i));  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos  +  c.charAt(i));	  appendTo.append(c,    start,    pos    +    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
181	[BUG]  [BUGGY]  return  appendTo!=  null?  null  :  appendTo.append(END_FE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo!=  null?  null  :  appendTo.append(END_FE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo!=  null?  null  :  appendTo.append(END_FE);	  return    appendTo    ==    null?    null    :    appendTo.append(START_FE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	68	None	replace
182	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  END_FE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  END_FE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  END_FE);	  appendTo.append(c,    start,    pos.getIndex()    -    ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
183	[BUG]  [BUGGY]  appendTo.append(c,  start  +  i);  lastHold  =  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start  +  i);  lastHold  =  pos.getIndex();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start  +  i);  lastHold  =  pos.getIndex();	  pos.setIndex(i    +    1);    lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	28	None	replace
184	[BUG]  [BUGGY]  pos.setIndex(i  +  QUOTE.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  QUOTE.length());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  QUOTE.length());	  pos.setIndex(i    +    c.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
185	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharString();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.toCharString();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.toCharString();	  char[]    c    =    pattern.toCharBuffer();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
186	[BUG]  [BUGGY]  appendTo.append(c,  start  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start  +  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start  +  1);	  appendTo.append(c,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
187	[BUG]  [BUGGY]  return  appendTo!=  null?  null  :  appendTo.toString();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo!=  null?  null  :  appendTo.toString();  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo!=  null?  null  :  appendTo.toString();	  return    appendTo    ==    null?    null    :    appendTo.toString();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
188	[BUG]  [BUGGY]  return  appendTo!=  null?  null  :  appendTo.append(c,  start  +  1,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo!=  null?  null  :  appendTo.append(c,  start  +  1,  escapingOn);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo!=  null?  null  :  appendTo.append(c,  start  +  1,  escapingOn);	  return    appendTo    ==    null?    null    :    appendTo.append(c,    start    +    1,    escapingOn);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	83	None	replace
189	[BUG]  [BUGGY]  appendTo.append(c,  start,  i,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  i,  escapingOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  i,  escapingOn);	  appendTo.append(c,    start,    lastHold,    escapingOn);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
190	[BUG]  [BUGGY]  appendTo.append(c,  start,  i,  lastHold,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  i,  lastHold,  escapingOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  i,  lastHold,  escapingOn);	  appendTo.append(c,    start,    lastHold,    escapingOn);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
191	[BUG]  [BUGGY]  return  c!=  null?  null  :  c.append(escapingOn?  null  :  c.append(END_FE));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c!=  null?  null  :  c.append(escapingOn?  null  :  c.append(END_FE));  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c!=  null?  null  :  c.append(escapingOn?  null  :  c.append(END_FE));	  return    c!=    null?    null    :    appendTo.append(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
192	[BUG]  [BUGGY]  return  c!=  null?  null  :  c.append(escapingOn?  null  :  c.append(QUOTE));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c!=  null?  null  :  c.append(escapingOn?  null  :  c.append(QUOTE));  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c!=  null?  null  :  c.append(escapingOn?  null  :  c.append(QUOTE));	  return    c!=    null?    null    :    appendTo.append(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
193	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  QUOTE.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  QUOTE.length());  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  +  QUOTE.length());	  appendTo.append(c,    start,    pos.getIndex()    +    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
194	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos  +  END_FE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos  +  END_FE);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos  +  END_FE);	  appendTo.append(c,    start,    pos    +    ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
195	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray()  +  start  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.toCharArray()  +  start  +  1;  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.toCharArray()  +  start  +  1;	  char[]    c    =    pattern.toCharArray()    +    start;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
196	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  p.getIndex()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  p.getIndex()  -  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  p.getIndex()  -  1);	  appendTo.append(c,    start,    pos.getIndex()    -    p.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
197	[BUG]  [BUGGY]  return  appendTo  &&  escapingOn  ||  c  ==  null  ||  escapingOn?  null  :  appendTo.append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo  &&  escapingOn  ||  c  ==  null  ||  escapingOn?  null  :  appendTo.append(QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo  &&  escapingOn  ||  c  ==  null  ||  escapingOn?  null  :  appendTo.append(QUOTE);	  return    escapingOn    &&    appendTo    ==    null    ||    escapingOn?    null    :    appendTo.append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
198	[BUG]  [BUGGY]  return  escapingOn  &&  appendTo!=  null  ||  escapingOn?  null  :  appendTo.append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  escapingOn  &&  appendTo!=  null  ||  escapingOn?  null  :  appendTo.append(QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  escapingOn  &&  appendTo!=  null  ||  escapingOn?  null  :  appendTo.append(QUOTE);	  return    escapingOn    &&    appendTo    ==    null    ||    escapingOn?    null    :    appendTo.append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
199	[BUG]  [BUGGY]  return  escapingOn  &&  appendTo!=  null  &&  escapingOn?  null  :  appendTo.append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  escapingOn  &&  appendTo!=  null  &&  escapingOn?  null  :  appendTo.append(QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  escapingOn  &&  appendTo!=  null  &&  escapingOn?  null  :  appendTo.append(QUOTE);	  return    escapingOn    &&    appendTo    ==    null    ||    escapingOn?    null    :    appendTo.append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
200	[BUG]  [BUGGY]  appendTo.append(c,  start,  end);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  end);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  end);	  appendTo.append(c,    start,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
201	[BUG]  [BUGGY]  pos.setIndex(i  +  c.length()  -  start  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  c.length()  -  start  +  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  c.length()  -  start  +  1);	  pos.setIndex(i    +    c.length()    -    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
202	[BUG]  [BUGGY]  appendTo.setCharAt(start,  c[start]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.setCharAt(start,  c[start]);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.setCharAt(start,  c[start]);	  appendTo.setCharAt(start,    c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
203	[BUG]  [BUGGY]  pos.setIndex(i  +  ECLOUD_QUOTE.length());  lastHold  =  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  ECLOUD_QUOTE.length());  lastHold  =  pos.getIndex();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  ECLOUD_QUOTE.length());  lastHold  =  pos.getIndex();	  pos.setIndex(i    +    start);    lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	62	None	replace
204	[BUG]  [BUGGY]  pos.setIndex(i  +  START_FE,  c.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  START_FE,  c.length());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  START_FE,  c.length());	  pos.setIndex(i    +    start,    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
205	[BUG]  [BUGGY]  pos.setIndex(i  +  c.length);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  c.length);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  c.length);	  pos.setIndex(i    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
206	[BUG]  [BUGGY]  appendTo.setIndex(i  +  c.length());  lastHold  =  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.setIndex(i  +  c.length());  lastHold  =  pos.getIndex();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.setIndex(i  +  c.length());  lastHold  =  pos.getIndex();	  pos.setIndex(i    +    c.length()    -    1);    lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
207	[BUG]  [BUGGY]  char  c  =  pattern.substring(start  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.substring(start  +  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.substring(start  +  1);	  char    c    =    pattern.substring(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
208	[BUG]  [BUGGY]  char  c  =  pattern.substring(start,  0);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.substring(start,  0);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.substring(start,  0);	  char    c    =    pattern.substring(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
209	[BUG]  [BUGGY]  char  c  =  pattern.substring(start,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.substring(start,  start);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.substring(start,  start);	  char    c    =    pattern.substring(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
210	[BUG]  [BUGGY]  return  appendTo  ==  null?  null  :  c.append('n');  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo  ==  null?  null  :  c.append('n');  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo  ==  null?  null  :  c.append('n');	  return    appendTo    ==    null?    null    :    c.append(END_FE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
211	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(start,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.toCharArray(start,  escapingOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.toCharArray(start,  escapingOn);	  char    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
212	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(start,  escapeOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.toCharArray(start,  escapeOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.toCharArray(start,  escapeOn);	  char    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
213	[BUG]  [BUGGY]  appendTo.append(c,  pos,  pos.getIndex()  -  lastHold).append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  pos,  pos.getIndex()  -  lastHold).append(QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  pos,  pos.getIndex()  -  lastHold).append(QUOTE);	  appendTo.append(c,    lastHold,    pos.getIndex()    -    lastHold).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
214	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(start,  pos.getIndex()  -  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.substring(start,  pos.getIndex()  -  2);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.substring(start,  pos.getIndex()  -  2);	  char[]    c    =    pattern.substring(start,    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
215	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(start,  pos.getIndex()  -  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.substring(start,  pos.getIndex()  -  start);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.substring(start,  pos.getIndex()  -  start);	  char[]    c    =    pattern.substring(start,    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
216	[BUG]  [BUGGY]  return  appendTo  ==  null  ||  escapingOn?  null  :  appendTo.append(START_FE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo  ==  null  ||  escapingOn?  null  :  appendTo.append(START_FE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo  ==  null  ||  escapingOn?  null  :  appendTo.append(START_FE);	  return    appendTo    ==    null    ||    escapingOn?    null    :    appendTo.append(END_FE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
217	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(start,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.toCharArray(start,  escapingOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.toCharArray(start,  escapingOn);	  char[]    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
218	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(start  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.toCharArray(start  +  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.toCharArray(start  +  1);	  char[]    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
219	[BUG]  [BUGGY]  pos.setIndex(start  +  c.length()  -  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(start  +  c.length()  -  start);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(start  +  c.length()  -  start);	  pos.setIndex(start    +    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
220	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos  +  1,  c.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos  +  1,  c.length());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos  +  1,  c.length());	  appendTo.append(c,    start,    i    +    1,    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	84	None	replace
221	[BUG]  [BUGGY]  return  c  ==  null?  null  :  c.append(START_FMT);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c  ==  null?  null  :  c.append(START_FMT);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c  ==  null?  null  :  c.append(START_FMT);	  return    c    ==    null?    null    :    c.append(END_FE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
222	[BUG]  [BUGGY]  appendTo.append(c,  start,  lastHold  +  eCAPED_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  lastHold  +  eCAPED_QUOTE);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  lastHold  +  eCAPED_QUOTE);	  appendTo.append(c,    start,    lastHold    +    ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	66	None	replace
223	[BUG]  [BUGGY]  appendTo.append(c,  start,  0);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  0);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  0);  pos.setIndex(i  +  ESCAPED_QUOTE.length());	  appendTo.append(c,    start,    lastHold);    pos.setIndex(i    +    ESCAPED_QUOTE.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	79	None	replace
224	[BUG]  [BUGGY]  appendTo.append(c,  start,  lastHold);  pos.setIndex(i  +  QUOTE.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  lastHold);  pos.setIndex(i  +  QUOTE.length());  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  lastHold);  pos.setIndex(i  +  QUOTE.length());	  appendTo.append(c,    start,    lastHold);    pos.setIndex(i    +    ESCAPED_QUOTE.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	79	None	replace
225	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(start,  start  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.substring(start,  start  +  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.substring(start,  start  +  1);	  char[]    c    =    pattern.substring(start,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
226	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(start,  0);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.substring(start,  0);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.substring(start,  0);	  char[]    c    =    pattern.substring(start,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
227	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  end).append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  end).append(QUOTE);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  +  end).append(QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    +    lastHold).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
228	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  END_FE).append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  END_FE).append(QUOTE);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  +  END_FE).append(QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    +    lastHold).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
229	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  1).append(ESCAPED_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  1).append(ESCAPED_QUOTE);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  1).append(ESCAPED_QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    -    lastHold).append(ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
230	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(DUMMY_PATTERN);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(DUMMY_PATTERN);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(DUMMY_PATTERN);	  appendTo.append(c,    start,    pos.getIndex()    -    lastHold).append(ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
231	[BUG]  [BUGGY]  return  start!=  null?  null  :  appendTo.append(c,  starting);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  start!=  null?  null  :  appendTo.append(c,  starting);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  start!=  null?  null  :  appendTo.append(c,  starting);	  return    appendTo!=    null?    null    :    appendTo.append(c,    starting);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
232	[BUG]  [BUGGY]  lastHold  =  pos.getIndex()  -  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  lastHold  =  pos.getIndex()  -  1;  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	lastHold  =  pos.getIndex()  -  1;	  lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
233	[BUG]  [BUGGY]  return  c  ==  null?  null  :  c.append(escapingOn?  null  :  c.append(END_FE));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c  ==  null?  null  :  c.append(escapingOn?  null  :  c.append(END_FE));  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c  ==  null?  null  :  c.append(escapingOn?  null  :  c.append(END_FE));	  return    c    ==    null?    null    :    appendTo.append(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
234	[BUG]  [BUGGY]  return  c  ==  null?  null  :  c.append(escapingOn?  null  :  c.toString());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c  ==  null?  null  :  c.append(escapingOn?  null  :  c.toString());  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c  ==  null?  null  :  c.append(escapingOn?  null  :  c.toString());	  return    c    ==    null?    null    :    appendTo.append(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
235	[BUG]  [BUGGY]  String  c  =  pattern.toCharArray()  +  start;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  String  c  =  pattern.toCharArray()  +  start;  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	String  c  =  pattern.toCharArray()  +  start;	  String    c    =    pattern.toCharArray();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
236	[BUG]  [BUGGY]  return  appendTo  ==  null  ||  escapingOn?  null  :  c.append(END_FE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo  ==  null  ||  escapingOn?  null  :  c.append(END_FE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo  ==  null  ||  escapingOn?  null  :  c.append(END_FE);	  return    appendTo    ==    null    ||    escapingOn?    null    :    c.append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	71	None	replace
237	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()).append(END_FE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()).append(END_FE);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()).append(END_FE);	  appendTo.append(c,    start,    pos.getIndex()    -    1).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
238	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  ESCAPED_QUOTE.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  ESCAPED_QUOTE.length());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  ESCAPED_QUOTE.length());	  appendTo.append(c,    start,    pos.getIndex()    -    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
239	[BUG]  [BUGGY]  pos.setIndex(i  +  START_FMT.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  START_FMT.length());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  START_FMT.length());	  pos.setIndex(i    +    start.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
240	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(start,  pos.length())+  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.substring(start,  pos.length())+  1;  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.substring(start,  pos.length())+  1;	  char[]    c    =    pattern.substring(start,    pos.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	78	None	replace
241	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(start,  pos.length()));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.substring(start,  pos.length()));  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.substring(start,  pos.length()));	  char[]    c    =    pattern.substring(start,    pos.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	78	None	replace
242	[BUG]  [BUGGY]  appendTo.append(c,  start,  lastHold  +  c.charAt(start));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  lastHold  +  c.charAt(start));  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  lastHold  +  c.charAt(start));	  appendTo.append(c,    start,    lastHold    +    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
243	[BUG]  [BUGGY]  return  c!=  null?  null  :  c.append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c!=  null?  null  :  c.append(QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c!=  null?  null  :  c.append(QUOTE);	  return    c!=    null?    null    :    c.append(END_FE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	69	None	replace
244	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()).append(CHARACTER);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()).append(CHARACTER);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()).append(CHARACTER);	  appendTo.append(c,    start,    pos.getIndex()    -    1).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
245	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  pattern.toCharArray());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  pattern.toCharArray());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  pattern.toCharArray());	  appendTo.append(c,    start,    pos.getIndex()    -    p.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
246	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  pattern.charAt(pos.getIndex()  -  p.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  pattern.charAt(pos.getIndex()  -  p.getIndex());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  pattern.charAt(pos.getIndex()  -  p.getIndex());	  appendTo.append(c,    start,    pos.getIndex()    -    p.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
247	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  pattern.charAt(pos.getIndex()));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  pattern.charAt(pos.getIndex()));  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  pattern.charAt(pos.getIndex()));	  appendTo.append(c,    start,    pos.getIndex()    -    p.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
248	[BUG]  [BUGGY]  pos.setIndex(i  +  pattern.length()  -  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  pattern.length()  -  start);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  pattern.length()  -  start);	  pos.setIndex(i    +    c.length()    -    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
249	[BUG]  [BUGGY]  return  c  ==  null?  null  :  c.append(escapingOn?  START_FMT  :  c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c  ==  null?  null  :  c.append(escapingOn?  START_FMT  :  c);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c  ==  null?  null  :  c.append(escapingOn?  START_FMT  :  c);	  return    c    ==    null?    null    :    appendTo.append(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
250	[BUG]  [BUGGY]  return  c!=  null?  null  :  c.append(pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c!=  null?  null  :  c.append(pattern);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c!=  null?  null  :  c.append(pattern);	  return    c    ==    null?    null    :    appendTo.append(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
251	[BUG]  [BUGGY]  lastHold  =  pos.getIndex()  -  QUOTE;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  lastHold  =  pos.getIndex()  -  QUOTE;  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	lastHold  =  pos.getIndex()  -  QUOTE;	  lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
252	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos  +  1,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos  +  1,  escapingOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos  +  1,  escapingOn);	  appendTo.append(c,    start,    pos    +    ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
253	[BUG]  [BUGGY]  appendTo.append(c,  starting  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  starting  +  1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  starting  +  1);	  appendTo.append(c,    starting);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
254	[BUG]  [BUGGY]  appendTo.append(c,  start,  i  +  1,  pattern.charAt(i  +  1));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  i  +  1,  pattern.charAt(i  +  1));  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  i  +  1,  pattern.charAt(i  +  1));	  appendTo.append(c,    start,    i    +    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
255	[BUG]  [BUGGY]  Char[]  c  =  pattern.toCharArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  Char[]  c  =  pattern.toCharArray();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	Char[]  c  =  pattern.toCharArray();	  char[]    c    =    pattern.toCharArray()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
256	[BUG]  [BUGGY]  return  appendTo  ==  null  ||  escapingOn?  null  :  pattern.appendTo.append(c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo  ==  null  ||  escapingOn?  null  :  pattern.appendTo.append(c);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo  ==  null  ||  escapingOn?  null  :  pattern.appendTo.append(c);	  return    appendTo    ==    null    ||    escapingOn?    null    :    appendTo.append(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
257	[BUG]  [BUGGY]  return  c!=  null?  null  :  c.append(START_FMT);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c!=  null?  null  :  c.append(START_FMT);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c!=  null?  null  :  c.append(START_FMT);	  return    c!=    null?    null    :    c.append(END_FE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	69	None	replace
258	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  lastHold);	  appendTo.append(c,    start,    pos.getIndex()    -    ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
259	[BUG]  [BUGGY]  pos.setIndex(i  +  1,  pattern.substring(start));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  1,  pattern.substring(start));  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  1,  pattern.substring(start));	  pos.setIndex(i    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
260	[BUG]  [BUGGY]  pos.setIndex(i  +  pattern.charAt(c.length()  -  1));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  pattern.charAt(c.length()  -  1));  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  pattern.charAt(c.length()  -  1));	  pos.setIndex(i    +    c.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
261	[BUG]  [BUGGY]  return  appendTo  ==  null?  null  :  appendTo.append(c,  starting  +  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo  ==  null?  null  :  appendTo.append(c,  starting  +  2);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo  ==  null?  null  :  appendTo.append(c,  starting  +  2);	  return    appendTo    ==    null?    null    :    appendTo.append(c,    starting);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
262	[BUG]  [BUGGY]  return  appendTo!=  null  &&  escapingOn?  null  :  c.append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo!=  null  &&  escapingOn?  null  :  c.append(QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo!=  null  &&  escapingOn?  null  :  c.append(QUOTE);	  return    appendTo    ==    null    &&    escapingOn?    null    :    appendTo.append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
263	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(start,  end);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.substring(start,  end);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.substring(start,  end);	  char[]    c    =    pattern.substring(start,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
264	[BUG]  [BUGGY]  appendTo.append(c,  start,  lastHold);  pos.setIndex(i  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  lastHold);  pos.setIndex(i  +  1);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  lastHold);  pos.setIndex(i  +  1);	  appendTo.append(c,    start,    lastHold);    pos.setIndex(i    +    ESCAPED_QUOTE.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	79	None	replace
265	[BUG]  [BUGGY]  char  c  =  pattern.substring(start,  c.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.substring(start,  c.length());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.substring(start,  c.length());	  char    c    =    pattern.substring(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
266	[BUG]  [BUGGY]  pos.setIndex(i  +  pattern.length());  lastHold  =  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  pattern.length());  lastHold  =  pos.getIndex();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  pattern.length());  lastHold  =  pos.getIndex();	  pos.setIndex(i    +    c.length()    -    1);    lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
267	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(ESCHARD_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(ESCHARD_QUOTE);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(ESCHARD_QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    -    lastHold).append(ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
268	[BUG]  [BUGGY]  String  c  =  pattern.substring(start,  pos.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  String  c  =  pattern.substring(start,  pos.getIndex());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	String  c  =  pattern.substring(start,  pos.getIndex());	  String    c    =    pattern.toCharArray();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
269	[BUG]  [BUGGY]  String  c  =  pattern.substring(start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  String  c  =  pattern.substring(start);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	String  c  =  pattern.substring(start);	  String    c    =    pattern.toCharArray();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
270	[BUG]  [BUGGY]  return  appendTo  ==  null  ||  escapingOn?  null  :  c.toString();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  appendTo  ==  null  ||  escapingOn?  null  :  c.toString();  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  appendTo  ==  null  ||  escapingOn?  null  :  c.toString();	  return    appendTo    ==    null    ||    escapingOn?    null    :    c.append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	71	None	replace
271	[BUG]  [BUGGY]  if(!escapingOn)  {  pos.setIndex(i  +  1);  lastHold  =  pos.getIndex();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  if(!escapingOn)  {  pos.setIndex(i  +  1);  lastHold  =  pos.getIndex();  }  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	if(!escapingOn)  {  pos.setIndex(i  +  1);  lastHold  =  pos.getIndex();  }	  pos.setIndex(i    +    1);    lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	28	None	replace
272	[BUG]  [BUGGY]  appendTo.append(pattern,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(pattern,  escapingOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(pattern,  escapingOn);	  appendTo.append(c,    escapingOn);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
273	[BUG]  [BUGGY]  appendTo.append(c,  start,  i  +  1,  pattern.charAt(i  +  1).length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  i  +  1,  pattern.charAt(i  +  1).length());  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  i  +  1,  pattern.charAt(i  +  1).length());	  appendTo.append(c,    start,    i    +    1,    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	84	None	replace
274	[BUG]  [BUGGY]  appendTo.append(c,  start,  4);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  4);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  4);	  appendTo.append(c,    start,    0);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	67	None	replace
275	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  4).append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  4).append(QUOTE);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  4).append(QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    -    ESCAPED_QUOTE).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
276	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(start,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char[]  c  =  pattern.toCharArray(start,  pos);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char[]  c  =  pattern.toCharArray(start,  pos);	  char[]    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
277	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(start,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.toCharArray(start,  pos);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.toCharArray(start,  pos);	  char    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
278	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(end);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.toCharArray(end);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.toCharArray(end);	  char    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
279	[BUG]  [BUGGY]  return  escapingOn  &&  c  ==  null  ||  escapingOn?  null  :  c.append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  escapingOn  &&  c  ==  null  ||  escapingOn?  null  :  c.append(QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  escapingOn  &&  c  ==  null  ||  escapingOn?  null  :  c.append(QUOTE);	  return    escapingOn    &&    appendTo    ==    null    ||    escapingOn?    null    :    appendTo.append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
280	[BUG]  [BUGGY]  return  escapingOn  &&  appendTo!=  null  ||  escapingOn?  null  :  appendTo.append(c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  escapingOn  &&  appendTo!=  null  ||  escapingOn?  null  :  appendTo.append(c);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  escapingOn  &&  appendTo!=  null  ||  escapingOn?  null  :  appendTo.append(c);	  return    escapingOn    &&    appendTo    ==    null    ||    escapingOn?    null    :    appendTo.append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
281	[BUG]  [BUGGY]  return  escapingOn  &&  pattern  ==  null  ||  escapingOn?  null  :  pattern.appendTo.append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  escapingOn  &&  pattern  ==  null  ||  escapingOn?  null  :  pattern.appendTo.append(QUOTE);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  escapingOn  &&  pattern  ==  null  ||  escapingOn?  null  :  pattern.appendTo.append(QUOTE);	  return    escapingOn    &&    appendTo    ==    null    ||    escapingOn?    null    :    appendTo.append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
282	[BUG]  [BUGGY]  return  escapingOn  &&  appendTo  ==  null  ||  escapingOn?  null  :  appendTo.append(c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  escapingOn  &&  appendTo  ==  null  ||  escapingOn?  null  :  appendTo.append(c);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  escapingOn  &&  appendTo  ==  null  ||  escapingOn?  null  :  appendTo.append(c);	  return    escapingOn    &&    appendTo    ==    null    ||    escapingOn?    null    :    appendTo.append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
283	[BUG]  [BUGGY]  char  c  =  pattern.toCharBuffer(1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  char  c  =  pattern.toCharBuffer(1);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	char  c  =  pattern.toCharBuffer(1);	  char    c    =    pattern.toCharBuffer();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
284	[BUG]  [BUGGY]  appendTo.append(c,  start,  lastHold,  escapedOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  appendTo.append(c,  start,  lastHold,  escapedOn);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	appendTo.append(c,  start,  lastHold,  escapedOn);	  appendTo.append(c,    start,    lastHold,    escapingOn);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
285	[BUG]  [BUGGY]  return  c  ==  null?  null  :  c.append(c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c  ==  null?  null  :  c.append(c);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c  ==  null?  null  :  c.append(c);	  return    c!=    null?    null    :    appendTo.append(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
286	[BUG]  [BUGGY]  return  c!=  null?  null  :  c.append(escapingOn?  START_FMT  :  c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  return  c!=  null?  null  :  c.append(escapingOn?  START_FMT  :  c);  [BUGGY]      }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	return  c!=  null?  null  :  c.append(escapingOn?  START_FMT  :  c);	  return    c!=    null?    null    :    appendTo.append(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
287	[BUG]  [BUGGY]  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {      [BUGGY]  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();	  pos.setIndex(i    +    start);    lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	62	None	replace
